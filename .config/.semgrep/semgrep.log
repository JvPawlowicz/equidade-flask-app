2025-05-07 18:31:03,195 - semgrep.run_scan - DEBUG - semgrep version 1.2.0
2025-05-07 18:31:03,206 - semgrep.git - DEBUG - Failed to get project url from 'git ls-remote': Command failed with exit code: 128
-----
Command failed with output:
fatal: No remote configured to list refs from.


Failed to run 'git ls-remote --get-url'. Possible reasons:

- the git binary is not available
- the current working directory is not a git repository
- the baseline commit is not a parent of the current commit
    (if you are running through semgrep-app, check if you are setting `SEMGREP_BRANCH` or `SEMGREP_BASELINE_COMMIT` properly)
- the current working directory is not marked as safe
    (fix with `git config --global --add safe.directory $(pwd)`)

Try running the command yourself to debug the issue.
2025-05-07 18:31:03,207 - semgrep.config_resolver - DEBUG - Loading local config from /home/runner/workspace/.config/.semgrep/semgrep_rules.json
2025-05-07 18:31:03,230 - semgrep.config_resolver - DEBUG - Done loading local config from /home/runner/workspace/.config/.semgrep/semgrep_rules.json
2025-05-07 18:31:03,234 - semgrep.config_resolver - DEBUG - Saving rules to /tmp/semgrep-e_2nj4q4.rules
2025-05-07 18:31:03,487 - semgrep.semgrep_core - DEBUG - Failed to open resource semgrep-core-proprietary: [Errno 2] No such file or directory: '/tmp/_MEIuw5CjE/semgrep/bin/semgrep-core-proprietary'.
2025-05-07 18:31:04,226 - semgrep.rule_lang - DEBUG - semgrep-core validation response: valid=True
2025-05-07 18:31:04,226 - semgrep.rule_lang - DEBUG - semgrep-core validation succeeded
2025-05-07 18:31:04,226 - semgrep.rule_lang - DEBUG - RPC validation succeeded
2025-05-07 18:31:04,227 - semgrep.config_resolver - DEBUG - loaded 1 configs in 1.02034592628479
2025-05-07 18:31:04,483 - semgrep.run_scan - VERBOSE - running 1250 rules from 1 config /home/runner/workspace/.config/.semgrep/semgrep_rules.json_0
2025-05-07 18:31:04,483 - semgrep.run_scan - VERBOSE - No .semgrepignore found. Using default .semgrepignore rules. See the docs for the list of default ignores: https://semgrep.dev/docs/cli-usage/#ignore-files
2025-05-07 18:31:04,486 - semgrep.run_scan - VERBOSE - Rules:
2025-05-07 18:31:04,486 - semgrep.run_scan - VERBOSE - <SKIPPED DATA (too many entries; use --max-log-list-entries)>
2025-05-07 18:31:05,434 - semgrep.core_runner - DEBUG - Passing whole rules directly to semgrep_core
2025-05-07 18:31:05,799 - semgrep.core_runner - DEBUG - Running Semgrep engine with command:
2025-05-07 18:31:05,799 - semgrep.core_runner - DEBUG - /tmp/_MEIuw5CjE/semgrep/bin/opengrep-core -json -rules /tmp/tmp6rw5lbs5.json -j 8 -targets /tmp/tmpeanjgje_ -timeout 5 -timeout_threshold 3 -max_memory 0 -fast
2025-05-07 18:31:35,095 - semgrep.core_runner - DEBUG - --- semgrep-core stderr ---
[00.09][[34mINFO[0m]: Executed as: /tmp/_MEIuw5CjE/semgrep/bin/opengrep-core -json -rules /tmp/tmp6rw5lbs5.json -j 8 -targets /tmp/tmpeanjgje_ -timeout 5 -timeout_threshold 3 -max_memory 0 -fast
[00.09][[34mINFO[0m]: Version: 1.2.0
[00.09][[34mINFO[0m]: Parsing rules in /tmp/tmp6rw5lbs5.json
[01.01][[34mINFO[0m]: scan: processing 597 files (skipping 0), with 494 rules (skipping 0 )
[04.43][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/components/reports/report-exporter.tsx func: ReportExporter:22337]
[0m[05.62][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/pages/patients-page.tsx func: PatientsPage:40812]
[0m[06.68][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring file: db/seed.ts func: seed:62440]
[0m[07.57][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring file: client/src/components/reports/patient-report.tsx func: PatientReport:76777]
[0m[07.76][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/components/reports/patient-report.tsx func: PatientReport:76777]
[0m[08.08][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/components/appointments/appointment-form.tsx func: AppointmentForm:82788]
[0m[08.11][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: shared/schema.ts func: ???]
[0m[08.11][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.tainted-sql-string file: client/src/components/reports/patient-report.tsx func: PatientReport:76777]
[0m[08.18][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.typescript.react.security.audit.react-href-var file: client/src/components/schedule/Schedule.jsx func: ???]
[0m[08.48][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.raw-html-format file: client/src/components/reports/patient-report.tsx func: PatientReport:76777]
[0m[08.88][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.audit.remote-property-injection file: client/src/components/reports/patient-report.tsx func: PatientReport:76777]
[0m[09.09][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.x-frame-options-misconfiguration file: client/src/components/reports/patient-report.tsx func: PatientReport:76777]
[0m[09.28][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.require-request file: client/src/components/reports/patient-report.tsx func: PatientReport:76777]
[0m[10.31][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.typescript.react.security.audit.react-href-var file: server/routes.ts func: registerRoutes:86425]
[0m[10.48][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.typescript.react.security.audit.react-href-var file: server/routes.ts func: registerRoutes:86425]
[0m[10.70][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.typescript.react.security.audit.react-href-var file: server/routes.ts func: registerRoutes:86425]
[0m[10.76][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.typescript.react.security.audit.react-href-var file: server/routes.ts func: registerRoutes:86425]
[0m[10.88][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.cors-misconfiguration file: client/src/pages/evolutions-page.tsx func: EvolutionsPage:102356]
[0m[11.09][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.typescript.react.security.audit.react-href-var file: server/routes.ts func: registerRoutes:86425]
[0m[11.09][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.typescript.react.security.audit.react-href-var file: server/routes.ts func: registerRoutes:86425]
[0m[11.34][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring file: client/src/pages/configuracoes/historico.tsx func: HistoricoPage:112565]
[0m[11.41][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/components/reports/statistics-export.tsx func: StatisticsExport:113882]
[0m[11.59][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.typescript.react.security.audit.react-href-var file: client/src/pages/reports-page.tsx func: ReportsPage:111398]
[0m[11.87][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring file: client/src/pages/reports-page.tsx func: ReportsPage:111398]
[0m[12.07][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/pages/reports-page.tsx func: ReportsPage:111398]
[0m[12.26][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.path-traversal.path-join-resolve-traversal file: server/routes.ts func: registerRoutes:86425]
[0m[12.32][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.path-traversal.path-join-resolve-traversal file: server/routes.ts func: registerRoutes:86425]
[0m[12.42][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.path-traversal.path-join-resolve-traversal file: server/routes.ts func: registerRoutes:86425]
[0m[12.50][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.raw-html-format file: client/src/pages/reports-page.tsx func: ReportsPage:111398]
[0m[12.52][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.path-traversal.path-join-resolve-traversal file: server/routes.ts func: registerRoutes:86425]
[0m[12.62][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.path-traversal.path-join-resolve-traversal file: server/routes.ts func: registerRoutes:86425]
[0m[12.70][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.path-traversal.path-join-resolve-traversal file: server/routes.ts func: registerRoutes:86425]
[0m[12.75][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.path-traversal.path-join-resolve-traversal file: server/routes.ts func: registerRoutes:86425]
[0m[12.89][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.path-traversal.path-join-resolve-traversal file: server/routes.ts func: registerRoutes:86425]
[0m[12.89][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.path-traversal.path-join-resolve-traversal file: server/routes.ts func: registerRoutes:86425]
[0m[12.97][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.express-wkhtmltoimage-injection file: client/src/pages/reports-page.tsx func: ReportsPage:111398]
[0m[13.26][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: client/src/pages/professionals-page.tsx func: ProfessionalsPage:143790]
[0m[13.56][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring file: server/routes.ts func: registerRoutes:86425]
[0m[14.03][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: server/routes.ts func: registerRoutes:86425]
[0m[14.12][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: server/routes.ts func: registerRoutes:86425]
[0m[14.21][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: server/routes.ts func: registerRoutes:86425]
[0m[14.28][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: server/routes.ts func: registerRoutes:86425]
[0m[14.62][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-require file: server/routes.ts func: registerRoutes:86425]
[0m[15.58][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.detect-non-literal-fs-filename file: server/routes.ts func: registerRoutes:86425]
[0m[16.20][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.code-string-concat file: server/routes.ts func: registerRoutes:86425]
[0m[16.42][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.code-string-concat file: server/routes.ts func: registerRoutes:86425]
[0m[16.62][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.code-string-concat file: server/routes.ts func: registerRoutes:86425]
[0m[16.89][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.lang.security.audit.code-string-concat file: server/routes.ts func: registerRoutes:86425]
[0m[17.52][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.tainted-sql-string file: server/routes.ts func: registerRoutes:86425]
[0m[18.14][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.raw-html-format file: server/routes.ts func: registerRoutes:86425]
[0m[18.39][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.raw-html-format file: server/routes.ts func: registerRoutes:86425]
[0m[18.59][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.raw-html-format file: server/routes.ts func: registerRoutes:86425]
[0m[18.94][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.injection.raw-html-format file: server/routes.ts func: registerRoutes:86425]
[0m[19.66][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.audit.xss.direct-response-write file: server/routes.ts func: registerRoutes:86425]
[0m[20.06][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.audit.xss.direct-response-write file: server/routes.ts func: registerRoutes:86425]
[0m[20.32][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.audit.xss.direct-response-write file: server/routes.ts func: registerRoutes:86425]
[0m[20.72][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.audit.remote-property-injection file: server/routes.ts func: registerRoutes:86425]
[0m[21.50][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.audit.express-res-sendfile file: server/routes.ts func: registerRoutes:86425]
[0m[21.88][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.audit.express-res-sendfile file: server/routes.ts func: registerRoutes:86425]
[0m[22.17][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.audit.express-res-sendfile file: server/routes.ts func: registerRoutes:86425]
[0m[22.67][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.audit.express-path-join-resolve-traversal file: server/routes.ts func: registerRoutes:86425]
[0m[23.07][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.audit.express-path-join-resolve-traversal file: server/routes.ts func: registerRoutes:86425]
[0m[23.36][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.audit.express-path-join-resolve-traversal file: server/routes.ts func: registerRoutes:86425]
[0m[24.04][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.audit.express-open-redirect file: server/routes.ts func: registerRoutes:86425]
[0m[24.26][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.audit.express-open-redirect file: server/routes.ts func: registerRoutes:86425]
[0m[24.45][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.audit.express-open-redirect file: server/routes.ts func: registerRoutes:86425]
[0m[24.71][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.audit.express-open-redirect file: server/routes.ts func: registerRoutes:86425]
[0m[25.18][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.x-frame-options-misconfiguration file: server/routes.ts func: registerRoutes:86425]
[0m[25.60][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.x-frame-options-misconfiguration file: server/routes.ts func: registerRoutes:86425]
[0m[25.93][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.x-frame-options-misconfiguration file: server/routes.ts func: registerRoutes:86425]
[0m[26.42][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.require-request file: server/routes.ts func: registerRoutes:86425]
[0m[26.82][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.require-request file: server/routes.ts func: registerRoutes:86425]
[0m[27.07][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.require-request file: server/routes.ts func: registerRoutes:86425]
[0m[27.55][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.cors-misconfiguration file: server/routes.ts func: registerRoutes:86425]
[0m[27.77][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.cors-misconfiguration file: server/routes.ts func: registerRoutes:86425]
[0m[27.96][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.cors-misconfiguration file: server/routes.ts func: registerRoutes:86425]
[0m[28.20][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.express.security.cors-misconfiguration file: server/routes.ts func: registerRoutes:86425]
[0m[28.70][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.javascript.browser.security.js-open-redirect-from-function file: server/routes.ts func: registerRoutes:86425]
[0m[29.24][[34mINFO[0m]: Custom ignore pattern: None
[29.24][[34mINFO[0m]: Custom ignore pattern: None
--- end semgrep-core stderr ---
2025-05-07 18:31:35,104 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/Pasted-WebSocket-interceptor-instalado-vite-fix-js-22-Vite-WebSocket-interceptado-wss-35b03a2a-9847-4e3-1746559415820.txt'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = d581d7093b618ac730463f6fdc2a6009dd39f9ec73437219f61321e29440ed28f59ac5f1dc6532484c9503e01703eadf8d28488a3614800a75e9c0523646ea3a_0
2025-05-07 18:31:35,105 - semgrep.rule_match - DEBUG - match_key = ('XFomq-zrApSx XFomq-zrApSx (?!(?i).*(client|endpoint|vpn|_ec2_|aws_|authorize|author|define|config|credential|setting|sample|xxxxxx|000000|buffer|delete|aaaaaa|fewfwef|getenv|env_|system|example|ecdsa|sha256|sha1|sha2|md5|alert|wizard|target|onboard|welcome|page|exploit|experiment|expire|rabbitmq|scraper|widget|music|dns_|dns-|yahoo|want|json|action|script|fix_|fix-|develop|compas|stripe|service|master|metric|tech|gitignore|rich|open|stack|irc_|irc-|sublime|kohana|has_|has-|fabric|wordpres|role|osx_|osx-|boost|addres|queue|working|sandbox|internet|print|vision|tracking|being|generator|traffic|world|pull|rust|watcher|small|auth|full|hash|more|install|auto|complete|learn|paper|installer|research|acces|last|binding|spine|into|chat|algorithm|resource|uploader|video|maker|next|proc|lock|robot|snake|patch|matrix|drill|terminal|term|stuff|genetic|generic|identity|audit|pattern|audio|web_|web-|crud|problem|statu|cms-|cms_|arch|coffee|workflow|changelog|another|uiview|content|kitchen|gnu_|gnu-|gnu\\.|conf|couchdb|client|opencv|rendering|update|concept|varnish|gui_|gui-|gui\\.|version|shared|extra|product|still|not_|not-|not\\.|drop|ring|png_|png-|png\\.|actively|import|output|backup|start|embedded|registry|pool|semantic|instagram|bash|system|ninja|drupal|jquery|polyfill|physic|league|guide|pack|synopsi|sketch|injection|svg_|svg-|svg\\.|friendly|wave|convert|manage|camera|link|slide|timer|wrapper|gallery|url_|url-|url\\.|todomvc|requirej|party|http|payment|async|library|home|coco|gaia|display|universal|func|metadata|hipchat|under|room|config|personal|realtime|resume|database|testing|tiny|basic|forum|meetup|yet_|yet-|yet\\.|cento|dead|fluentd|editor|utilitie|run_|run-|run\\.|box_|box-|box\\.|bot_|bot-|bot\\.|making|sample|group|monitor|ajax|parallel|cassandra|ultimate|site|get_|get-|get\\.|gen_|gen-|gen\\.|gem_|gem-|gem\\.|extended|image|knife|asset|nested|zero|plugin|bracket|mule|mozilla|number|act_|act-|act\\.|map_|map-|map\\.|micro|debug|openshift|chart|expres|backend|task|source|translate|jbos|composer|sqlite|profile|mustache|mqtt|yeoman|have|builder|smart|like|oauth|school|guideline|captcha|filter|bitcoin|bridge|color|toolbox|discovery|new_|new-|new\\.|dashboard|when|setting|level|post|standard|port|platform|yui_|yui-|yui\\.|grunt|animation|haskell|icon|latex|cheat|lua_|lua-|lua\\.|gulp|case|author|without|simulator|wifi|directory|lisp|list|flat|adventure|story|storm|gpu_|gpu-|gpu\\.|store|caching|attention|solr|logger|demo|shortener|hadoop|finder|phone|pipeline|range|textmate|showcase|app_|app-|app\\.|idiomatic|edit|our_|our-|our\\.|out_|out-|out\\.|sentiment|linked|why_|why-|why\\.|local|cube|gmail|job_|job-|job\\.|rpc_|rpc-|rpc\\.|contest|tcp_|tcp-|tcp\\.|usage|buildout|weather|transfer|automated|sphinx|issue|sas_|sas-|sas\\.|parallax|jasmine|addon|machine|solution|dsl_|dsl-|dsl\\.|episode|menu|theme|best|adapter|debugger|chrome|tutorial|life|step|people|joomla|paypal|developer|solver|team|current|love|visual|date|data|canva|container|future|xml_|xml-|xml\\.|twig|nagio|spatial|original|sync|archived|refinery|science|mapping|gitlab|play|ext_|ext-|ext\\.|session|impact|set_|set-|set\\.|see_|see-|see\\.|migration|commit|community|shopify|what\'|cucumber|statamic|mysql|location|tower|line|code|amqp|hello|send|index|high|notebook|alloy|python|field|document|soap|edition|email|php_|php-|php\\.|command|transport|official|upload|study|secure|angularj|akka|scalable|package|request|con_|con-|con\\.|flexible|security|comment|module|flask|graph|flash|apache|change|window|space|lambda|sheet|bookmark|carousel|friend|objective|jekyll|bootstrap|first|article|gwt_|gwt-|gwt\\.|classic|media|websocket|touch|desktop|real|read|recorder|moved|storage|validator|add-on|pusher|scs_|scs-|scs\\.|inline|asp_|asp-|asp\\.|timeline|base|encoding|ffmpeg|kindle|tinymce|pretty|jpa_|jpa-|jpa\\.|used|user|required|webhook|download|resque|espresso|cloud|mongo|benchmark|pure|cakephp|modx|mode|reactive|fuel|written|flickr|mail|brunch|meteor|dynamic|neo_|neo-|neo\\.|new_|new-|new\\.|net_|net-|net\\.|typo|type|keyboard|erlang|adobe|logging|ckeditor|message|iso_|iso-|iso\\.|hook|ldap|folder|reference|railscast|www_|www-|www\\.|tracker|azure|fork|form|digital|exporter|skin|string|template|designer|gollum|fluent|entity|language|alfred|summary|wiki|kernel|calendar|plupload|symfony|foundry|remote|talk|search|dev_|dev-|dev\\.|del_|del-|del\\.|token|idea|sencha|selector|interface|create|fun_|fun-|fun\\.|groovy|query|grail|red_|red-|red\\.|laravel|monkey|slack|supported|instant|value|center|latest|work|but_|but-|but\\.|bug_|bug-|bug\\.|virtual|tweet|statsd|studio|path|real-time|frontend|notifier|coding|tool|firmware|flow|random|mediawiki|bosh|been|beer|lightbox|theory|origin|redmine|hub_|hub-|hub\\.|require|pro_|pro-|pro\\.|ant_|ant-|ant\\.|any_|any-|any\\.|recipe|closure|mapper|event|todo|model|redi|provider|rvm_|rvm-|rvm\\.|program|memcached|rail|silex|foreman|activity|license|strategy|batch|streaming|fast|use_|use-|use\\.|usb_|usb-|usb\\.|impres|academy|slider|please|layer|cros|now_|now-|now\\.|miner|extension|own_|own-|own\\.|app_|app-|app\\.|debian|symphony|example|feature|serie|tree|project|runner|entry|leetcode|layout|webrtc|logic|login|worker|toolkit|mocha|support|back|inside|device|jenkin|contact|fake|awesome|ocaml|bit_|bit-|bit\\.|drive|screen|prototype|gist|binary|nosql|rest|overview|dart|dark|emac|mongoid|solarized|homepage|emulator|commander|django|yandex|gradle|xcode|writer|crm_|crm-|crm\\.|jade|startup|error|using|format|name|spring|parser|scratch|magic|try_|try-|try\\.|rack|directive|challenge|slim|counter|element|chosen|doc_|doc-|doc\\.|meta|should|button|packet|stream|hardware|android|infinite|password|software|ghost|xamarin|spec|chef|interview|hubot|mvc_|mvc-|mvc\\.|exercise|leaflet|launcher|air_|air-|air\\.|photo|board|boxen|way_|way-|way\\.|computing|welcome|notepad|portfolio|cat_|cat-|cat\\.|can_|can-|can\\.|magento|yaml|domain|card|yii_|yii-|yii\\.|checker|browser|upgrade|only|progres|aura|ruby_|ruby-|ruby\\.|polymer|util|lite|hackathon|rule|log_|log-|log\\.|opengl|stanford|skeleton|history|inspector|help|soon|selenium|lab_|lab-|lab\\.|scheme|schema|look|ready|leveldb|docker|game|minimal|logstash|messaging|within|heroku|mongodb|kata|suite|picker|win_|win-|win\\.|wip_|wip-|wip\\.|panel|started|starter|front-end|detector|deploy|editing|based|admin|capture|spree|page|bundle|goal|rpg_|rpg-|rpg\\.|setup|side|mean|reader|cookbook|mini|modern|seed|dom_|dom-|dom\\.|doc_|doc-|doc\\.|dot_|dot-|dot\\.|syntax|sugar|loader|website|make|kit_|kit-|kit\\.|protocol|human|daemon|golang|manager|countdown|connector|swagger|map_|map-|map\\.|mac_|mac-|mac\\.|man_|man-|man\\.|orm_|orm-|orm\\.|org_|org-|org\\.|little|zsh_|zsh-|zsh\\.|shop|show|workshop|money|grid|server|octopres|svn_|svn-|svn\\.|ember|embed|general|file|important|dropbox|portable|public|docpad|fish|sbt_|sbt-|sbt\\.|done|para|network|common|readme|popup|simple|purpose|mirror|single|cordova|exchange|object|design|gateway|account|lamp|intellij|math|mit_|mit-|mit\\.|control|enhanced|emitter|multi|add_|add-|add\\.|about|socket|preview|vagrant|cli_|cli-|cli\\.|powerful|top_|top-|top\\.|radio|watch|fluid|amazon|report|couchbase|automatic|detection|sprite|pyramid|portal|advanced|plu_|plu-|plu\\.|runtime|git_|git-|git\\.|uri_|uri-|uri\\.|haml|node|sql_|sql-|sql\\.|cool|core|obsolete|handler|iphone|extractor|array|copy|nlp_|nlp-|nlp\\.|reveal|pop_|pop-|pop\\.|engine|parse|check|html|nest|all_|all-|all\\.|chinese|buildpack|what|tag_|tag-|tag\\.|proxy|style|cookie|feed|restful|compiler|creating|prelude|context|java|rspec|mock|backbone|light|spotify|flex|related|shell|which|clas|webapp|swift|ansible|unity|console|tumblr|export|campfire|conway\'|made|riak|hero|here|unix|unit|glas|smtp|how_|how-|how\\.|hot_|hot-|hot\\.|debug|release|diff|player|easy|right|old_|old-|old\\.|animate|time|push|explorer|course|training|nette|router|draft|structure|note|salt|where|spark|trello|power|method|social|via_|via-|via\\.|vim_|vim-|vim\\.|select|webkit|github|ftp_|ftp-|ftp\\.|creator|mongoose|led_|led-|led\\.|movie|currently|pdf_|pdf-|pdf\\.|load|markdown|phalcon|input|custom|atom|oracle|phonegap|ubuntu|great|rdf_|rdf-|rdf\\.|popcorn|firefox|zip_|zip-|zip\\.|cuda|dotfile|static|openwrt|viewer|powered|graphic|les_|les-|les\\.|doe_|doe-|doe\\.|maven|word|eclipse|lab_|lab-|lab\\.|hacking|steam|analytic|option|abstract|archive|reality|switcher|club|write|kafka|arduino|angular|online|title|don\'t|contao|notice|analyzer|learning|zend|external|staging|busines|tdd_|tdd-|tdd\\.|scanner|building|snippet|modular|bower|stm_|stm-|stm\\.|lib_|lib-|lib\\.|alpha|mobile|clean|linux|nginx|manifest|some|raspberry|gnome|ide_|ide-|ide\\.|block|statistic|info|drag|youtube|koan|facebook|paperclip|art_|art-|art\\.|quality|tab_|tab-|tab\\.|need|dojo|shield|computer|stat|state|twitter|utility|converter|hosting|devise|liferay|updated|force|tip_|tip-|tip\\.|behavior|active|call|answer|deck|better|principle|ches|bar_|bar-|bar\\.|reddit|three|haxe|just|plug-in|agile|manual|tetri|super|beta|parsing|doctrine|minecraft|useful|perl|sharing|agent|switch|view|dash|channel|repo|pebble|profiler|warning|cluster|running|markup|evented|mod_|mod-|mod\\.|share|csv_|csv-|csv\\.|response|good|house|connect|built|build|find|ipython|webgl|big_|big-|big\\.|google|scala|sdl_|sdl-|sdl\\.|sdk_|sdk-|sdk\\.|native|day_|day-|day\\.|puppet|text|routing|helper|linkedin|crawler|host|guard|merchant|poker|over|writing|free|classe|component|craft|nodej|phoenix|longer|quick|lazy|memory|clone|hacker|middleman|factory|motion|multiple|tornado|hack|ssh_|ssh-|ssh\\.|review|vimrc|driver|driven|blog|particle|table|intro|importer|thrift|xmpp|framework|refresh|react|font|librarie|variou|formatter|analysi|karma|scroll|tut_|tut-|tut\\.|apple|tag_|tag-|tag\\.|tab_|tab-|tab\\.|category|ionic|cache|homebrew|reverse|english|getting|shipping|clojure|boot|book|branch|combination|combo)) XFomq-zrApSx (?!(^0x0*|^pub)|.*\\.(bin|json|exe)$|.*(?i)(Client|Factory)$|(^__[A-Za-z]+__$)|^(12345|abcd)|^\\d+(\\.\\d+)?$) XFomq-zrApSx entropy (?i)(?:key|api|token|secret|client|passwd|password|auth|access)(?:[0-9a-z\\-_\\t.]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:=|\\|\\|:|<=|=>|:)(?:\'|@\\"|\\"|\\s|=|\\x60){0,5}(?!([a-z]+\\.[a-zA-Z]+)|.*(\\d{4}-\\d{2}-\\d{2})|:*(?!("|\'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)(?P<CONTENT>[0-9a-z\\-_.=\\~@]{10,150})(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$) (\\d\\.\\d\\.\\d-}|([\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3})|(\\w)\\1{5}|(?i)keywords|xxxx|eeeeeeee|0000|\\*\\*\\*|example|test|author=|author("|\')|preview|[A-Z]+_KEY|[.]value|[.]key|-\\d\\.\\d\\.) (\\w|\\.)\\1{5} .*((?i)omitted|arn:aws|(?i)(pub.*key|public.*key)|(?i)clientToken|symbol|cache|author\\.).*', PosixPath('attached_assets/Pasted-WebSocket-interceptor-instalado-vite-fix-js-22-Vite-WebSocket-interceptado-wss-35b03a2a-9847-4e3-1746559415820.txt'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = a3a05ac5ffdd700d3b5cede01926d460dc9f745e9d7f37b1ea9b7f382e187bb800a5a2aac93e8568ebbcb85797a7e9f66cbe9bf0bef48a2fca1e62f59d49fed8_0
2025-05-07 18:31:35,105 - semgrep.rule_match - DEBUG - match_key = ('XFomq-zrApSx XFomq-zrApSx (?!(?i).*(client|endpoint|vpn|_ec2_|aws_|authorize|author|define|config|credential|setting|sample|xxxxxx|000000|buffer|delete|aaaaaa|fewfwef|getenv|env_|system|example|ecdsa|sha256|sha1|sha2|md5|alert|wizard|target|onboard|welcome|page|exploit|experiment|expire|rabbitmq|scraper|widget|music|dns_|dns-|yahoo|want|json|action|script|fix_|fix-|develop|compas|stripe|service|master|metric|tech|gitignore|rich|open|stack|irc_|irc-|sublime|kohana|has_|has-|fabric|wordpres|role|osx_|osx-|boost|addres|queue|working|sandbox|internet|print|vision|tracking|being|generator|traffic|world|pull|rust|watcher|small|auth|full|hash|more|install|auto|complete|learn|paper|installer|research|acces|last|binding|spine|into|chat|algorithm|resource|uploader|video|maker|next|proc|lock|robot|snake|patch|matrix|drill|terminal|term|stuff|genetic|generic|identity|audit|pattern|audio|web_|web-|crud|problem|statu|cms-|cms_|arch|coffee|workflow|changelog|another|uiview|content|kitchen|gnu_|gnu-|gnu\\.|conf|couchdb|client|opencv|rendering|update|concept|varnish|gui_|gui-|gui\\.|version|shared|extra|product|still|not_|not-|not\\.|drop|ring|png_|png-|png\\.|actively|import|output|backup|start|embedded|registry|pool|semantic|instagram|bash|system|ninja|drupal|jquery|polyfill|physic|league|guide|pack|synopsi|sketch|injection|svg_|svg-|svg\\.|friendly|wave|convert|manage|camera|link|slide|timer|wrapper|gallery|url_|url-|url\\.|todomvc|requirej|party|http|payment|async|library|home|coco|gaia|display|universal|func|metadata|hipchat|under|room|config|personal|realtime|resume|database|testing|tiny|basic|forum|meetup|yet_|yet-|yet\\.|cento|dead|fluentd|editor|utilitie|run_|run-|run\\.|box_|box-|box\\.|bot_|bot-|bot\\.|making|sample|group|monitor|ajax|parallel|cassandra|ultimate|site|get_|get-|get\\.|gen_|gen-|gen\\.|gem_|gem-|gem\\.|extended|image|knife|asset|nested|zero|plugin|bracket|mule|mozilla|number|act_|act-|act\\.|map_|map-|map\\.|micro|debug|openshift|chart|expres|backend|task|source|translate|jbos|composer|sqlite|profile|mustache|mqtt|yeoman|have|builder|smart|like|oauth|school|guideline|captcha|filter|bitcoin|bridge|color|toolbox|discovery|new_|new-|new\\.|dashboard|when|setting|level|post|standard|port|platform|yui_|yui-|yui\\.|grunt|animation|haskell|icon|latex|cheat|lua_|lua-|lua\\.|gulp|case|author|without|simulator|wifi|directory|lisp|list|flat|adventure|story|storm|gpu_|gpu-|gpu\\.|store|caching|attention|solr|logger|demo|shortener|hadoop|finder|phone|pipeline|range|textmate|showcase|app_|app-|app\\.|idiomatic|edit|our_|our-|our\\.|out_|out-|out\\.|sentiment|linked|why_|why-|why\\.|local|cube|gmail|job_|job-|job\\.|rpc_|rpc-|rpc\\.|contest|tcp_|tcp-|tcp\\.|usage|buildout|weather|transfer|automated|sphinx|issue|sas_|sas-|sas\\.|parallax|jasmine|addon|machine|solution|dsl_|dsl-|dsl\\.|episode|menu|theme|best|adapter|debugger|chrome|tutorial|life|step|people|joomla|paypal|developer|solver|team|current|love|visual|date|data|canva|container|future|xml_|xml-|xml\\.|twig|nagio|spatial|original|sync|archived|refinery|science|mapping|gitlab|play|ext_|ext-|ext\\.|session|impact|set_|set-|set\\.|see_|see-|see\\.|migration|commit|community|shopify|what\'|cucumber|statamic|mysql|location|tower|line|code|amqp|hello|send|index|high|notebook|alloy|python|field|document|soap|edition|email|php_|php-|php\\.|command|transport|official|upload|study|secure|angularj|akka|scalable|package|request|con_|con-|con\\.|flexible|security|comment|module|flask|graph|flash|apache|change|window|space|lambda|sheet|bookmark|carousel|friend|objective|jekyll|bootstrap|first|article|gwt_|gwt-|gwt\\.|classic|media|websocket|touch|desktop|real|read|recorder|moved|storage|validator|add-on|pusher|scs_|scs-|scs\\.|inline|asp_|asp-|asp\\.|timeline|base|encoding|ffmpeg|kindle|tinymce|pretty|jpa_|jpa-|jpa\\.|used|user|required|webhook|download|resque|espresso|cloud|mongo|benchmark|pure|cakephp|modx|mode|reactive|fuel|written|flickr|mail|brunch|meteor|dynamic|neo_|neo-|neo\\.|new_|new-|new\\.|net_|net-|net\\.|typo|type|keyboard|erlang|adobe|logging|ckeditor|message|iso_|iso-|iso\\.|hook|ldap|folder|reference|railscast|www_|www-|www\\.|tracker|azure|fork|form|digital|exporter|skin|string|template|designer|gollum|fluent|entity|language|alfred|summary|wiki|kernel|calendar|plupload|symfony|foundry|remote|talk|search|dev_|dev-|dev\\.|del_|del-|del\\.|token|idea|sencha|selector|interface|create|fun_|fun-|fun\\.|groovy|query|grail|red_|red-|red\\.|laravel|monkey|slack|supported|instant|value|center|latest|work|but_|but-|but\\.|bug_|bug-|bug\\.|virtual|tweet|statsd|studio|path|real-time|frontend|notifier|coding|tool|firmware|flow|random|mediawiki|bosh|been|beer|lightbox|theory|origin|redmine|hub_|hub-|hub\\.|require|pro_|pro-|pro\\.|ant_|ant-|ant\\.|any_|any-|any\\.|recipe|closure|mapper|event|todo|model|redi|provider|rvm_|rvm-|rvm\\.|program|memcached|rail|silex|foreman|activity|license|strategy|batch|streaming|fast|use_|use-|use\\.|usb_|usb-|usb\\.|impres|academy|slider|please|layer|cros|now_|now-|now\\.|miner|extension|own_|own-|own\\.|app_|app-|app\\.|debian|symphony|example|feature|serie|tree|project|runner|entry|leetcode|layout|webrtc|logic|login|worker|toolkit|mocha|support|back|inside|device|jenkin|contact|fake|awesome|ocaml|bit_|bit-|bit\\.|drive|screen|prototype|gist|binary|nosql|rest|overview|dart|dark|emac|mongoid|solarized|homepage|emulator|commander|django|yandex|gradle|xcode|writer|crm_|crm-|crm\\.|jade|startup|error|using|format|name|spring|parser|scratch|magic|try_|try-|try\\.|rack|directive|challenge|slim|counter|element|chosen|doc_|doc-|doc\\.|meta|should|button|packet|stream|hardware|android|infinite|password|software|ghost|xamarin|spec|chef|interview|hubot|mvc_|mvc-|mvc\\.|exercise|leaflet|launcher|air_|air-|air\\.|photo|board|boxen|way_|way-|way\\.|computing|welcome|notepad|portfolio|cat_|cat-|cat\\.|can_|can-|can\\.|magento|yaml|domain|card|yii_|yii-|yii\\.|checker|browser|upgrade|only|progres|aura|ruby_|ruby-|ruby\\.|polymer|util|lite|hackathon|rule|log_|log-|log\\.|opengl|stanford|skeleton|history|inspector|help|soon|selenium|lab_|lab-|lab\\.|scheme|schema|look|ready|leveldb|docker|game|minimal|logstash|messaging|within|heroku|mongodb|kata|suite|picker|win_|win-|win\\.|wip_|wip-|wip\\.|panel|started|starter|front-end|detector|deploy|editing|based|admin|capture|spree|page|bundle|goal|rpg_|rpg-|rpg\\.|setup|side|mean|reader|cookbook|mini|modern|seed|dom_|dom-|dom\\.|doc_|doc-|doc\\.|dot_|dot-|dot\\.|syntax|sugar|loader|website|make|kit_|kit-|kit\\.|protocol|human|daemon|golang|manager|countdown|connector|swagger|map_|map-|map\\.|mac_|mac-|mac\\.|man_|man-|man\\.|orm_|orm-|orm\\.|org_|org-|org\\.|little|zsh_|zsh-|zsh\\.|shop|show|workshop|money|grid|server|octopres|svn_|svn-|svn\\.|ember|embed|general|file|important|dropbox|portable|public|docpad|fish|sbt_|sbt-|sbt\\.|done|para|network|common|readme|popup|simple|purpose|mirror|single|cordova|exchange|object|design|gateway|account|lamp|intellij|math|mit_|mit-|mit\\.|control|enhanced|emitter|multi|add_|add-|add\\.|about|socket|preview|vagrant|cli_|cli-|cli\\.|powerful|top_|top-|top\\.|radio|watch|fluid|amazon|report|couchbase|automatic|detection|sprite|pyramid|portal|advanced|plu_|plu-|plu\\.|runtime|git_|git-|git\\.|uri_|uri-|uri\\.|haml|node|sql_|sql-|sql\\.|cool|core|obsolete|handler|iphone|extractor|array|copy|nlp_|nlp-|nlp\\.|reveal|pop_|pop-|pop\\.|engine|parse|check|html|nest|all_|all-|all\\.|chinese|buildpack|what|tag_|tag-|tag\\.|proxy|style|cookie|feed|restful|compiler|creating|prelude|context|java|rspec|mock|backbone|light|spotify|flex|related|shell|which|clas|webapp|swift|ansible|unity|console|tumblr|export|campfire|conway\'|made|riak|hero|here|unix|unit|glas|smtp|how_|how-|how\\.|hot_|hot-|hot\\.|debug|release|diff|player|easy|right|old_|old-|old\\.|animate|time|push|explorer|course|training|nette|router|draft|structure|note|salt|where|spark|trello|power|method|social|via_|via-|via\\.|vim_|vim-|vim\\.|select|webkit|github|ftp_|ftp-|ftp\\.|creator|mongoose|led_|led-|led\\.|movie|currently|pdf_|pdf-|pdf\\.|load|markdown|phalcon|input|custom|atom|oracle|phonegap|ubuntu|great|rdf_|rdf-|rdf\\.|popcorn|firefox|zip_|zip-|zip\\.|cuda|dotfile|static|openwrt|viewer|powered|graphic|les_|les-|les\\.|doe_|doe-|doe\\.|maven|word|eclipse|lab_|lab-|lab\\.|hacking|steam|analytic|option|abstract|archive|reality|switcher|club|write|kafka|arduino|angular|online|title|don\'t|contao|notice|analyzer|learning|zend|external|staging|busines|tdd_|tdd-|tdd\\.|scanner|building|snippet|modular|bower|stm_|stm-|stm\\.|lib_|lib-|lib\\.|alpha|mobile|clean|linux|nginx|manifest|some|raspberry|gnome|ide_|ide-|ide\\.|block|statistic|info|drag|youtube|koan|facebook|paperclip|art_|art-|art\\.|quality|tab_|tab-|tab\\.|need|dojo|shield|computer|stat|state|twitter|utility|converter|hosting|devise|liferay|updated|force|tip_|tip-|tip\\.|behavior|active|call|answer|deck|better|principle|ches|bar_|bar-|bar\\.|reddit|three|haxe|just|plug-in|agile|manual|tetri|super|beta|parsing|doctrine|minecraft|useful|perl|sharing|agent|switch|view|dash|channel|repo|pebble|profiler|warning|cluster|running|markup|evented|mod_|mod-|mod\\.|share|csv_|csv-|csv\\.|response|good|house|connect|built|build|find|ipython|webgl|big_|big-|big\\.|google|scala|sdl_|sdl-|sdl\\.|sdk_|sdk-|sdk\\.|native|day_|day-|day\\.|puppet|text|routing|helper|linkedin|crawler|host|guard|merchant|poker|over|writing|free|classe|component|craft|nodej|phoenix|longer|quick|lazy|memory|clone|hacker|middleman|factory|motion|multiple|tornado|hack|ssh_|ssh-|ssh\\.|review|vimrc|driver|driven|blog|particle|table|intro|importer|thrift|xmpp|framework|refresh|react|font|librarie|variou|formatter|analysi|karma|scroll|tut_|tut-|tut\\.|apple|tag_|tag-|tag\\.|tab_|tab-|tab\\.|category|ionic|cache|homebrew|reverse|english|getting|shipping|clojure|boot|book|branch|combination|combo)) XFomq-zrApSx (?!(^0x0*|^pub)|.*\\.(bin|json|exe)$|.*(?i)(Client|Factory)$|(^__[A-Za-z]+__$)|^(12345|abcd)|^\\d+(\\.\\d+)?$) XFomq-zrApSx entropy (?i)(?:key|api|token|secret|client|passwd|password|auth|access)(?:[0-9a-z\\-_\\t.]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:=|\\|\\|:|<=|=>|:)(?:\'|@\\"|\\"|\\s|=|\\x60){0,5}(?!([a-z]+\\.[a-zA-Z]+)|.*(\\d{4}-\\d{2}-\\d{2})|:*(?!("|\'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)(?P<CONTENT>[0-9a-z\\-_.=\\~@]{10,150})(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$) (\\d\\.\\d\\.\\d-}|([\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3})|(\\w)\\1{5}|(?i)keywords|xxxx|eeeeeeee|0000|\\*\\*\\*|example|test|author=|author("|\')|preview|[A-Z]+_KEY|[.]value|[.]key|-\\d\\.\\d\\.) (\\w|\\.)\\1{5} .*((?i)omitted|arn:aws|(?i)(pub.*key|public.*key)|(?i)clientToken|symbol|cache|author\\.).*', PosixPath('attached_assets/Pasted-WebSocket-interceptor-instalado-vite-fix-js-22-Vite-WebSocket-interceptado-wss-35b03a2a-9847-4e3-1746559415820.txt'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = a3a05ac5ffdd700d3b5cede01926d460dc9f745e9d7f37b1ea9b7f382e187bb800a5a2aac93e8568ebbcb85797a7e9f66cbe9bf0bef48a2fca1e62f59d49fed8_0
2025-05-07 18:31:35,106 - semgrep.rule_match - DEBUG - match_key = ('XFomq-zrApSx XFomq-zrApSx (?!(?i).*(client|endpoint|vpn|_ec2_|aws_|authorize|author|define|config|credential|setting|sample|xxxxxx|000000|buffer|delete|aaaaaa|fewfwef|getenv|env_|system|example|ecdsa|sha256|sha1|sha2|md5|alert|wizard|target|onboard|welcome|page|exploit|experiment|expire|rabbitmq|scraper|widget|music|dns_|dns-|yahoo|want|json|action|script|fix_|fix-|develop|compas|stripe|service|master|metric|tech|gitignore|rich|open|stack|irc_|irc-|sublime|kohana|has_|has-|fabric|wordpres|role|osx_|osx-|boost|addres|queue|working|sandbox|internet|print|vision|tracking|being|generator|traffic|world|pull|rust|watcher|small|auth|full|hash|more|install|auto|complete|learn|paper|installer|research|acces|last|binding|spine|into|chat|algorithm|resource|uploader|video|maker|next|proc|lock|robot|snake|patch|matrix|drill|terminal|term|stuff|genetic|generic|identity|audit|pattern|audio|web_|web-|crud|problem|statu|cms-|cms_|arch|coffee|workflow|changelog|another|uiview|content|kitchen|gnu_|gnu-|gnu\\.|conf|couchdb|client|opencv|rendering|update|concept|varnish|gui_|gui-|gui\\.|version|shared|extra|product|still|not_|not-|not\\.|drop|ring|png_|png-|png\\.|actively|import|output|backup|start|embedded|registry|pool|semantic|instagram|bash|system|ninja|drupal|jquery|polyfill|physic|league|guide|pack|synopsi|sketch|injection|svg_|svg-|svg\\.|friendly|wave|convert|manage|camera|link|slide|timer|wrapper|gallery|url_|url-|url\\.|todomvc|requirej|party|http|payment|async|library|home|coco|gaia|display|universal|func|metadata|hipchat|under|room|config|personal|realtime|resume|database|testing|tiny|basic|forum|meetup|yet_|yet-|yet\\.|cento|dead|fluentd|editor|utilitie|run_|run-|run\\.|box_|box-|box\\.|bot_|bot-|bot\\.|making|sample|group|monitor|ajax|parallel|cassandra|ultimate|site|get_|get-|get\\.|gen_|gen-|gen\\.|gem_|gem-|gem\\.|extended|image|knife|asset|nested|zero|plugin|bracket|mule|mozilla|number|act_|act-|act\\.|map_|map-|map\\.|micro|debug|openshift|chart|expres|backend|task|source|translate|jbos|composer|sqlite|profile|mustache|mqtt|yeoman|have|builder|smart|like|oauth|school|guideline|captcha|filter|bitcoin|bridge|color|toolbox|discovery|new_|new-|new\\.|dashboard|when|setting|level|post|standard|port|platform|yui_|yui-|yui\\.|grunt|animation|haskell|icon|latex|cheat|lua_|lua-|lua\\.|gulp|case|author|without|simulator|wifi|directory|lisp|list|flat|adventure|story|storm|gpu_|gpu-|gpu\\.|store|caching|attention|solr|logger|demo|shortener|hadoop|finder|phone|pipeline|range|textmate|showcase|app_|app-|app\\.|idiomatic|edit|our_|our-|our\\.|out_|out-|out\\.|sentiment|linked|why_|why-|why\\.|local|cube|gmail|job_|job-|job\\.|rpc_|rpc-|rpc\\.|contest|tcp_|tcp-|tcp\\.|usage|buildout|weather|transfer|automated|sphinx|issue|sas_|sas-|sas\\.|parallax|jasmine|addon|machine|solution|dsl_|dsl-|dsl\\.|episode|menu|theme|best|adapter|debugger|chrome|tutorial|life|step|people|joomla|paypal|developer|solver|team|current|love|visual|date|data|canva|container|future|xml_|xml-|xml\\.|twig|nagio|spatial|original|sync|archived|refinery|science|mapping|gitlab|play|ext_|ext-|ext\\.|session|impact|set_|set-|set\\.|see_|see-|see\\.|migration|commit|community|shopify|what\'|cucumber|statamic|mysql|location|tower|line|code|amqp|hello|send|index|high|notebook|alloy|python|field|document|soap|edition|email|php_|php-|php\\.|command|transport|official|upload|study|secure|angularj|akka|scalable|package|request|con_|con-|con\\.|flexible|security|comment|module|flask|graph|flash|apache|change|window|space|lambda|sheet|bookmark|carousel|friend|objective|jekyll|bootstrap|first|article|gwt_|gwt-|gwt\\.|classic|media|websocket|touch|desktop|real|read|recorder|moved|storage|validator|add-on|pusher|scs_|scs-|scs\\.|inline|asp_|asp-|asp\\.|timeline|base|encoding|ffmpeg|kindle|tinymce|pretty|jpa_|jpa-|jpa\\.|used|user|required|webhook|download|resque|espresso|cloud|mongo|benchmark|pure|cakephp|modx|mode|reactive|fuel|written|flickr|mail|brunch|meteor|dynamic|neo_|neo-|neo\\.|new_|new-|new\\.|net_|net-|net\\.|typo|type|keyboard|erlang|adobe|logging|ckeditor|message|iso_|iso-|iso\\.|hook|ldap|folder|reference|railscast|www_|www-|www\\.|tracker|azure|fork|form|digital|exporter|skin|string|template|designer|gollum|fluent|entity|language|alfred|summary|wiki|kernel|calendar|plupload|symfony|foundry|remote|talk|search|dev_|dev-|dev\\.|del_|del-|del\\.|token|idea|sencha|selector|interface|create|fun_|fun-|fun\\.|groovy|query|grail|red_|red-|red\\.|laravel|monkey|slack|supported|instant|value|center|latest|work|but_|but-|but\\.|bug_|bug-|bug\\.|virtual|tweet|statsd|studio|path|real-time|frontend|notifier|coding|tool|firmware|flow|random|mediawiki|bosh|been|beer|lightbox|theory|origin|redmine|hub_|hub-|hub\\.|require|pro_|pro-|pro\\.|ant_|ant-|ant\\.|any_|any-|any\\.|recipe|closure|mapper|event|todo|model|redi|provider|rvm_|rvm-|rvm\\.|program|memcached|rail|silex|foreman|activity|license|strategy|batch|streaming|fast|use_|use-|use\\.|usb_|usb-|usb\\.|impres|academy|slider|please|layer|cros|now_|now-|now\\.|miner|extension|own_|own-|own\\.|app_|app-|app\\.|debian|symphony|example|feature|serie|tree|project|runner|entry|leetcode|layout|webrtc|logic|login|worker|toolkit|mocha|support|back|inside|device|jenkin|contact|fake|awesome|ocaml|bit_|bit-|bit\\.|drive|screen|prototype|gist|binary|nosql|rest|overview|dart|dark|emac|mongoid|solarized|homepage|emulator|commander|django|yandex|gradle|xcode|writer|crm_|crm-|crm\\.|jade|startup|error|using|format|name|spring|parser|scratch|magic|try_|try-|try\\.|rack|directive|challenge|slim|counter|element|chosen|doc_|doc-|doc\\.|meta|should|button|packet|stream|hardware|android|infinite|password|software|ghost|xamarin|spec|chef|interview|hubot|mvc_|mvc-|mvc\\.|exercise|leaflet|launcher|air_|air-|air\\.|photo|board|boxen|way_|way-|way\\.|computing|welcome|notepad|portfolio|cat_|cat-|cat\\.|can_|can-|can\\.|magento|yaml|domain|card|yii_|yii-|yii\\.|checker|browser|upgrade|only|progres|aura|ruby_|ruby-|ruby\\.|polymer|util|lite|hackathon|rule|log_|log-|log\\.|opengl|stanford|skeleton|history|inspector|help|soon|selenium|lab_|lab-|lab\\.|scheme|schema|look|ready|leveldb|docker|game|minimal|logstash|messaging|within|heroku|mongodb|kata|suite|picker|win_|win-|win\\.|wip_|wip-|wip\\.|panel|started|starter|front-end|detector|deploy|editing|based|admin|capture|spree|page|bundle|goal|rpg_|rpg-|rpg\\.|setup|side|mean|reader|cookbook|mini|modern|seed|dom_|dom-|dom\\.|doc_|doc-|doc\\.|dot_|dot-|dot\\.|syntax|sugar|loader|website|make|kit_|kit-|kit\\.|protocol|human|daemon|golang|manager|countdown|connector|swagger|map_|map-|map\\.|mac_|mac-|mac\\.|man_|man-|man\\.|orm_|orm-|orm\\.|org_|org-|org\\.|little|zsh_|zsh-|zsh\\.|shop|show|workshop|money|grid|server|octopres|svn_|svn-|svn\\.|ember|embed|general|file|important|dropbox|portable|public|docpad|fish|sbt_|sbt-|sbt\\.|done|para|network|common|readme|popup|simple|purpose|mirror|single|cordova|exchange|object|design|gateway|account|lamp|intellij|math|mit_|mit-|mit\\.|control|enhanced|emitter|multi|add_|add-|add\\.|about|socket|preview|vagrant|cli_|cli-|cli\\.|powerful|top_|top-|top\\.|radio|watch|fluid|amazon|report|couchbase|automatic|detection|sprite|pyramid|portal|advanced|plu_|plu-|plu\\.|runtime|git_|git-|git\\.|uri_|uri-|uri\\.|haml|node|sql_|sql-|sql\\.|cool|core|obsolete|handler|iphone|extractor|array|copy|nlp_|nlp-|nlp\\.|reveal|pop_|pop-|pop\\.|engine|parse|check|html|nest|all_|all-|all\\.|chinese|buildpack|what|tag_|tag-|tag\\.|proxy|style|cookie|feed|restful|compiler|creating|prelude|context|java|rspec|mock|backbone|light|spotify|flex|related|shell|which|clas|webapp|swift|ansible|unity|console|tumblr|export|campfire|conway\'|made|riak|hero|here|unix|unit|glas|smtp|how_|how-|how\\.|hot_|hot-|hot\\.|debug|release|diff|player|easy|right|old_|old-|old\\.|animate|time|push|explorer|course|training|nette|router|draft|structure|note|salt|where|spark|trello|power|method|social|via_|via-|via\\.|vim_|vim-|vim\\.|select|webkit|github|ftp_|ftp-|ftp\\.|creator|mongoose|led_|led-|led\\.|movie|currently|pdf_|pdf-|pdf\\.|load|markdown|phalcon|input|custom|atom|oracle|phonegap|ubuntu|great|rdf_|rdf-|rdf\\.|popcorn|firefox|zip_|zip-|zip\\.|cuda|dotfile|static|openwrt|viewer|powered|graphic|les_|les-|les\\.|doe_|doe-|doe\\.|maven|word|eclipse|lab_|lab-|lab\\.|hacking|steam|analytic|option|abstract|archive|reality|switcher|club|write|kafka|arduino|angular|online|title|don\'t|contao|notice|analyzer|learning|zend|external|staging|busines|tdd_|tdd-|tdd\\.|scanner|building|snippet|modular|bower|stm_|stm-|stm\\.|lib_|lib-|lib\\.|alpha|mobile|clean|linux|nginx|manifest|some|raspberry|gnome|ide_|ide-|ide\\.|block|statistic|info|drag|youtube|koan|facebook|paperclip|art_|art-|art\\.|quality|tab_|tab-|tab\\.|need|dojo|shield|computer|stat|state|twitter|utility|converter|hosting|devise|liferay|updated|force|tip_|tip-|tip\\.|behavior|active|call|answer|deck|better|principle|ches|bar_|bar-|bar\\.|reddit|three|haxe|just|plug-in|agile|manual|tetri|super|beta|parsing|doctrine|minecraft|useful|perl|sharing|agent|switch|view|dash|channel|repo|pebble|profiler|warning|cluster|running|markup|evented|mod_|mod-|mod\\.|share|csv_|csv-|csv\\.|response|good|house|connect|built|build|find|ipython|webgl|big_|big-|big\\.|google|scala|sdl_|sdl-|sdl\\.|sdk_|sdk-|sdk\\.|native|day_|day-|day\\.|puppet|text|routing|helper|linkedin|crawler|host|guard|merchant|poker|over|writing|free|classe|component|craft|nodej|phoenix|longer|quick|lazy|memory|clone|hacker|middleman|factory|motion|multiple|tornado|hack|ssh_|ssh-|ssh\\.|review|vimrc|driver|driven|blog|particle|table|intro|importer|thrift|xmpp|framework|refresh|react|font|librarie|variou|formatter|analysi|karma|scroll|tut_|tut-|tut\\.|apple|tag_|tag-|tag\\.|tab_|tab-|tab\\.|category|ionic|cache|homebrew|reverse|english|getting|shipping|clojure|boot|book|branch|combination|combo)) XFomq-zrApSx (?!(^0x0*|^pub)|.*\\.(bin|json|exe)$|.*(?i)(Client|Factory)$|(^__[A-Za-z]+__$)|^(12345|abcd)|^\\d+(\\.\\d+)?$) XFomq-zrApSx entropy (?i)(?:key|api|token|secret|client|passwd|password|auth|access)(?:[0-9a-z\\-_\\t.]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:=|\\|\\|:|<=|=>|:)(?:\'|@\\"|\\"|\\s|=|\\x60){0,5}(?!([a-z]+\\.[a-zA-Z]+)|.*(\\d{4}-\\d{2}-\\d{2})|:*(?!("|\'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)(?P<CONTENT>[0-9a-z\\-_.=\\~@]{10,150})(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$) (\\d\\.\\d\\.\\d-}|([\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3})|(\\w)\\1{5}|(?i)keywords|xxxx|eeeeeeee|0000|\\*\\*\\*|example|test|author=|author("|\')|preview|[A-Z]+_KEY|[.]value|[.]key|-\\d\\.\\d\\.) (\\w|\\.)\\1{5} .*((?i)omitted|arn:aws|(?i)(pub.*key|public.*key)|(?i)clientToken|symbol|cache|author\\.).*', PosixPath('attached_assets/Pasted-WebSocket-interceptor-instalado-vite-fix-js-22-Vite-WebSocket-interceptado-wss-35b03a2a-9847-4e3-1746559415820.txt'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = a3a05ac5ffdd700d3b5cede01926d460dc9f745e9d7f37b1ea9b7f382e187bb800a5a2aac93e8568ebbcb85797a7e9f66cbe9bf0bef48a2fca1e62f59d49fed8_0
2025-05-07 18:31:35,106 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/Pasted-WebSocket-interceptor-instalado-vite-fix-js-22-Vite-WebSocket-interceptado-wss-35b03a2a-9847-4e3-1746559622152.txt'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = 8c2f9e9ab854eaa72f3f402b45a44eebd3102956829210ac82b70c65c53d1a260e09345a44f171aa322df1e6d6af0b08a0cb1964121db7c06f1d0591615f1395_0
2025-05-07 18:31:35,107 - semgrep.rule_match - DEBUG - match_key = ('XFomq-zrApSx XFomq-zrApSx (?!(?i).*(client|endpoint|vpn|_ec2_|aws_|authorize|author|define|config|credential|setting|sample|xxxxxx|000000|buffer|delete|aaaaaa|fewfwef|getenv|env_|system|example|ecdsa|sha256|sha1|sha2|md5|alert|wizard|target|onboard|welcome|page|exploit|experiment|expire|rabbitmq|scraper|widget|music|dns_|dns-|yahoo|want|json|action|script|fix_|fix-|develop|compas|stripe|service|master|metric|tech|gitignore|rich|open|stack|irc_|irc-|sublime|kohana|has_|has-|fabric|wordpres|role|osx_|osx-|boost|addres|queue|working|sandbox|internet|print|vision|tracking|being|generator|traffic|world|pull|rust|watcher|small|auth|full|hash|more|install|auto|complete|learn|paper|installer|research|acces|last|binding|spine|into|chat|algorithm|resource|uploader|video|maker|next|proc|lock|robot|snake|patch|matrix|drill|terminal|term|stuff|genetic|generic|identity|audit|pattern|audio|web_|web-|crud|problem|statu|cms-|cms_|arch|coffee|workflow|changelog|another|uiview|content|kitchen|gnu_|gnu-|gnu\\.|conf|couchdb|client|opencv|rendering|update|concept|varnish|gui_|gui-|gui\\.|version|shared|extra|product|still|not_|not-|not\\.|drop|ring|png_|png-|png\\.|actively|import|output|backup|start|embedded|registry|pool|semantic|instagram|bash|system|ninja|drupal|jquery|polyfill|physic|league|guide|pack|synopsi|sketch|injection|svg_|svg-|svg\\.|friendly|wave|convert|manage|camera|link|slide|timer|wrapper|gallery|url_|url-|url\\.|todomvc|requirej|party|http|payment|async|library|home|coco|gaia|display|universal|func|metadata|hipchat|under|room|config|personal|realtime|resume|database|testing|tiny|basic|forum|meetup|yet_|yet-|yet\\.|cento|dead|fluentd|editor|utilitie|run_|run-|run\\.|box_|box-|box\\.|bot_|bot-|bot\\.|making|sample|group|monitor|ajax|parallel|cassandra|ultimate|site|get_|get-|get\\.|gen_|gen-|gen\\.|gem_|gem-|gem\\.|extended|image|knife|asset|nested|zero|plugin|bracket|mule|mozilla|number|act_|act-|act\\.|map_|map-|map\\.|micro|debug|openshift|chart|expres|backend|task|source|translate|jbos|composer|sqlite|profile|mustache|mqtt|yeoman|have|builder|smart|like|oauth|school|guideline|captcha|filter|bitcoin|bridge|color|toolbox|discovery|new_|new-|new\\.|dashboard|when|setting|level|post|standard|port|platform|yui_|yui-|yui\\.|grunt|animation|haskell|icon|latex|cheat|lua_|lua-|lua\\.|gulp|case|author|without|simulator|wifi|directory|lisp|list|flat|adventure|story|storm|gpu_|gpu-|gpu\\.|store|caching|attention|solr|logger|demo|shortener|hadoop|finder|phone|pipeline|range|textmate|showcase|app_|app-|app\\.|idiomatic|edit|our_|our-|our\\.|out_|out-|out\\.|sentiment|linked|why_|why-|why\\.|local|cube|gmail|job_|job-|job\\.|rpc_|rpc-|rpc\\.|contest|tcp_|tcp-|tcp\\.|usage|buildout|weather|transfer|automated|sphinx|issue|sas_|sas-|sas\\.|parallax|jasmine|addon|machine|solution|dsl_|dsl-|dsl\\.|episode|menu|theme|best|adapter|debugger|chrome|tutorial|life|step|people|joomla|paypal|developer|solver|team|current|love|visual|date|data|canva|container|future|xml_|xml-|xml\\.|twig|nagio|spatial|original|sync|archived|refinery|science|mapping|gitlab|play|ext_|ext-|ext\\.|session|impact|set_|set-|set\\.|see_|see-|see\\.|migration|commit|community|shopify|what\'|cucumber|statamic|mysql|location|tower|line|code|amqp|hello|send|index|high|notebook|alloy|python|field|document|soap|edition|email|php_|php-|php\\.|command|transport|official|upload|study|secure|angularj|akka|scalable|package|request|con_|con-|con\\.|flexible|security|comment|module|flask|graph|flash|apache|change|window|space|lambda|sheet|bookmark|carousel|friend|objective|jekyll|bootstrap|first|article|gwt_|gwt-|gwt\\.|classic|media|websocket|touch|desktop|real|read|recorder|moved|storage|validator|add-on|pusher|scs_|scs-|scs\\.|inline|asp_|asp-|asp\\.|timeline|base|encoding|ffmpeg|kindle|tinymce|pretty|jpa_|jpa-|jpa\\.|used|user|required|webhook|download|resque|espresso|cloud|mongo|benchmark|pure|cakephp|modx|mode|reactive|fuel|written|flickr|mail|brunch|meteor|dynamic|neo_|neo-|neo\\.|new_|new-|new\\.|net_|net-|net\\.|typo|type|keyboard|erlang|adobe|logging|ckeditor|message|iso_|iso-|iso\\.|hook|ldap|folder|reference|railscast|www_|www-|www\\.|tracker|azure|fork|form|digital|exporter|skin|string|template|designer|gollum|fluent|entity|language|alfred|summary|wiki|kernel|calendar|plupload|symfony|foundry|remote|talk|search|dev_|dev-|dev\\.|del_|del-|del\\.|token|idea|sencha|selector|interface|create|fun_|fun-|fun\\.|groovy|query|grail|red_|red-|red\\.|laravel|monkey|slack|supported|instant|value|center|latest|work|but_|but-|but\\.|bug_|bug-|bug\\.|virtual|tweet|statsd|studio|path|real-time|frontend|notifier|coding|tool|firmware|flow|random|mediawiki|bosh|been|beer|lightbox|theory|origin|redmine|hub_|hub-|hub\\.|require|pro_|pro-|pro\\.|ant_|ant-|ant\\.|any_|any-|any\\.|recipe|closure|mapper|event|todo|model|redi|provider|rvm_|rvm-|rvm\\.|program|memcached|rail|silex|foreman|activity|license|strategy|batch|streaming|fast|use_|use-|use\\.|usb_|usb-|usb\\.|impres|academy|slider|please|layer|cros|now_|now-|now\\.|miner|extension|own_|own-|own\\.|app_|app-|app\\.|debian|symphony|example|feature|serie|tree|project|runner|entry|leetcode|layout|webrtc|logic|login|worker|toolkit|mocha|support|back|inside|device|jenkin|contact|fake|awesome|ocaml|bit_|bit-|bit\\.|drive|screen|prototype|gist|binary|nosql|rest|overview|dart|dark|emac|mongoid|solarized|homepage|emulator|commander|django|yandex|gradle|xcode|writer|crm_|crm-|crm\\.|jade|startup|error|using|format|name|spring|parser|scratch|magic|try_|try-|try\\.|rack|directive|challenge|slim|counter|element|chosen|doc_|doc-|doc\\.|meta|should|button|packet|stream|hardware|android|infinite|password|software|ghost|xamarin|spec|chef|interview|hubot|mvc_|mvc-|mvc\\.|exercise|leaflet|launcher|air_|air-|air\\.|photo|board|boxen|way_|way-|way\\.|computing|welcome|notepad|portfolio|cat_|cat-|cat\\.|can_|can-|can\\.|magento|yaml|domain|card|yii_|yii-|yii\\.|checker|browser|upgrade|only|progres|aura|ruby_|ruby-|ruby\\.|polymer|util|lite|hackathon|rule|log_|log-|log\\.|opengl|stanford|skeleton|history|inspector|help|soon|selenium|lab_|lab-|lab\\.|scheme|schema|look|ready|leveldb|docker|game|minimal|logstash|messaging|within|heroku|mongodb|kata|suite|picker|win_|win-|win\\.|wip_|wip-|wip\\.|panel|started|starter|front-end|detector|deploy|editing|based|admin|capture|spree|page|bundle|goal|rpg_|rpg-|rpg\\.|setup|side|mean|reader|cookbook|mini|modern|seed|dom_|dom-|dom\\.|doc_|doc-|doc\\.|dot_|dot-|dot\\.|syntax|sugar|loader|website|make|kit_|kit-|kit\\.|protocol|human|daemon|golang|manager|countdown|connector|swagger|map_|map-|map\\.|mac_|mac-|mac\\.|man_|man-|man\\.|orm_|orm-|orm\\.|org_|org-|org\\.|little|zsh_|zsh-|zsh\\.|shop|show|workshop|money|grid|server|octopres|svn_|svn-|svn\\.|ember|embed|general|file|important|dropbox|portable|public|docpad|fish|sbt_|sbt-|sbt\\.|done|para|network|common|readme|popup|simple|purpose|mirror|single|cordova|exchange|object|design|gateway|account|lamp|intellij|math|mit_|mit-|mit\\.|control|enhanced|emitter|multi|add_|add-|add\\.|about|socket|preview|vagrant|cli_|cli-|cli\\.|powerful|top_|top-|top\\.|radio|watch|fluid|amazon|report|couchbase|automatic|detection|sprite|pyramid|portal|advanced|plu_|plu-|plu\\.|runtime|git_|git-|git\\.|uri_|uri-|uri\\.|haml|node|sql_|sql-|sql\\.|cool|core|obsolete|handler|iphone|extractor|array|copy|nlp_|nlp-|nlp\\.|reveal|pop_|pop-|pop\\.|engine|parse|check|html|nest|all_|all-|all\\.|chinese|buildpack|what|tag_|tag-|tag\\.|proxy|style|cookie|feed|restful|compiler|creating|prelude|context|java|rspec|mock|backbone|light|spotify|flex|related|shell|which|clas|webapp|swift|ansible|unity|console|tumblr|export|campfire|conway\'|made|riak|hero|here|unix|unit|glas|smtp|how_|how-|how\\.|hot_|hot-|hot\\.|debug|release|diff|player|easy|right|old_|old-|old\\.|animate|time|push|explorer|course|training|nette|router|draft|structure|note|salt|where|spark|trello|power|method|social|via_|via-|via\\.|vim_|vim-|vim\\.|select|webkit|github|ftp_|ftp-|ftp\\.|creator|mongoose|led_|led-|led\\.|movie|currently|pdf_|pdf-|pdf\\.|load|markdown|phalcon|input|custom|atom|oracle|phonegap|ubuntu|great|rdf_|rdf-|rdf\\.|popcorn|firefox|zip_|zip-|zip\\.|cuda|dotfile|static|openwrt|viewer|powered|graphic|les_|les-|les\\.|doe_|doe-|doe\\.|maven|word|eclipse|lab_|lab-|lab\\.|hacking|steam|analytic|option|abstract|archive|reality|switcher|club|write|kafka|arduino|angular|online|title|don\'t|contao|notice|analyzer|learning|zend|external|staging|busines|tdd_|tdd-|tdd\\.|scanner|building|snippet|modular|bower|stm_|stm-|stm\\.|lib_|lib-|lib\\.|alpha|mobile|clean|linux|nginx|manifest|some|raspberry|gnome|ide_|ide-|ide\\.|block|statistic|info|drag|youtube|koan|facebook|paperclip|art_|art-|art\\.|quality|tab_|tab-|tab\\.|need|dojo|shield|computer|stat|state|twitter|utility|converter|hosting|devise|liferay|updated|force|tip_|tip-|tip\\.|behavior|active|call|answer|deck|better|principle|ches|bar_|bar-|bar\\.|reddit|three|haxe|just|plug-in|agile|manual|tetri|super|beta|parsing|doctrine|minecraft|useful|perl|sharing|agent|switch|view|dash|channel|repo|pebble|profiler|warning|cluster|running|markup|evented|mod_|mod-|mod\\.|share|csv_|csv-|csv\\.|response|good|house|connect|built|build|find|ipython|webgl|big_|big-|big\\.|google|scala|sdl_|sdl-|sdl\\.|sdk_|sdk-|sdk\\.|native|day_|day-|day\\.|puppet|text|routing|helper|linkedin|crawler|host|guard|merchant|poker|over|writing|free|classe|component|craft|nodej|phoenix|longer|quick|lazy|memory|clone|hacker|middleman|factory|motion|multiple|tornado|hack|ssh_|ssh-|ssh\\.|review|vimrc|driver|driven|blog|particle|table|intro|importer|thrift|xmpp|framework|refresh|react|font|librarie|variou|formatter|analysi|karma|scroll|tut_|tut-|tut\\.|apple|tag_|tag-|tag\\.|tab_|tab-|tab\\.|category|ionic|cache|homebrew|reverse|english|getting|shipping|clojure|boot|book|branch|combination|combo)) XFomq-zrApSx (?!(^0x0*|^pub)|.*\\.(bin|json|exe)$|.*(?i)(Client|Factory)$|(^__[A-Za-z]+__$)|^(12345|abcd)|^\\d+(\\.\\d+)?$) XFomq-zrApSx entropy (?i)(?:key|api|token|secret|client|passwd|password|auth|access)(?:[0-9a-z\\-_\\t.]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:=|\\|\\|:|<=|=>|:)(?:\'|@\\"|\\"|\\s|=|\\x60){0,5}(?!([a-z]+\\.[a-zA-Z]+)|.*(\\d{4}-\\d{2}-\\d{2})|:*(?!("|\'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)(?P<CONTENT>[0-9a-z\\-_.=\\~@]{10,150})(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$) (\\d\\.\\d\\.\\d-}|([\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3})|(\\w)\\1{5}|(?i)keywords|xxxx|eeeeeeee|0000|\\*\\*\\*|example|test|author=|author("|\')|preview|[A-Z]+_KEY|[.]value|[.]key|-\\d\\.\\d\\.) (\\w|\\.)\\1{5} .*((?i)omitted|arn:aws|(?i)(pub.*key|public.*key)|(?i)clientToken|symbol|cache|author\\.).*', PosixPath('attached_assets/Pasted-WebSocket-interceptor-instalado-vite-fix-js-22-Vite-WebSocket-interceptado-wss-35b03a2a-9847-4e3-1746559622152.txt'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = b3540e497ce2a223534620db7e4bfe963cb664d0730050c624037cb32c8fb7bc0250b7b215ae0bea0d14f0755b3b964f200b590c9df0e58e27cf1d51c4498bf5_0
2025-05-07 18:31:35,107 - semgrep.rule_match - DEBUG - match_key = ('XFomq-zrApSx XFomq-zrApSx (?!(?i).*(client|endpoint|vpn|_ec2_|aws_|authorize|author|define|config|credential|setting|sample|xxxxxx|000000|buffer|delete|aaaaaa|fewfwef|getenv|env_|system|example|ecdsa|sha256|sha1|sha2|md5|alert|wizard|target|onboard|welcome|page|exploit|experiment|expire|rabbitmq|scraper|widget|music|dns_|dns-|yahoo|want|json|action|script|fix_|fix-|develop|compas|stripe|service|master|metric|tech|gitignore|rich|open|stack|irc_|irc-|sublime|kohana|has_|has-|fabric|wordpres|role|osx_|osx-|boost|addres|queue|working|sandbox|internet|print|vision|tracking|being|generator|traffic|world|pull|rust|watcher|small|auth|full|hash|more|install|auto|complete|learn|paper|installer|research|acces|last|binding|spine|into|chat|algorithm|resource|uploader|video|maker|next|proc|lock|robot|snake|patch|matrix|drill|terminal|term|stuff|genetic|generic|identity|audit|pattern|audio|web_|web-|crud|problem|statu|cms-|cms_|arch|coffee|workflow|changelog|another|uiview|content|kitchen|gnu_|gnu-|gnu\\.|conf|couchdb|client|opencv|rendering|update|concept|varnish|gui_|gui-|gui\\.|version|shared|extra|product|still|not_|not-|not\\.|drop|ring|png_|png-|png\\.|actively|import|output|backup|start|embedded|registry|pool|semantic|instagram|bash|system|ninja|drupal|jquery|polyfill|physic|league|guide|pack|synopsi|sketch|injection|svg_|svg-|svg\\.|friendly|wave|convert|manage|camera|link|slide|timer|wrapper|gallery|url_|url-|url\\.|todomvc|requirej|party|http|payment|async|library|home|coco|gaia|display|universal|func|metadata|hipchat|under|room|config|personal|realtime|resume|database|testing|tiny|basic|forum|meetup|yet_|yet-|yet\\.|cento|dead|fluentd|editor|utilitie|run_|run-|run\\.|box_|box-|box\\.|bot_|bot-|bot\\.|making|sample|group|monitor|ajax|parallel|cassandra|ultimate|site|get_|get-|get\\.|gen_|gen-|gen\\.|gem_|gem-|gem\\.|extended|image|knife|asset|nested|zero|plugin|bracket|mule|mozilla|number|act_|act-|act\\.|map_|map-|map\\.|micro|debug|openshift|chart|expres|backend|task|source|translate|jbos|composer|sqlite|profile|mustache|mqtt|yeoman|have|builder|smart|like|oauth|school|guideline|captcha|filter|bitcoin|bridge|color|toolbox|discovery|new_|new-|new\\.|dashboard|when|setting|level|post|standard|port|platform|yui_|yui-|yui\\.|grunt|animation|haskell|icon|latex|cheat|lua_|lua-|lua\\.|gulp|case|author|without|simulator|wifi|directory|lisp|list|flat|adventure|story|storm|gpu_|gpu-|gpu\\.|store|caching|attention|solr|logger|demo|shortener|hadoop|finder|phone|pipeline|range|textmate|showcase|app_|app-|app\\.|idiomatic|edit|our_|our-|our\\.|out_|out-|out\\.|sentiment|linked|why_|why-|why\\.|local|cube|gmail|job_|job-|job\\.|rpc_|rpc-|rpc\\.|contest|tcp_|tcp-|tcp\\.|usage|buildout|weather|transfer|automated|sphinx|issue|sas_|sas-|sas\\.|parallax|jasmine|addon|machine|solution|dsl_|dsl-|dsl\\.|episode|menu|theme|best|adapter|debugger|chrome|tutorial|life|step|people|joomla|paypal|developer|solver|team|current|love|visual|date|data|canva|container|future|xml_|xml-|xml\\.|twig|nagio|spatial|original|sync|archived|refinery|science|mapping|gitlab|play|ext_|ext-|ext\\.|session|impact|set_|set-|set\\.|see_|see-|see\\.|migration|commit|community|shopify|what\'|cucumber|statamic|mysql|location|tower|line|code|amqp|hello|send|index|high|notebook|alloy|python|field|document|soap|edition|email|php_|php-|php\\.|command|transport|official|upload|study|secure|angularj|akka|scalable|package|request|con_|con-|con\\.|flexible|security|comment|module|flask|graph|flash|apache|change|window|space|lambda|sheet|bookmark|carousel|friend|objective|jekyll|bootstrap|first|article|gwt_|gwt-|gwt\\.|classic|media|websocket|touch|desktop|real|read|recorder|moved|storage|validator|add-on|pusher|scs_|scs-|scs\\.|inline|asp_|asp-|asp\\.|timeline|base|encoding|ffmpeg|kindle|tinymce|pretty|jpa_|jpa-|jpa\\.|used|user|required|webhook|download|resque|espresso|cloud|mongo|benchmark|pure|cakephp|modx|mode|reactive|fuel|written|flickr|mail|brunch|meteor|dynamic|neo_|neo-|neo\\.|new_|new-|new\\.|net_|net-|net\\.|typo|type|keyboard|erlang|adobe|logging|ckeditor|message|iso_|iso-|iso\\.|hook|ldap|folder|reference|railscast|www_|www-|www\\.|tracker|azure|fork|form|digital|exporter|skin|string|template|designer|gollum|fluent|entity|language|alfred|summary|wiki|kernel|calendar|plupload|symfony|foundry|remote|talk|search|dev_|dev-|dev\\.|del_|del-|del\\.|token|idea|sencha|selector|interface|create|fun_|fun-|fun\\.|groovy|query|grail|red_|red-|red\\.|laravel|monkey|slack|supported|instant|value|center|latest|work|but_|but-|but\\.|bug_|bug-|bug\\.|virtual|tweet|statsd|studio|path|real-time|frontend|notifier|coding|tool|firmware|flow|random|mediawiki|bosh|been|beer|lightbox|theory|origin|redmine|hub_|hub-|hub\\.|require|pro_|pro-|pro\\.|ant_|ant-|ant\\.|any_|any-|any\\.|recipe|closure|mapper|event|todo|model|redi|provider|rvm_|rvm-|rvm\\.|program|memcached|rail|silex|foreman|activity|license|strategy|batch|streaming|fast|use_|use-|use\\.|usb_|usb-|usb\\.|impres|academy|slider|please|layer|cros|now_|now-|now\\.|miner|extension|own_|own-|own\\.|app_|app-|app\\.|debian|symphony|example|feature|serie|tree|project|runner|entry|leetcode|layout|webrtc|logic|login|worker|toolkit|mocha|support|back|inside|device|jenkin|contact|fake|awesome|ocaml|bit_|bit-|bit\\.|drive|screen|prototype|gist|binary|nosql|rest|overview|dart|dark|emac|mongoid|solarized|homepage|emulator|commander|django|yandex|gradle|xcode|writer|crm_|crm-|crm\\.|jade|startup|error|using|format|name|spring|parser|scratch|magic|try_|try-|try\\.|rack|directive|challenge|slim|counter|element|chosen|doc_|doc-|doc\\.|meta|should|button|packet|stream|hardware|android|infinite|password|software|ghost|xamarin|spec|chef|interview|hubot|mvc_|mvc-|mvc\\.|exercise|leaflet|launcher|air_|air-|air\\.|photo|board|boxen|way_|way-|way\\.|computing|welcome|notepad|portfolio|cat_|cat-|cat\\.|can_|can-|can\\.|magento|yaml|domain|card|yii_|yii-|yii\\.|checker|browser|upgrade|only|progres|aura|ruby_|ruby-|ruby\\.|polymer|util|lite|hackathon|rule|log_|log-|log\\.|opengl|stanford|skeleton|history|inspector|help|soon|selenium|lab_|lab-|lab\\.|scheme|schema|look|ready|leveldb|docker|game|minimal|logstash|messaging|within|heroku|mongodb|kata|suite|picker|win_|win-|win\\.|wip_|wip-|wip\\.|panel|started|starter|front-end|detector|deploy|editing|based|admin|capture|spree|page|bundle|goal|rpg_|rpg-|rpg\\.|setup|side|mean|reader|cookbook|mini|modern|seed|dom_|dom-|dom\\.|doc_|doc-|doc\\.|dot_|dot-|dot\\.|syntax|sugar|loader|website|make|kit_|kit-|kit\\.|protocol|human|daemon|golang|manager|countdown|connector|swagger|map_|map-|map\\.|mac_|mac-|mac\\.|man_|man-|man\\.|orm_|orm-|orm\\.|org_|org-|org\\.|little|zsh_|zsh-|zsh\\.|shop|show|workshop|money|grid|server|octopres|svn_|svn-|svn\\.|ember|embed|general|file|important|dropbox|portable|public|docpad|fish|sbt_|sbt-|sbt\\.|done|para|network|common|readme|popup|simple|purpose|mirror|single|cordova|exchange|object|design|gateway|account|lamp|intellij|math|mit_|mit-|mit\\.|control|enhanced|emitter|multi|add_|add-|add\\.|about|socket|preview|vagrant|cli_|cli-|cli\\.|powerful|top_|top-|top\\.|radio|watch|fluid|amazon|report|couchbase|automatic|detection|sprite|pyramid|portal|advanced|plu_|plu-|plu\\.|runtime|git_|git-|git\\.|uri_|uri-|uri\\.|haml|node|sql_|sql-|sql\\.|cool|core|obsolete|handler|iphone|extractor|array|copy|nlp_|nlp-|nlp\\.|reveal|pop_|pop-|pop\\.|engine|parse|check|html|nest|all_|all-|all\\.|chinese|buildpack|what|tag_|tag-|tag\\.|proxy|style|cookie|feed|restful|compiler|creating|prelude|context|java|rspec|mock|backbone|light|spotify|flex|related|shell|which|clas|webapp|swift|ansible|unity|console|tumblr|export|campfire|conway\'|made|riak|hero|here|unix|unit|glas|smtp|how_|how-|how\\.|hot_|hot-|hot\\.|debug|release|diff|player|easy|right|old_|old-|old\\.|animate|time|push|explorer|course|training|nette|router|draft|structure|note|salt|where|spark|trello|power|method|social|via_|via-|via\\.|vim_|vim-|vim\\.|select|webkit|github|ftp_|ftp-|ftp\\.|creator|mongoose|led_|led-|led\\.|movie|currently|pdf_|pdf-|pdf\\.|load|markdown|phalcon|input|custom|atom|oracle|phonegap|ubuntu|great|rdf_|rdf-|rdf\\.|popcorn|firefox|zip_|zip-|zip\\.|cuda|dotfile|static|openwrt|viewer|powered|graphic|les_|les-|les\\.|doe_|doe-|doe\\.|maven|word|eclipse|lab_|lab-|lab\\.|hacking|steam|analytic|option|abstract|archive|reality|switcher|club|write|kafka|arduino|angular|online|title|don\'t|contao|notice|analyzer|learning|zend|external|staging|busines|tdd_|tdd-|tdd\\.|scanner|building|snippet|modular|bower|stm_|stm-|stm\\.|lib_|lib-|lib\\.|alpha|mobile|clean|linux|nginx|manifest|some|raspberry|gnome|ide_|ide-|ide\\.|block|statistic|info|drag|youtube|koan|facebook|paperclip|art_|art-|art\\.|quality|tab_|tab-|tab\\.|need|dojo|shield|computer|stat|state|twitter|utility|converter|hosting|devise|liferay|updated|force|tip_|tip-|tip\\.|behavior|active|call|answer|deck|better|principle|ches|bar_|bar-|bar\\.|reddit|three|haxe|just|plug-in|agile|manual|tetri|super|beta|parsing|doctrine|minecraft|useful|perl|sharing|agent|switch|view|dash|channel|repo|pebble|profiler|warning|cluster|running|markup|evented|mod_|mod-|mod\\.|share|csv_|csv-|csv\\.|response|good|house|connect|built|build|find|ipython|webgl|big_|big-|big\\.|google|scala|sdl_|sdl-|sdl\\.|sdk_|sdk-|sdk\\.|native|day_|day-|day\\.|puppet|text|routing|helper|linkedin|crawler|host|guard|merchant|poker|over|writing|free|classe|component|craft|nodej|phoenix|longer|quick|lazy|memory|clone|hacker|middleman|factory|motion|multiple|tornado|hack|ssh_|ssh-|ssh\\.|review|vimrc|driver|driven|blog|particle|table|intro|importer|thrift|xmpp|framework|refresh|react|font|librarie|variou|formatter|analysi|karma|scroll|tut_|tut-|tut\\.|apple|tag_|tag-|tag\\.|tab_|tab-|tab\\.|category|ionic|cache|homebrew|reverse|english|getting|shipping|clojure|boot|book|branch|combination|combo)) XFomq-zrApSx (?!(^0x0*|^pub)|.*\\.(bin|json|exe)$|.*(?i)(Client|Factory)$|(^__[A-Za-z]+__$)|^(12345|abcd)|^\\d+(\\.\\d+)?$) XFomq-zrApSx entropy (?i)(?:key|api|token|secret|client|passwd|password|auth|access)(?:[0-9a-z\\-_\\t.]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:=|\\|\\|:|<=|=>|:)(?:\'|@\\"|\\"|\\s|=|\\x60){0,5}(?!([a-z]+\\.[a-zA-Z]+)|.*(\\d{4}-\\d{2}-\\d{2})|:*(?!("|\'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)(?P<CONTENT>[0-9a-z\\-_.=\\~@]{10,150})(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$) (\\d\\.\\d\\.\\d-}|([\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3})|(\\w)\\1{5}|(?i)keywords|xxxx|eeeeeeee|0000|\\*\\*\\*|example|test|author=|author("|\')|preview|[A-Z]+_KEY|[.]value|[.]key|-\\d\\.\\d\\.) (\\w|\\.)\\1{5} .*((?i)omitted|arn:aws|(?i)(pub.*key|public.*key)|(?i)clientToken|symbol|cache|author\\.).*', PosixPath('attached_assets/Pasted-WebSocket-interceptor-instalado-vite-fix-js-22-Vite-WebSocket-interceptado-wss-35b03a2a-9847-4e3-1746559622152.txt'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = b3540e497ce2a223534620db7e4bfe963cb664d0730050c624037cb32c8fb7bc0250b7b215ae0bea0d14f0755b3b964f200b590c9df0e58e27cf1d51c4498bf5_0
2025-05-07 18:31:35,108 - semgrep.rule_match - DEBUG - match_key = ('XFomq-zrApSx XFomq-zrApSx (?!(?i).*(client|endpoint|vpn|_ec2_|aws_|authorize|author|define|config|credential|setting|sample|xxxxxx|000000|buffer|delete|aaaaaa|fewfwef|getenv|env_|system|example|ecdsa|sha256|sha1|sha2|md5|alert|wizard|target|onboard|welcome|page|exploit|experiment|expire|rabbitmq|scraper|widget|music|dns_|dns-|yahoo|want|json|action|script|fix_|fix-|develop|compas|stripe|service|master|metric|tech|gitignore|rich|open|stack|irc_|irc-|sublime|kohana|has_|has-|fabric|wordpres|role|osx_|osx-|boost|addres|queue|working|sandbox|internet|print|vision|tracking|being|generator|traffic|world|pull|rust|watcher|small|auth|full|hash|more|install|auto|complete|learn|paper|installer|research|acces|last|binding|spine|into|chat|algorithm|resource|uploader|video|maker|next|proc|lock|robot|snake|patch|matrix|drill|terminal|term|stuff|genetic|generic|identity|audit|pattern|audio|web_|web-|crud|problem|statu|cms-|cms_|arch|coffee|workflow|changelog|another|uiview|content|kitchen|gnu_|gnu-|gnu\\.|conf|couchdb|client|opencv|rendering|update|concept|varnish|gui_|gui-|gui\\.|version|shared|extra|product|still|not_|not-|not\\.|drop|ring|png_|png-|png\\.|actively|import|output|backup|start|embedded|registry|pool|semantic|instagram|bash|system|ninja|drupal|jquery|polyfill|physic|league|guide|pack|synopsi|sketch|injection|svg_|svg-|svg\\.|friendly|wave|convert|manage|camera|link|slide|timer|wrapper|gallery|url_|url-|url\\.|todomvc|requirej|party|http|payment|async|library|home|coco|gaia|display|universal|func|metadata|hipchat|under|room|config|personal|realtime|resume|database|testing|tiny|basic|forum|meetup|yet_|yet-|yet\\.|cento|dead|fluentd|editor|utilitie|run_|run-|run\\.|box_|box-|box\\.|bot_|bot-|bot\\.|making|sample|group|monitor|ajax|parallel|cassandra|ultimate|site|get_|get-|get\\.|gen_|gen-|gen\\.|gem_|gem-|gem\\.|extended|image|knife|asset|nested|zero|plugin|bracket|mule|mozilla|number|act_|act-|act\\.|map_|map-|map\\.|micro|debug|openshift|chart|expres|backend|task|source|translate|jbos|composer|sqlite|profile|mustache|mqtt|yeoman|have|builder|smart|like|oauth|school|guideline|captcha|filter|bitcoin|bridge|color|toolbox|discovery|new_|new-|new\\.|dashboard|when|setting|level|post|standard|port|platform|yui_|yui-|yui\\.|grunt|animation|haskell|icon|latex|cheat|lua_|lua-|lua\\.|gulp|case|author|without|simulator|wifi|directory|lisp|list|flat|adventure|story|storm|gpu_|gpu-|gpu\\.|store|caching|attention|solr|logger|demo|shortener|hadoop|finder|phone|pipeline|range|textmate|showcase|app_|app-|app\\.|idiomatic|edit|our_|our-|our\\.|out_|out-|out\\.|sentiment|linked|why_|why-|why\\.|local|cube|gmail|job_|job-|job\\.|rpc_|rpc-|rpc\\.|contest|tcp_|tcp-|tcp\\.|usage|buildout|weather|transfer|automated|sphinx|issue|sas_|sas-|sas\\.|parallax|jasmine|addon|machine|solution|dsl_|dsl-|dsl\\.|episode|menu|theme|best|adapter|debugger|chrome|tutorial|life|step|people|joomla|paypal|developer|solver|team|current|love|visual|date|data|canva|container|future|xml_|xml-|xml\\.|twig|nagio|spatial|original|sync|archived|refinery|science|mapping|gitlab|play|ext_|ext-|ext\\.|session|impact|set_|set-|set\\.|see_|see-|see\\.|migration|commit|community|shopify|what\'|cucumber|statamic|mysql|location|tower|line|code|amqp|hello|send|index|high|notebook|alloy|python|field|document|soap|edition|email|php_|php-|php\\.|command|transport|official|upload|study|secure|angularj|akka|scalable|package|request|con_|con-|con\\.|flexible|security|comment|module|flask|graph|flash|apache|change|window|space|lambda|sheet|bookmark|carousel|friend|objective|jekyll|bootstrap|first|article|gwt_|gwt-|gwt\\.|classic|media|websocket|touch|desktop|real|read|recorder|moved|storage|validator|add-on|pusher|scs_|scs-|scs\\.|inline|asp_|asp-|asp\\.|timeline|base|encoding|ffmpeg|kindle|tinymce|pretty|jpa_|jpa-|jpa\\.|used|user|required|webhook|download|resque|espresso|cloud|mongo|benchmark|pure|cakephp|modx|mode|reactive|fuel|written|flickr|mail|brunch|meteor|dynamic|neo_|neo-|neo\\.|new_|new-|new\\.|net_|net-|net\\.|typo|type|keyboard|erlang|adobe|logging|ckeditor|message|iso_|iso-|iso\\.|hook|ldap|folder|reference|railscast|www_|www-|www\\.|tracker|azure|fork|form|digital|exporter|skin|string|template|designer|gollum|fluent|entity|language|alfred|summary|wiki|kernel|calendar|plupload|symfony|foundry|remote|talk|search|dev_|dev-|dev\\.|del_|del-|del\\.|token|idea|sencha|selector|interface|create|fun_|fun-|fun\\.|groovy|query|grail|red_|red-|red\\.|laravel|monkey|slack|supported|instant|value|center|latest|work|but_|but-|but\\.|bug_|bug-|bug\\.|virtual|tweet|statsd|studio|path|real-time|frontend|notifier|coding|tool|firmware|flow|random|mediawiki|bosh|been|beer|lightbox|theory|origin|redmine|hub_|hub-|hub\\.|require|pro_|pro-|pro\\.|ant_|ant-|ant\\.|any_|any-|any\\.|recipe|closure|mapper|event|todo|model|redi|provider|rvm_|rvm-|rvm\\.|program|memcached|rail|silex|foreman|activity|license|strategy|batch|streaming|fast|use_|use-|use\\.|usb_|usb-|usb\\.|impres|academy|slider|please|layer|cros|now_|now-|now\\.|miner|extension|own_|own-|own\\.|app_|app-|app\\.|debian|symphony|example|feature|serie|tree|project|runner|entry|leetcode|layout|webrtc|logic|login|worker|toolkit|mocha|support|back|inside|device|jenkin|contact|fake|awesome|ocaml|bit_|bit-|bit\\.|drive|screen|prototype|gist|binary|nosql|rest|overview|dart|dark|emac|mongoid|solarized|homepage|emulator|commander|django|yandex|gradle|xcode|writer|crm_|crm-|crm\\.|jade|startup|error|using|format|name|spring|parser|scratch|magic|try_|try-|try\\.|rack|directive|challenge|slim|counter|element|chosen|doc_|doc-|doc\\.|meta|should|button|packet|stream|hardware|android|infinite|password|software|ghost|xamarin|spec|chef|interview|hubot|mvc_|mvc-|mvc\\.|exercise|leaflet|launcher|air_|air-|air\\.|photo|board|boxen|way_|way-|way\\.|computing|welcome|notepad|portfolio|cat_|cat-|cat\\.|can_|can-|can\\.|magento|yaml|domain|card|yii_|yii-|yii\\.|checker|browser|upgrade|only|progres|aura|ruby_|ruby-|ruby\\.|polymer|util|lite|hackathon|rule|log_|log-|log\\.|opengl|stanford|skeleton|history|inspector|help|soon|selenium|lab_|lab-|lab\\.|scheme|schema|look|ready|leveldb|docker|game|minimal|logstash|messaging|within|heroku|mongodb|kata|suite|picker|win_|win-|win\\.|wip_|wip-|wip\\.|panel|started|starter|front-end|detector|deploy|editing|based|admin|capture|spree|page|bundle|goal|rpg_|rpg-|rpg\\.|setup|side|mean|reader|cookbook|mini|modern|seed|dom_|dom-|dom\\.|doc_|doc-|doc\\.|dot_|dot-|dot\\.|syntax|sugar|loader|website|make|kit_|kit-|kit\\.|protocol|human|daemon|golang|manager|countdown|connector|swagger|map_|map-|map\\.|mac_|mac-|mac\\.|man_|man-|man\\.|orm_|orm-|orm\\.|org_|org-|org\\.|little|zsh_|zsh-|zsh\\.|shop|show|workshop|money|grid|server|octopres|svn_|svn-|svn\\.|ember|embed|general|file|important|dropbox|portable|public|docpad|fish|sbt_|sbt-|sbt\\.|done|para|network|common|readme|popup|simple|purpose|mirror|single|cordova|exchange|object|design|gateway|account|lamp|intellij|math|mit_|mit-|mit\\.|control|enhanced|emitter|multi|add_|add-|add\\.|about|socket|preview|vagrant|cli_|cli-|cli\\.|powerful|top_|top-|top\\.|radio|watch|fluid|amazon|report|couchbase|automatic|detection|sprite|pyramid|portal|advanced|plu_|plu-|plu\\.|runtime|git_|git-|git\\.|uri_|uri-|uri\\.|haml|node|sql_|sql-|sql\\.|cool|core|obsolete|handler|iphone|extractor|array|copy|nlp_|nlp-|nlp\\.|reveal|pop_|pop-|pop\\.|engine|parse|check|html|nest|all_|all-|all\\.|chinese|buildpack|what|tag_|tag-|tag\\.|proxy|style|cookie|feed|restful|compiler|creating|prelude|context|java|rspec|mock|backbone|light|spotify|flex|related|shell|which|clas|webapp|swift|ansible|unity|console|tumblr|export|campfire|conway\'|made|riak|hero|here|unix|unit|glas|smtp|how_|how-|how\\.|hot_|hot-|hot\\.|debug|release|diff|player|easy|right|old_|old-|old\\.|animate|time|push|explorer|course|training|nette|router|draft|structure|note|salt|where|spark|trello|power|method|social|via_|via-|via\\.|vim_|vim-|vim\\.|select|webkit|github|ftp_|ftp-|ftp\\.|creator|mongoose|led_|led-|led\\.|movie|currently|pdf_|pdf-|pdf\\.|load|markdown|phalcon|input|custom|atom|oracle|phonegap|ubuntu|great|rdf_|rdf-|rdf\\.|popcorn|firefox|zip_|zip-|zip\\.|cuda|dotfile|static|openwrt|viewer|powered|graphic|les_|les-|les\\.|doe_|doe-|doe\\.|maven|word|eclipse|lab_|lab-|lab\\.|hacking|steam|analytic|option|abstract|archive|reality|switcher|club|write|kafka|arduino|angular|online|title|don\'t|contao|notice|analyzer|learning|zend|external|staging|busines|tdd_|tdd-|tdd\\.|scanner|building|snippet|modular|bower|stm_|stm-|stm\\.|lib_|lib-|lib\\.|alpha|mobile|clean|linux|nginx|manifest|some|raspberry|gnome|ide_|ide-|ide\\.|block|statistic|info|drag|youtube|koan|facebook|paperclip|art_|art-|art\\.|quality|tab_|tab-|tab\\.|need|dojo|shield|computer|stat|state|twitter|utility|converter|hosting|devise|liferay|updated|force|tip_|tip-|tip\\.|behavior|active|call|answer|deck|better|principle|ches|bar_|bar-|bar\\.|reddit|three|haxe|just|plug-in|agile|manual|tetri|super|beta|parsing|doctrine|minecraft|useful|perl|sharing|agent|switch|view|dash|channel|repo|pebble|profiler|warning|cluster|running|markup|evented|mod_|mod-|mod\\.|share|csv_|csv-|csv\\.|response|good|house|connect|built|build|find|ipython|webgl|big_|big-|big\\.|google|scala|sdl_|sdl-|sdl\\.|sdk_|sdk-|sdk\\.|native|day_|day-|day\\.|puppet|text|routing|helper|linkedin|crawler|host|guard|merchant|poker|over|writing|free|classe|component|craft|nodej|phoenix|longer|quick|lazy|memory|clone|hacker|middleman|factory|motion|multiple|tornado|hack|ssh_|ssh-|ssh\\.|review|vimrc|driver|driven|blog|particle|table|intro|importer|thrift|xmpp|framework|refresh|react|font|librarie|variou|formatter|analysi|karma|scroll|tut_|tut-|tut\\.|apple|tag_|tag-|tag\\.|tab_|tab-|tab\\.|category|ionic|cache|homebrew|reverse|english|getting|shipping|clojure|boot|book|branch|combination|combo)) XFomq-zrApSx (?!(^0x0*|^pub)|.*\\.(bin|json|exe)$|.*(?i)(Client|Factory)$|(^__[A-Za-z]+__$)|^(12345|abcd)|^\\d+(\\.\\d+)?$) XFomq-zrApSx entropy (?i)(?:key|api|token|secret|client|passwd|password|auth|access)(?:[0-9a-z\\-_\\t.]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:=|\\|\\|:|<=|=>|:)(?:\'|@\\"|\\"|\\s|=|\\x60){0,5}(?!([a-z]+\\.[a-zA-Z]+)|.*(\\d{4}-\\d{2}-\\d{2})|:*(?!("|\'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)(?P<CONTENT>[0-9a-z\\-_.=\\~@]{10,150})(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$) (\\d\\.\\d\\.\\d-}|([\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3})|(\\w)\\1{5}|(?i)keywords|xxxx|eeeeeeee|0000|\\*\\*\\*|example|test|author=|author("|\')|preview|[A-Z]+_KEY|[.]value|[.]key|-\\d\\.\\d\\.) (\\w|\\.)\\1{5} .*((?i)omitted|arn:aws|(?i)(pub.*key|public.*key)|(?i)clientToken|symbol|cache|author\\.).*', PosixPath('attached_assets/Pasted-WebSocket-interceptor-instalado-vite-fix-js-22-Vite-WebSocket-interceptado-wss-35b03a2a-9847-4e3-1746559622152.txt'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = b3540e497ce2a223534620db7e4bfe963cb664d0730050c624037cb32c8fb7bc0250b7b215ae0bea0d14f0755b3b964f200b590c9df0e58e27cf1d51c4498bf5_0
2025-05-07 18:31:35,108 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/Pasted-WebSocket-interceptor-instalado-vite-fix-js-22-Vite-WebSocket-interceptado-wss-35b03a2a-9847-4e3-1746559710715.txt'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = b212bf4273ed14d9e0e7d70f978d42928f5c619fb32fbe7ade7bd4ab558612f6064a54ea08f6e4b4cdc93fd473c77ed2b47259e383af7ab7cd48b2336aebd50a_0
2025-05-07 18:31:35,109 - semgrep.rule_match - DEBUG - match_key = ('XFomq-zrApSx XFomq-zrApSx (?!(?i).*(client|endpoint|vpn|_ec2_|aws_|authorize|author|define|config|credential|setting|sample|xxxxxx|000000|buffer|delete|aaaaaa|fewfwef|getenv|env_|system|example|ecdsa|sha256|sha1|sha2|md5|alert|wizard|target|onboard|welcome|page|exploit|experiment|expire|rabbitmq|scraper|widget|music|dns_|dns-|yahoo|want|json|action|script|fix_|fix-|develop|compas|stripe|service|master|metric|tech|gitignore|rich|open|stack|irc_|irc-|sublime|kohana|has_|has-|fabric|wordpres|role|osx_|osx-|boost|addres|queue|working|sandbox|internet|print|vision|tracking|being|generator|traffic|world|pull|rust|watcher|small|auth|full|hash|more|install|auto|complete|learn|paper|installer|research|acces|last|binding|spine|into|chat|algorithm|resource|uploader|video|maker|next|proc|lock|robot|snake|patch|matrix|drill|terminal|term|stuff|genetic|generic|identity|audit|pattern|audio|web_|web-|crud|problem|statu|cms-|cms_|arch|coffee|workflow|changelog|another|uiview|content|kitchen|gnu_|gnu-|gnu\\.|conf|couchdb|client|opencv|rendering|update|concept|varnish|gui_|gui-|gui\\.|version|shared|extra|product|still|not_|not-|not\\.|drop|ring|png_|png-|png\\.|actively|import|output|backup|start|embedded|registry|pool|semantic|instagram|bash|system|ninja|drupal|jquery|polyfill|physic|league|guide|pack|synopsi|sketch|injection|svg_|svg-|svg\\.|friendly|wave|convert|manage|camera|link|slide|timer|wrapper|gallery|url_|url-|url\\.|todomvc|requirej|party|http|payment|async|library|home|coco|gaia|display|universal|func|metadata|hipchat|under|room|config|personal|realtime|resume|database|testing|tiny|basic|forum|meetup|yet_|yet-|yet\\.|cento|dead|fluentd|editor|utilitie|run_|run-|run\\.|box_|box-|box\\.|bot_|bot-|bot\\.|making|sample|group|monitor|ajax|parallel|cassandra|ultimate|site|get_|get-|get\\.|gen_|gen-|gen\\.|gem_|gem-|gem\\.|extended|image|knife|asset|nested|zero|plugin|bracket|mule|mozilla|number|act_|act-|act\\.|map_|map-|map\\.|micro|debug|openshift|chart|expres|backend|task|source|translate|jbos|composer|sqlite|profile|mustache|mqtt|yeoman|have|builder|smart|like|oauth|school|guideline|captcha|filter|bitcoin|bridge|color|toolbox|discovery|new_|new-|new\\.|dashboard|when|setting|level|post|standard|port|platform|yui_|yui-|yui\\.|grunt|animation|haskell|icon|latex|cheat|lua_|lua-|lua\\.|gulp|case|author|without|simulator|wifi|directory|lisp|list|flat|adventure|story|storm|gpu_|gpu-|gpu\\.|store|caching|attention|solr|logger|demo|shortener|hadoop|finder|phone|pipeline|range|textmate|showcase|app_|app-|app\\.|idiomatic|edit|our_|our-|our\\.|out_|out-|out\\.|sentiment|linked|why_|why-|why\\.|local|cube|gmail|job_|job-|job\\.|rpc_|rpc-|rpc\\.|contest|tcp_|tcp-|tcp\\.|usage|buildout|weather|transfer|automated|sphinx|issue|sas_|sas-|sas\\.|parallax|jasmine|addon|machine|solution|dsl_|dsl-|dsl\\.|episode|menu|theme|best|adapter|debugger|chrome|tutorial|life|step|people|joomla|paypal|developer|solver|team|current|love|visual|date|data|canva|container|future|xml_|xml-|xml\\.|twig|nagio|spatial|original|sync|archived|refinery|science|mapping|gitlab|play|ext_|ext-|ext\\.|session|impact|set_|set-|set\\.|see_|see-|see\\.|migration|commit|community|shopify|what\'|cucumber|statamic|mysql|location|tower|line|code|amqp|hello|send|index|high|notebook|alloy|python|field|document|soap|edition|email|php_|php-|php\\.|command|transport|official|upload|study|secure|angularj|akka|scalable|package|request|con_|con-|con\\.|flexible|security|comment|module|flask|graph|flash|apache|change|window|space|lambda|sheet|bookmark|carousel|friend|objective|jekyll|bootstrap|first|article|gwt_|gwt-|gwt\\.|classic|media|websocket|touch|desktop|real|read|recorder|moved|storage|validator|add-on|pusher|scs_|scs-|scs\\.|inline|asp_|asp-|asp\\.|timeline|base|encoding|ffmpeg|kindle|tinymce|pretty|jpa_|jpa-|jpa\\.|used|user|required|webhook|download|resque|espresso|cloud|mongo|benchmark|pure|cakephp|modx|mode|reactive|fuel|written|flickr|mail|brunch|meteor|dynamic|neo_|neo-|neo\\.|new_|new-|new\\.|net_|net-|net\\.|typo|type|keyboard|erlang|adobe|logging|ckeditor|message|iso_|iso-|iso\\.|hook|ldap|folder|reference|railscast|www_|www-|www\\.|tracker|azure|fork|form|digital|exporter|skin|string|template|designer|gollum|fluent|entity|language|alfred|summary|wiki|kernel|calendar|plupload|symfony|foundry|remote|talk|search|dev_|dev-|dev\\.|del_|del-|del\\.|token|idea|sencha|selector|interface|create|fun_|fun-|fun\\.|groovy|query|grail|red_|red-|red\\.|laravel|monkey|slack|supported|instant|value|center|latest|work|but_|but-|but\\.|bug_|bug-|bug\\.|virtual|tweet|statsd|studio|path|real-time|frontend|notifier|coding|tool|firmware|flow|random|mediawiki|bosh|been|beer|lightbox|theory|origin|redmine|hub_|hub-|hub\\.|require|pro_|pro-|pro\\.|ant_|ant-|ant\\.|any_|any-|any\\.|recipe|closure|mapper|event|todo|model|redi|provider|rvm_|rvm-|rvm\\.|program|memcached|rail|silex|foreman|activity|license|strategy|batch|streaming|fast|use_|use-|use\\.|usb_|usb-|usb\\.|impres|academy|slider|please|layer|cros|now_|now-|now\\.|miner|extension|own_|own-|own\\.|app_|app-|app\\.|debian|symphony|example|feature|serie|tree|project|runner|entry|leetcode|layout|webrtc|logic|login|worker|toolkit|mocha|support|back|inside|device|jenkin|contact|fake|awesome|ocaml|bit_|bit-|bit\\.|drive|screen|prototype|gist|binary|nosql|rest|overview|dart|dark|emac|mongoid|solarized|homepage|emulator|commander|django|yandex|gradle|xcode|writer|crm_|crm-|crm\\.|jade|startup|error|using|format|name|spring|parser|scratch|magic|try_|try-|try\\.|rack|directive|challenge|slim|counter|element|chosen|doc_|doc-|doc\\.|meta|should|button|packet|stream|hardware|android|infinite|password|software|ghost|xamarin|spec|chef|interview|hubot|mvc_|mvc-|mvc\\.|exercise|leaflet|launcher|air_|air-|air\\.|photo|board|boxen|way_|way-|way\\.|computing|welcome|notepad|portfolio|cat_|cat-|cat\\.|can_|can-|can\\.|magento|yaml|domain|card|yii_|yii-|yii\\.|checker|browser|upgrade|only|progres|aura|ruby_|ruby-|ruby\\.|polymer|util|lite|hackathon|rule|log_|log-|log\\.|opengl|stanford|skeleton|history|inspector|help|soon|selenium|lab_|lab-|lab\\.|scheme|schema|look|ready|leveldb|docker|game|minimal|logstash|messaging|within|heroku|mongodb|kata|suite|picker|win_|win-|win\\.|wip_|wip-|wip\\.|panel|started|starter|front-end|detector|deploy|editing|based|admin|capture|spree|page|bundle|goal|rpg_|rpg-|rpg\\.|setup|side|mean|reader|cookbook|mini|modern|seed|dom_|dom-|dom\\.|doc_|doc-|doc\\.|dot_|dot-|dot\\.|syntax|sugar|loader|website|make|kit_|kit-|kit\\.|protocol|human|daemon|golang|manager|countdown|connector|swagger|map_|map-|map\\.|mac_|mac-|mac\\.|man_|man-|man\\.|orm_|orm-|orm\\.|org_|org-|org\\.|little|zsh_|zsh-|zsh\\.|shop|show|workshop|money|grid|server|octopres|svn_|svn-|svn\\.|ember|embed|general|file|important|dropbox|portable|public|docpad|fish|sbt_|sbt-|sbt\\.|done|para|network|common|readme|popup|simple|purpose|mirror|single|cordova|exchange|object|design|gateway|account|lamp|intellij|math|mit_|mit-|mit\\.|control|enhanced|emitter|multi|add_|add-|add\\.|about|socket|preview|vagrant|cli_|cli-|cli\\.|powerful|top_|top-|top\\.|radio|watch|fluid|amazon|report|couchbase|automatic|detection|sprite|pyramid|portal|advanced|plu_|plu-|plu\\.|runtime|git_|git-|git\\.|uri_|uri-|uri\\.|haml|node|sql_|sql-|sql\\.|cool|core|obsolete|handler|iphone|extractor|array|copy|nlp_|nlp-|nlp\\.|reveal|pop_|pop-|pop\\.|engine|parse|check|html|nest|all_|all-|all\\.|chinese|buildpack|what|tag_|tag-|tag\\.|proxy|style|cookie|feed|restful|compiler|creating|prelude|context|java|rspec|mock|backbone|light|spotify|flex|related|shell|which|clas|webapp|swift|ansible|unity|console|tumblr|export|campfire|conway\'|made|riak|hero|here|unix|unit|glas|smtp|how_|how-|how\\.|hot_|hot-|hot\\.|debug|release|diff|player|easy|right|old_|old-|old\\.|animate|time|push|explorer|course|training|nette|router|draft|structure|note|salt|where|spark|trello|power|method|social|via_|via-|via\\.|vim_|vim-|vim\\.|select|webkit|github|ftp_|ftp-|ftp\\.|creator|mongoose|led_|led-|led\\.|movie|currently|pdf_|pdf-|pdf\\.|load|markdown|phalcon|input|custom|atom|oracle|phonegap|ubuntu|great|rdf_|rdf-|rdf\\.|popcorn|firefox|zip_|zip-|zip\\.|cuda|dotfile|static|openwrt|viewer|powered|graphic|les_|les-|les\\.|doe_|doe-|doe\\.|maven|word|eclipse|lab_|lab-|lab\\.|hacking|steam|analytic|option|abstract|archive|reality|switcher|club|write|kafka|arduino|angular|online|title|don\'t|contao|notice|analyzer|learning|zend|external|staging|busines|tdd_|tdd-|tdd\\.|scanner|building|snippet|modular|bower|stm_|stm-|stm\\.|lib_|lib-|lib\\.|alpha|mobile|clean|linux|nginx|manifest|some|raspberry|gnome|ide_|ide-|ide\\.|block|statistic|info|drag|youtube|koan|facebook|paperclip|art_|art-|art\\.|quality|tab_|tab-|tab\\.|need|dojo|shield|computer|stat|state|twitter|utility|converter|hosting|devise|liferay|updated|force|tip_|tip-|tip\\.|behavior|active|call|answer|deck|better|principle|ches|bar_|bar-|bar\\.|reddit|three|haxe|just|plug-in|agile|manual|tetri|super|beta|parsing|doctrine|minecraft|useful|perl|sharing|agent|switch|view|dash|channel|repo|pebble|profiler|warning|cluster|running|markup|evented|mod_|mod-|mod\\.|share|csv_|csv-|csv\\.|response|good|house|connect|built|build|find|ipython|webgl|big_|big-|big\\.|google|scala|sdl_|sdl-|sdl\\.|sdk_|sdk-|sdk\\.|native|day_|day-|day\\.|puppet|text|routing|helper|linkedin|crawler|host|guard|merchant|poker|over|writing|free|classe|component|craft|nodej|phoenix|longer|quick|lazy|memory|clone|hacker|middleman|factory|motion|multiple|tornado|hack|ssh_|ssh-|ssh\\.|review|vimrc|driver|driven|blog|particle|table|intro|importer|thrift|xmpp|framework|refresh|react|font|librarie|variou|formatter|analysi|karma|scroll|tut_|tut-|tut\\.|apple|tag_|tag-|tag\\.|tab_|tab-|tab\\.|category|ionic|cache|homebrew|reverse|english|getting|shipping|clojure|boot|book|branch|combination|combo)) XFomq-zrApSx (?!(^0x0*|^pub)|.*\\.(bin|json|exe)$|.*(?i)(Client|Factory)$|(^__[A-Za-z]+__$)|^(12345|abcd)|^\\d+(\\.\\d+)?$) XFomq-zrApSx entropy (?i)(?:key|api|token|secret|client|passwd|password|auth|access)(?:[0-9a-z\\-_\\t.]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:=|\\|\\|:|<=|=>|:)(?:\'|@\\"|\\"|\\s|=|\\x60){0,5}(?!([a-z]+\\.[a-zA-Z]+)|.*(\\d{4}-\\d{2}-\\d{2})|:*(?!("|\'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)(?P<CONTENT>[0-9a-z\\-_.=\\~@]{10,150})(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$) (\\d\\.\\d\\.\\d-}|([\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3})|(\\w)\\1{5}|(?i)keywords|xxxx|eeeeeeee|0000|\\*\\*\\*|example|test|author=|author("|\')|preview|[A-Z]+_KEY|[.]value|[.]key|-\\d\\.\\d\\.) (\\w|\\.)\\1{5} .*((?i)omitted|arn:aws|(?i)(pub.*key|public.*key)|(?i)clientToken|symbol|cache|author\\.).*', PosixPath('attached_assets/Pasted-WebSocket-interceptor-instalado-vite-fix-js-22-Vite-WebSocket-interceptado-wss-35b03a2a-9847-4e3-1746559710715.txt'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = d3d057780c3178872a84fd0283c9929092f75e1962bca2c3c4fe115613833a1f89fe3c7f7564d842ff165be83b4346c3eaf593e1ad4cd9367660665289286cb1_0
2025-05-07 18:31:35,109 - semgrep.rule_match - DEBUG - match_key = ('XFomq-zrApSx XFomq-zrApSx (?!(?i).*(client|endpoint|vpn|_ec2_|aws_|authorize|author|define|config|credential|setting|sample|xxxxxx|000000|buffer|delete|aaaaaa|fewfwef|getenv|env_|system|example|ecdsa|sha256|sha1|sha2|md5|alert|wizard|target|onboard|welcome|page|exploit|experiment|expire|rabbitmq|scraper|widget|music|dns_|dns-|yahoo|want|json|action|script|fix_|fix-|develop|compas|stripe|service|master|metric|tech|gitignore|rich|open|stack|irc_|irc-|sublime|kohana|has_|has-|fabric|wordpres|role|osx_|osx-|boost|addres|queue|working|sandbox|internet|print|vision|tracking|being|generator|traffic|world|pull|rust|watcher|small|auth|full|hash|more|install|auto|complete|learn|paper|installer|research|acces|last|binding|spine|into|chat|algorithm|resource|uploader|video|maker|next|proc|lock|robot|snake|patch|matrix|drill|terminal|term|stuff|genetic|generic|identity|audit|pattern|audio|web_|web-|crud|problem|statu|cms-|cms_|arch|coffee|workflow|changelog|another|uiview|content|kitchen|gnu_|gnu-|gnu\\.|conf|couchdb|client|opencv|rendering|update|concept|varnish|gui_|gui-|gui\\.|version|shared|extra|product|still|not_|not-|not\\.|drop|ring|png_|png-|png\\.|actively|import|output|backup|start|embedded|registry|pool|semantic|instagram|bash|system|ninja|drupal|jquery|polyfill|physic|league|guide|pack|synopsi|sketch|injection|svg_|svg-|svg\\.|friendly|wave|convert|manage|camera|link|slide|timer|wrapper|gallery|url_|url-|url\\.|todomvc|requirej|party|http|payment|async|library|home|coco|gaia|display|universal|func|metadata|hipchat|under|room|config|personal|realtime|resume|database|testing|tiny|basic|forum|meetup|yet_|yet-|yet\\.|cento|dead|fluentd|editor|utilitie|run_|run-|run\\.|box_|box-|box\\.|bot_|bot-|bot\\.|making|sample|group|monitor|ajax|parallel|cassandra|ultimate|site|get_|get-|get\\.|gen_|gen-|gen\\.|gem_|gem-|gem\\.|extended|image|knife|asset|nested|zero|plugin|bracket|mule|mozilla|number|act_|act-|act\\.|map_|map-|map\\.|micro|debug|openshift|chart|expres|backend|task|source|translate|jbos|composer|sqlite|profile|mustache|mqtt|yeoman|have|builder|smart|like|oauth|school|guideline|captcha|filter|bitcoin|bridge|color|toolbox|discovery|new_|new-|new\\.|dashboard|when|setting|level|post|standard|port|platform|yui_|yui-|yui\\.|grunt|animation|haskell|icon|latex|cheat|lua_|lua-|lua\\.|gulp|case|author|without|simulator|wifi|directory|lisp|list|flat|adventure|story|storm|gpu_|gpu-|gpu\\.|store|caching|attention|solr|logger|demo|shortener|hadoop|finder|phone|pipeline|range|textmate|showcase|app_|app-|app\\.|idiomatic|edit|our_|our-|our\\.|out_|out-|out\\.|sentiment|linked|why_|why-|why\\.|local|cube|gmail|job_|job-|job\\.|rpc_|rpc-|rpc\\.|contest|tcp_|tcp-|tcp\\.|usage|buildout|weather|transfer|automated|sphinx|issue|sas_|sas-|sas\\.|parallax|jasmine|addon|machine|solution|dsl_|dsl-|dsl\\.|episode|menu|theme|best|adapter|debugger|chrome|tutorial|life|step|people|joomla|paypal|developer|solver|team|current|love|visual|date|data|canva|container|future|xml_|xml-|xml\\.|twig|nagio|spatial|original|sync|archived|refinery|science|mapping|gitlab|play|ext_|ext-|ext\\.|session|impact|set_|set-|set\\.|see_|see-|see\\.|migration|commit|community|shopify|what\'|cucumber|statamic|mysql|location|tower|line|code|amqp|hello|send|index|high|notebook|alloy|python|field|document|soap|edition|email|php_|php-|php\\.|command|transport|official|upload|study|secure|angularj|akka|scalable|package|request|con_|con-|con\\.|flexible|security|comment|module|flask|graph|flash|apache|change|window|space|lambda|sheet|bookmark|carousel|friend|objective|jekyll|bootstrap|first|article|gwt_|gwt-|gwt\\.|classic|media|websocket|touch|desktop|real|read|recorder|moved|storage|validator|add-on|pusher|scs_|scs-|scs\\.|inline|asp_|asp-|asp\\.|timeline|base|encoding|ffmpeg|kindle|tinymce|pretty|jpa_|jpa-|jpa\\.|used|user|required|webhook|download|resque|espresso|cloud|mongo|benchmark|pure|cakephp|modx|mode|reactive|fuel|written|flickr|mail|brunch|meteor|dynamic|neo_|neo-|neo\\.|new_|new-|new\\.|net_|net-|net\\.|typo|type|keyboard|erlang|adobe|logging|ckeditor|message|iso_|iso-|iso\\.|hook|ldap|folder|reference|railscast|www_|www-|www\\.|tracker|azure|fork|form|digital|exporter|skin|string|template|designer|gollum|fluent|entity|language|alfred|summary|wiki|kernel|calendar|plupload|symfony|foundry|remote|talk|search|dev_|dev-|dev\\.|del_|del-|del\\.|token|idea|sencha|selector|interface|create|fun_|fun-|fun\\.|groovy|query|grail|red_|red-|red\\.|laravel|monkey|slack|supported|instant|value|center|latest|work|but_|but-|but\\.|bug_|bug-|bug\\.|virtual|tweet|statsd|studio|path|real-time|frontend|notifier|coding|tool|firmware|flow|random|mediawiki|bosh|been|beer|lightbox|theory|origin|redmine|hub_|hub-|hub\\.|require|pro_|pro-|pro\\.|ant_|ant-|ant\\.|any_|any-|any\\.|recipe|closure|mapper|event|todo|model|redi|provider|rvm_|rvm-|rvm\\.|program|memcached|rail|silex|foreman|activity|license|strategy|batch|streaming|fast|use_|use-|use\\.|usb_|usb-|usb\\.|impres|academy|slider|please|layer|cros|now_|now-|now\\.|miner|extension|own_|own-|own\\.|app_|app-|app\\.|debian|symphony|example|feature|serie|tree|project|runner|entry|leetcode|layout|webrtc|logic|login|worker|toolkit|mocha|support|back|inside|device|jenkin|contact|fake|awesome|ocaml|bit_|bit-|bit\\.|drive|screen|prototype|gist|binary|nosql|rest|overview|dart|dark|emac|mongoid|solarized|homepage|emulator|commander|django|yandex|gradle|xcode|writer|crm_|crm-|crm\\.|jade|startup|error|using|format|name|spring|parser|scratch|magic|try_|try-|try\\.|rack|directive|challenge|slim|counter|element|chosen|doc_|doc-|doc\\.|meta|should|button|packet|stream|hardware|android|infinite|password|software|ghost|xamarin|spec|chef|interview|hubot|mvc_|mvc-|mvc\\.|exercise|leaflet|launcher|air_|air-|air\\.|photo|board|boxen|way_|way-|way\\.|computing|welcome|notepad|portfolio|cat_|cat-|cat\\.|can_|can-|can\\.|magento|yaml|domain|card|yii_|yii-|yii\\.|checker|browser|upgrade|only|progres|aura|ruby_|ruby-|ruby\\.|polymer|util|lite|hackathon|rule|log_|log-|log\\.|opengl|stanford|skeleton|history|inspector|help|soon|selenium|lab_|lab-|lab\\.|scheme|schema|look|ready|leveldb|docker|game|minimal|logstash|messaging|within|heroku|mongodb|kata|suite|picker|win_|win-|win\\.|wip_|wip-|wip\\.|panel|started|starter|front-end|detector|deploy|editing|based|admin|capture|spree|page|bundle|goal|rpg_|rpg-|rpg\\.|setup|side|mean|reader|cookbook|mini|modern|seed|dom_|dom-|dom\\.|doc_|doc-|doc\\.|dot_|dot-|dot\\.|syntax|sugar|loader|website|make|kit_|kit-|kit\\.|protocol|human|daemon|golang|manager|countdown|connector|swagger|map_|map-|map\\.|mac_|mac-|mac\\.|man_|man-|man\\.|orm_|orm-|orm\\.|org_|org-|org\\.|little|zsh_|zsh-|zsh\\.|shop|show|workshop|money|grid|server|octopres|svn_|svn-|svn\\.|ember|embed|general|file|important|dropbox|portable|public|docpad|fish|sbt_|sbt-|sbt\\.|done|para|network|common|readme|popup|simple|purpose|mirror|single|cordova|exchange|object|design|gateway|account|lamp|intellij|math|mit_|mit-|mit\\.|control|enhanced|emitter|multi|add_|add-|add\\.|about|socket|preview|vagrant|cli_|cli-|cli\\.|powerful|top_|top-|top\\.|radio|watch|fluid|amazon|report|couchbase|automatic|detection|sprite|pyramid|portal|advanced|plu_|plu-|plu\\.|runtime|git_|git-|git\\.|uri_|uri-|uri\\.|haml|node|sql_|sql-|sql\\.|cool|core|obsolete|handler|iphone|extractor|array|copy|nlp_|nlp-|nlp\\.|reveal|pop_|pop-|pop\\.|engine|parse|check|html|nest|all_|all-|all\\.|chinese|buildpack|what|tag_|tag-|tag\\.|proxy|style|cookie|feed|restful|compiler|creating|prelude|context|java|rspec|mock|backbone|light|spotify|flex|related|shell|which|clas|webapp|swift|ansible|unity|console|tumblr|export|campfire|conway\'|made|riak|hero|here|unix|unit|glas|smtp|how_|how-|how\\.|hot_|hot-|hot\\.|debug|release|diff|player|easy|right|old_|old-|old\\.|animate|time|push|explorer|course|training|nette|router|draft|structure|note|salt|where|spark|trello|power|method|social|via_|via-|via\\.|vim_|vim-|vim\\.|select|webkit|github|ftp_|ftp-|ftp\\.|creator|mongoose|led_|led-|led\\.|movie|currently|pdf_|pdf-|pdf\\.|load|markdown|phalcon|input|custom|atom|oracle|phonegap|ubuntu|great|rdf_|rdf-|rdf\\.|popcorn|firefox|zip_|zip-|zip\\.|cuda|dotfile|static|openwrt|viewer|powered|graphic|les_|les-|les\\.|doe_|doe-|doe\\.|maven|word|eclipse|lab_|lab-|lab\\.|hacking|steam|analytic|option|abstract|archive|reality|switcher|club|write|kafka|arduino|angular|online|title|don\'t|contao|notice|analyzer|learning|zend|external|staging|busines|tdd_|tdd-|tdd\\.|scanner|building|snippet|modular|bower|stm_|stm-|stm\\.|lib_|lib-|lib\\.|alpha|mobile|clean|linux|nginx|manifest|some|raspberry|gnome|ide_|ide-|ide\\.|block|statistic|info|drag|youtube|koan|facebook|paperclip|art_|art-|art\\.|quality|tab_|tab-|tab\\.|need|dojo|shield|computer|stat|state|twitter|utility|converter|hosting|devise|liferay|updated|force|tip_|tip-|tip\\.|behavior|active|call|answer|deck|better|principle|ches|bar_|bar-|bar\\.|reddit|three|haxe|just|plug-in|agile|manual|tetri|super|beta|parsing|doctrine|minecraft|useful|perl|sharing|agent|switch|view|dash|channel|repo|pebble|profiler|warning|cluster|running|markup|evented|mod_|mod-|mod\\.|share|csv_|csv-|csv\\.|response|good|house|connect|built|build|find|ipython|webgl|big_|big-|big\\.|google|scala|sdl_|sdl-|sdl\\.|sdk_|sdk-|sdk\\.|native|day_|day-|day\\.|puppet|text|routing|helper|linkedin|crawler|host|guard|merchant|poker|over|writing|free|classe|component|craft|nodej|phoenix|longer|quick|lazy|memory|clone|hacker|middleman|factory|motion|multiple|tornado|hack|ssh_|ssh-|ssh\\.|review|vimrc|driver|driven|blog|particle|table|intro|importer|thrift|xmpp|framework|refresh|react|font|librarie|variou|formatter|analysi|karma|scroll|tut_|tut-|tut\\.|apple|tag_|tag-|tag\\.|tab_|tab-|tab\\.|category|ionic|cache|homebrew|reverse|english|getting|shipping|clojure|boot|book|branch|combination|combo)) XFomq-zrApSx (?!(^0x0*|^pub)|.*\\.(bin|json|exe)$|.*(?i)(Client|Factory)$|(^__[A-Za-z]+__$)|^(12345|abcd)|^\\d+(\\.\\d+)?$) XFomq-zrApSx entropy (?i)(?:key|api|token|secret|client|passwd|password|auth|access)(?:[0-9a-z\\-_\\t.]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:=|\\|\\|:|<=|=>|:)(?:\'|@\\"|\\"|\\s|=|\\x60){0,5}(?!([a-z]+\\.[a-zA-Z]+)|.*(\\d{4}-\\d{2}-\\d{2})|:*(?!("|\'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)(?P<CONTENT>[0-9a-z\\-_.=\\~@]{10,150})(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$) (\\d\\.\\d\\.\\d-}|([\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3})|(\\w)\\1{5}|(?i)keywords|xxxx|eeeeeeee|0000|\\*\\*\\*|example|test|author=|author("|\')|preview|[A-Z]+_KEY|[.]value|[.]key|-\\d\\.\\d\\.) (\\w|\\.)\\1{5} .*((?i)omitted|arn:aws|(?i)(pub.*key|public.*key)|(?i)clientToken|symbol|cache|author\\.).*', PosixPath('attached_assets/Pasted-WebSocket-interceptor-instalado-vite-fix-js-22-Vite-WebSocket-interceptado-wss-35b03a2a-9847-4e3-1746559710715.txt'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = d3d057780c3178872a84fd0283c9929092f75e1962bca2c3c4fe115613833a1f89fe3c7f7564d842ff165be83b4346c3eaf593e1ad4cd9367660665289286cb1_0
2025-05-07 18:31:35,110 - semgrep.rule_match - DEBUG - match_key = ('XFomq-zrApSx XFomq-zrApSx (?!(?i).*(client|endpoint|vpn|_ec2_|aws_|authorize|author|define|config|credential|setting|sample|xxxxxx|000000|buffer|delete|aaaaaa|fewfwef|getenv|env_|system|example|ecdsa|sha256|sha1|sha2|md5|alert|wizard|target|onboard|welcome|page|exploit|experiment|expire|rabbitmq|scraper|widget|music|dns_|dns-|yahoo|want|json|action|script|fix_|fix-|develop|compas|stripe|service|master|metric|tech|gitignore|rich|open|stack|irc_|irc-|sublime|kohana|has_|has-|fabric|wordpres|role|osx_|osx-|boost|addres|queue|working|sandbox|internet|print|vision|tracking|being|generator|traffic|world|pull|rust|watcher|small|auth|full|hash|more|install|auto|complete|learn|paper|installer|research|acces|last|binding|spine|into|chat|algorithm|resource|uploader|video|maker|next|proc|lock|robot|snake|patch|matrix|drill|terminal|term|stuff|genetic|generic|identity|audit|pattern|audio|web_|web-|crud|problem|statu|cms-|cms_|arch|coffee|workflow|changelog|another|uiview|content|kitchen|gnu_|gnu-|gnu\\.|conf|couchdb|client|opencv|rendering|update|concept|varnish|gui_|gui-|gui\\.|version|shared|extra|product|still|not_|not-|not\\.|drop|ring|png_|png-|png\\.|actively|import|output|backup|start|embedded|registry|pool|semantic|instagram|bash|system|ninja|drupal|jquery|polyfill|physic|league|guide|pack|synopsi|sketch|injection|svg_|svg-|svg\\.|friendly|wave|convert|manage|camera|link|slide|timer|wrapper|gallery|url_|url-|url\\.|todomvc|requirej|party|http|payment|async|library|home|coco|gaia|display|universal|func|metadata|hipchat|under|room|config|personal|realtime|resume|database|testing|tiny|basic|forum|meetup|yet_|yet-|yet\\.|cento|dead|fluentd|editor|utilitie|run_|run-|run\\.|box_|box-|box\\.|bot_|bot-|bot\\.|making|sample|group|monitor|ajax|parallel|cassandra|ultimate|site|get_|get-|get\\.|gen_|gen-|gen\\.|gem_|gem-|gem\\.|extended|image|knife|asset|nested|zero|plugin|bracket|mule|mozilla|number|act_|act-|act\\.|map_|map-|map\\.|micro|debug|openshift|chart|expres|backend|task|source|translate|jbos|composer|sqlite|profile|mustache|mqtt|yeoman|have|builder|smart|like|oauth|school|guideline|captcha|filter|bitcoin|bridge|color|toolbox|discovery|new_|new-|new\\.|dashboard|when|setting|level|post|standard|port|platform|yui_|yui-|yui\\.|grunt|animation|haskell|icon|latex|cheat|lua_|lua-|lua\\.|gulp|case|author|without|simulator|wifi|directory|lisp|list|flat|adventure|story|storm|gpu_|gpu-|gpu\\.|store|caching|attention|solr|logger|demo|shortener|hadoop|finder|phone|pipeline|range|textmate|showcase|app_|app-|app\\.|idiomatic|edit|our_|our-|our\\.|out_|out-|out\\.|sentiment|linked|why_|why-|why\\.|local|cube|gmail|job_|job-|job\\.|rpc_|rpc-|rpc\\.|contest|tcp_|tcp-|tcp\\.|usage|buildout|weather|transfer|automated|sphinx|issue|sas_|sas-|sas\\.|parallax|jasmine|addon|machine|solution|dsl_|dsl-|dsl\\.|episode|menu|theme|best|adapter|debugger|chrome|tutorial|life|step|people|joomla|paypal|developer|solver|team|current|love|visual|date|data|canva|container|future|xml_|xml-|xml\\.|twig|nagio|spatial|original|sync|archived|refinery|science|mapping|gitlab|play|ext_|ext-|ext\\.|session|impact|set_|set-|set\\.|see_|see-|see\\.|migration|commit|community|shopify|what\'|cucumber|statamic|mysql|location|tower|line|code|amqp|hello|send|index|high|notebook|alloy|python|field|document|soap|edition|email|php_|php-|php\\.|command|transport|official|upload|study|secure|angularj|akka|scalable|package|request|con_|con-|con\\.|flexible|security|comment|module|flask|graph|flash|apache|change|window|space|lambda|sheet|bookmark|carousel|friend|objective|jekyll|bootstrap|first|article|gwt_|gwt-|gwt\\.|classic|media|websocket|touch|desktop|real|read|recorder|moved|storage|validator|add-on|pusher|scs_|scs-|scs\\.|inline|asp_|asp-|asp\\.|timeline|base|encoding|ffmpeg|kindle|tinymce|pretty|jpa_|jpa-|jpa\\.|used|user|required|webhook|download|resque|espresso|cloud|mongo|benchmark|pure|cakephp|modx|mode|reactive|fuel|written|flickr|mail|brunch|meteor|dynamic|neo_|neo-|neo\\.|new_|new-|new\\.|net_|net-|net\\.|typo|type|keyboard|erlang|adobe|logging|ckeditor|message|iso_|iso-|iso\\.|hook|ldap|folder|reference|railscast|www_|www-|www\\.|tracker|azure|fork|form|digital|exporter|skin|string|template|designer|gollum|fluent|entity|language|alfred|summary|wiki|kernel|calendar|plupload|symfony|foundry|remote|talk|search|dev_|dev-|dev\\.|del_|del-|del\\.|token|idea|sencha|selector|interface|create|fun_|fun-|fun\\.|groovy|query|grail|red_|red-|red\\.|laravel|monkey|slack|supported|instant|value|center|latest|work|but_|but-|but\\.|bug_|bug-|bug\\.|virtual|tweet|statsd|studio|path|real-time|frontend|notifier|coding|tool|firmware|flow|random|mediawiki|bosh|been|beer|lightbox|theory|origin|redmine|hub_|hub-|hub\\.|require|pro_|pro-|pro\\.|ant_|ant-|ant\\.|any_|any-|any\\.|recipe|closure|mapper|event|todo|model|redi|provider|rvm_|rvm-|rvm\\.|program|memcached|rail|silex|foreman|activity|license|strategy|batch|streaming|fast|use_|use-|use\\.|usb_|usb-|usb\\.|impres|academy|slider|please|layer|cros|now_|now-|now\\.|miner|extension|own_|own-|own\\.|app_|app-|app\\.|debian|symphony|example|feature|serie|tree|project|runner|entry|leetcode|layout|webrtc|logic|login|worker|toolkit|mocha|support|back|inside|device|jenkin|contact|fake|awesome|ocaml|bit_|bit-|bit\\.|drive|screen|prototype|gist|binary|nosql|rest|overview|dart|dark|emac|mongoid|solarized|homepage|emulator|commander|django|yandex|gradle|xcode|writer|crm_|crm-|crm\\.|jade|startup|error|using|format|name|spring|parser|scratch|magic|try_|try-|try\\.|rack|directive|challenge|slim|counter|element|chosen|doc_|doc-|doc\\.|meta|should|button|packet|stream|hardware|android|infinite|password|software|ghost|xamarin|spec|chef|interview|hubot|mvc_|mvc-|mvc\\.|exercise|leaflet|launcher|air_|air-|air\\.|photo|board|boxen|way_|way-|way\\.|computing|welcome|notepad|portfolio|cat_|cat-|cat\\.|can_|can-|can\\.|magento|yaml|domain|card|yii_|yii-|yii\\.|checker|browser|upgrade|only|progres|aura|ruby_|ruby-|ruby\\.|polymer|util|lite|hackathon|rule|log_|log-|log\\.|opengl|stanford|skeleton|history|inspector|help|soon|selenium|lab_|lab-|lab\\.|scheme|schema|look|ready|leveldb|docker|game|minimal|logstash|messaging|within|heroku|mongodb|kata|suite|picker|win_|win-|win\\.|wip_|wip-|wip\\.|panel|started|starter|front-end|detector|deploy|editing|based|admin|capture|spree|page|bundle|goal|rpg_|rpg-|rpg\\.|setup|side|mean|reader|cookbook|mini|modern|seed|dom_|dom-|dom\\.|doc_|doc-|doc\\.|dot_|dot-|dot\\.|syntax|sugar|loader|website|make|kit_|kit-|kit\\.|protocol|human|daemon|golang|manager|countdown|connector|swagger|map_|map-|map\\.|mac_|mac-|mac\\.|man_|man-|man\\.|orm_|orm-|orm\\.|org_|org-|org\\.|little|zsh_|zsh-|zsh\\.|shop|show|workshop|money|grid|server|octopres|svn_|svn-|svn\\.|ember|embed|general|file|important|dropbox|portable|public|docpad|fish|sbt_|sbt-|sbt\\.|done|para|network|common|readme|popup|simple|purpose|mirror|single|cordova|exchange|object|design|gateway|account|lamp|intellij|math|mit_|mit-|mit\\.|control|enhanced|emitter|multi|add_|add-|add\\.|about|socket|preview|vagrant|cli_|cli-|cli\\.|powerful|top_|top-|top\\.|radio|watch|fluid|amazon|report|couchbase|automatic|detection|sprite|pyramid|portal|advanced|plu_|plu-|plu\\.|runtime|git_|git-|git\\.|uri_|uri-|uri\\.|haml|node|sql_|sql-|sql\\.|cool|core|obsolete|handler|iphone|extractor|array|copy|nlp_|nlp-|nlp\\.|reveal|pop_|pop-|pop\\.|engine|parse|check|html|nest|all_|all-|all\\.|chinese|buildpack|what|tag_|tag-|tag\\.|proxy|style|cookie|feed|restful|compiler|creating|prelude|context|java|rspec|mock|backbone|light|spotify|flex|related|shell|which|clas|webapp|swift|ansible|unity|console|tumblr|export|campfire|conway\'|made|riak|hero|here|unix|unit|glas|smtp|how_|how-|how\\.|hot_|hot-|hot\\.|debug|release|diff|player|easy|right|old_|old-|old\\.|animate|time|push|explorer|course|training|nette|router|draft|structure|note|salt|where|spark|trello|power|method|social|via_|via-|via\\.|vim_|vim-|vim\\.|select|webkit|github|ftp_|ftp-|ftp\\.|creator|mongoose|led_|led-|led\\.|movie|currently|pdf_|pdf-|pdf\\.|load|markdown|phalcon|input|custom|atom|oracle|phonegap|ubuntu|great|rdf_|rdf-|rdf\\.|popcorn|firefox|zip_|zip-|zip\\.|cuda|dotfile|static|openwrt|viewer|powered|graphic|les_|les-|les\\.|doe_|doe-|doe\\.|maven|word|eclipse|lab_|lab-|lab\\.|hacking|steam|analytic|option|abstract|archive|reality|switcher|club|write|kafka|arduino|angular|online|title|don\'t|contao|notice|analyzer|learning|zend|external|staging|busines|tdd_|tdd-|tdd\\.|scanner|building|snippet|modular|bower|stm_|stm-|stm\\.|lib_|lib-|lib\\.|alpha|mobile|clean|linux|nginx|manifest|some|raspberry|gnome|ide_|ide-|ide\\.|block|statistic|info|drag|youtube|koan|facebook|paperclip|art_|art-|art\\.|quality|tab_|tab-|tab\\.|need|dojo|shield|computer|stat|state|twitter|utility|converter|hosting|devise|liferay|updated|force|tip_|tip-|tip\\.|behavior|active|call|answer|deck|better|principle|ches|bar_|bar-|bar\\.|reddit|three|haxe|just|plug-in|agile|manual|tetri|super|beta|parsing|doctrine|minecraft|useful|perl|sharing|agent|switch|view|dash|channel|repo|pebble|profiler|warning|cluster|running|markup|evented|mod_|mod-|mod\\.|share|csv_|csv-|csv\\.|response|good|house|connect|built|build|find|ipython|webgl|big_|big-|big\\.|google|scala|sdl_|sdl-|sdl\\.|sdk_|sdk-|sdk\\.|native|day_|day-|day\\.|puppet|text|routing|helper|linkedin|crawler|host|guard|merchant|poker|over|writing|free|classe|component|craft|nodej|phoenix|longer|quick|lazy|memory|clone|hacker|middleman|factory|motion|multiple|tornado|hack|ssh_|ssh-|ssh\\.|review|vimrc|driver|driven|blog|particle|table|intro|importer|thrift|xmpp|framework|refresh|react|font|librarie|variou|formatter|analysi|karma|scroll|tut_|tut-|tut\\.|apple|tag_|tag-|tag\\.|tab_|tab-|tab\\.|category|ionic|cache|homebrew|reverse|english|getting|shipping|clojure|boot|book|branch|combination|combo)) XFomq-zrApSx (?!(^0x0*|^pub)|.*\\.(bin|json|exe)$|.*(?i)(Client|Factory)$|(^__[A-Za-z]+__$)|^(12345|abcd)|^\\d+(\\.\\d+)?$) XFomq-zrApSx entropy (?i)(?:key|api|token|secret|client|passwd|password|auth|access)(?:[0-9a-z\\-_\\t.]{0,20})(?:[\\s|\']|[\\s|"]){0,3}(?:=|>|:=|\\|\\|:|<=|=>|:)(?:\'|@\\"|\\"|\\s|=|\\x60){0,5}(?!([a-z]+\\.[a-zA-Z]+)|.*(\\d{4}-\\d{2}-\\d{2})|:*(?!("|\'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)(?P<CONTENT>[0-9a-z\\-_.=\\~@]{10,150})(?:[\'|\\"|\\n|\\r|\\s|\\x60|;]|$) (\\d\\.\\d\\.\\d-}|([\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3}\\.[\\d]{1,3})|(\\w)\\1{5}|(?i)keywords|xxxx|eeeeeeee|0000|\\*\\*\\*|example|test|author=|author("|\')|preview|[A-Z]+_KEY|[.]value|[.]key|-\\d\\.\\d\\.) (\\w|\\.)\\1{5} .*((?i)omitted|arn:aws|(?i)(pub.*key|public.*key)|(?i)clientToken|symbol|cache|author\\.).*', PosixPath('attached_assets/Pasted-WebSocket-interceptor-instalado-vite-fix-js-22-Vite-WebSocket-interceptado-wss-35b03a2a-9847-4e3-1746559710715.txt'), 'config..semgrep.vendored-rules.generic.secrets.gitleaks.generic-api-key') match_id = d3d057780c3178872a84fd0283c9929092f75e1962bca2c3c4fe115613833a1f89fe3c7f7564d842ff165be83b4346c3eaf593e1ad4cd9367660665289286cb1_0
2025-05-07 18:31:35,110 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('client/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 0ee74fd49637bebe183eca7188dbde26e386314e62cc2e7ba1ee60b377b638243fcd84e6c6fa04886198ccacfa6a711bfbcc61a28f9ddc913d5b3c53083cbc90_0
2025-05-07 18:31:35,111 - semgrep.rule_match - DEBUG - match_key = (' type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" > <script  type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" >...</script>', PosixPath('client/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 0728b64e224596592d04447ba8a642ff94e1fb9fcc07be26d49dc7e7f6898e638ad16ffcaca086932c58f4c6400fe32603323afef02cf9bfebcb0e4a53562a40_0
2025-05-07 18:31:35,111 - semgrep.rule_match - DEBUG - match_key = (' type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" > <script  type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" >...</script>', PosixPath('client/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 0728b64e224596592d04447ba8a642ff94e1fb9fcc07be26d49dc7e7f6898e638ad16ffcaca086932c58f4c6400fe32603323afef02cf9bfebcb0e4a53562a40_0
2025-05-07 18:31:35,111 - semgrep.rule_match - DEBUG - match_key = (' type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" > <script  type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js" >...</script>', PosixPath('client/index.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 0728b64e224596592d04447ba8a642ff94e1fb9fcc07be26d49dc7e7f6898e638ad16ffcaca086932c58f4c6400fe32603323afef02cf9bfebcb0e4a53562a40_0
2025-05-07 18:31:35,119 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('client/public/appointments.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = aaef7e03cea16712d373830c8b9f2d40dc57543c4ec98d4e75c5d7c0e3d97c5633b3b4731e545f7285e8a0981b3299a7eef6e53ce20eeb060aa06833c4493fb0_0
2025-05-07 18:31:35,127 - semgrep.rule_match - DEBUG - match_key = ('\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', () => {\n      checkAuth();\n      setupEventListeners();\n      \n      const today = new Date();\n      currentMonth = today.getMonth();\n      currentYear = today.getFullYear();\n      \n      // Iniciar calendário\n      updateCalendarTitle();\n      renderCalendar();\n      \n      // Carregar filtros\n      loadProfessionals();\n      loadFacilities();\n      \n      // Carregar agendamentos\n      loadAppointments();\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const calendarTitleElement = document.getElementById(\'calendarTitle\');\n    const prevButton = document.getElementById(\'prevButton\');\n    const todayButton = document.getElementById(\'todayButton\');\n    const nextButton = document.getElementById(\'nextButton\');\n    const monthViewButton = document.getElementById(\'monthViewButton\');\n    const weekViewButton = document.getElementById(\'weekViewButton\');\n    const listViewButton = document.getElementById(\'listViewButton\');\n    const monthViewElement = document.getElementById(\'monthView\');\n    const weekViewElement = document.getElementById(\'weekView\');\n    const listViewElement = document.getElementById(\'listView\');\n    const newAppointmentButton = document.getElementById(\'newAppointmentButton\');\n    const appointmentModal = document.getElementById(\'appointmentModal\');\n    const viewAppointmentModal = document.getElementById(\'viewAppointmentModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const appointmentForm = document.getElementById(\'appointmentForm\');\n    const appointmentIdInput = document.getElementById(\'appointmentId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    const closeViewButton = document.getElementById(\'closeViewButton\');\n    const editAppointmentButton = document.getElementById(\'editAppointmentButton\');\n    const addEvolutionButton = document.getElementById(\'addEvolutionButton\');\n    const professionalFilter = document.getElementById(\'professionalFilter\');\n    const facilityFilter = document.getElementById(\'facilityFilter\');\n    const statusFilter = document.getElementById(\'statusFilter\');\n    const typeFilter = document.getElementById(\'typeFilter\');\n    \n    // Variáveis globais para o calendário\n    let currentMonth;\n    let currentYear;\n    let appointments = [];\n    let professionals = [];\n    let patients = [];\n    let facilities = [];\n    let rooms = [];\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        const userData = await response.json();\n        displayUserData(userData);\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir status\n    function translateStatus(status) {\n      const translations = {\n        \'scheduled\': \'Agendado\',\n        \'confirmed\': \'Confirmado\',\n        \'completed\': \'Concluído\',\n        \'attended\': \'Atendido\',\n        \'cancelled\': \'Cancelado\',\n        \'no_show\': \'Não compareceu\',\n        \'pending\': \'Pendente\'\n      };\n      \n      return translations[status] || status;\n    }\n    \n    // Traduzir tipo de procedimento\n    function translateProcedureType(type) {\n      const translations = {\n        \'psychology_aba\': \'Psicologia - ABA\',\n        \'psychology_cbt\': \'Psicologia - TCC\',\n        \'speech_therapy\': \'Fonoaudiologia\',\n        \'physical_therapy\': \'Fisioterapia\',\n        \'occupational_therapy\': \'Terapia Ocupacional\',\n        \'evaluation\': \'Avaliação\',\n        \'other\': \'Outro\',\n        \'free_time\': \'Tempo Livre\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Formatar data\n    function formatDate(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleDateString(\'pt-BR\');\n    }\n    \n    // Formatar hora\n    function formatTime(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleTimeString(\'pt-BR\', { hour: \'2-digit\', minute: \'2-digit\' });\n    }\n    \n    // Formatar data e hora\n    function formatDateTime(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleString(\'pt-BR\', {\n        day: \'2-digit\',\n        month: \'2-digit\',\n        year: \'numeric\',\n        hour: \'2-digit\',\n        minute: \'2-digit\'\n      });\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Filtros\n      professionalFilter.addEventListener(\'change\', filterAppointments);\n      facilityFilter.addEventListener(\'change\', filterAppointments);\n      statusFilter.addEventListener(\'change\', filterAppointments);\n      typeFilter.addEventListener(\'change\', filterAppointments);\n      \n      // Navegação do calendário\n      prevButton.addEventListener(\'click\', previousMonth);\n      todayButton.addEventListener(\'click\', goToToday);\n      nextButton.addEventListener(\'click\', nextMonth);\n      \n      // Alternar visualizações\n      monthViewButton.addEventListener(\'click\', showMonthView);\n      weekViewButton.addEventListener(\'click\', showWeekView);\n      listViewButton.addEventListener(\'click\', showListView);\n      \n      // Novo agendamento\n      newAppointmentButton.addEventListener(\'click\', openNewAppointmentModal);\n      \n      // Fechar modal\n      closeModal.addEventListener(\'click\', closeAppointmentModal);\n      closeViewModal.addEventListener(\'click\', closeViewAppointmentModal);\n      cancelButton.addEventListener(\'click\', closeAppointmentModal);\n      closeViewButton.addEventListener(\'click\', closeViewAppointmentModal);\n      \n      // Modal de background\n      appointmentModal.addEventListener(\'click\', function(e) {\n        if (e.target === appointmentModal) {\n          closeAppointmentModal();\n        }\n      });\n      \n      viewAppointmentModal.addEventListener(\'click\', function(e) {\n        if (e.target === viewAppointmentModal) {\n          closeViewAppointmentModal();\n        }\n      });\n      \n      // Salvar agendamento\n      saveButton.addEventListener(\'click\', saveAppointment);\n      \n      // Editar a partir da visualização\n      editAppointmentButton.addEventListener(\'click\', function() {\n        closeViewAppointmentModal();\n        editAppointment(this.dataset.appointmentId);\n      });\n      \n      // Botão para registrar evolução\n      addEvolutionButton.addEventListener(\'click\', function() {\n        const appointmentId = this.dataset.appointmentId;\n        window.location.href = `/evolutions.html?appointmentId=${appointmentId}`;\n      });\n    }\n    \n    // Carregar profissionais\n    async function loadProfessionals() {\n      try {\n        const response = await fetch(\'/api/professionals\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar profissionais\');\n        }\n        \n        professionals = await response.json();\n        \n        // Preencher select de filtro\n        professionalFilter.innerHTML = \'<option value="">Todos</option>\';\n        professionals.forEach(professional => {\n          const option = document.createElement(\'option\');\n          option.value = professional.id;\n          option.textContent = professional.user.fullName;\n          professionalFilter.appendChild(option);\n        });\n        \n        // Preencher select do formulário\n        const professionalIdSelect = document.getElementById(\'professionalId\');\n        professionalIdSelect.innerHTML = \'<option value="">Selecione o profissional</option>\';\n        professionals.forEach(professional => {\n          const option = document.createElement(\'option\');\n          option.value = professional.id;\n          option.textContent = professional.user.fullName;\n          professionalIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar profissionais:\', error);\n      }\n    }\n    \n    // Carregar unidades\n    async function loadFacilities() {\n      try {\n        const response = await fetch(\'/api/facilities\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar unidades\');\n        }\n        \n        facilities = await response.json();\n        \n        // Preencher select de filtro\n        facilityFilter.innerHTML = \'<option value="">Todas</option>\';\n        facilities.forEach(facility => {\n          const option = document.createElement(\'option\');\n          option.value = facility.id;\n          option.textContent = facility.name;\n          facilityFilter.appendChild(option);\n        });\n        \n        // Carregar salas da primeira unidade por padrão\n        if (facilities.length > 0) {\n          loadRooms(facilities[0].id);\n        }\n      } catch (error) {\n        console.error(\'Erro ao carregar unidades:\', error);\n      }\n    }\n    \n    // Carregar salas\n    async function loadRooms(facilityId) {\n      try {\n        const response = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar salas\');\n        }\n        \n        rooms = await response.json();\n        \n        // Preencher select do formulário\n        const roomIdSelect = document.getElementById(\'roomId\');\n        roomIdSelect.innerHTML = \'<option value="">Selecione a sala</option>\';\n        rooms.forEach(room => {\n          const option = document.createElement(\'option\');\n          option.value = room.id;\n          option.textContent = room.name;\n          roomIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar salas:\', error);\n      }\n    }\n    \n    // Carregar pacientes\n    async function loadPatients() {\n      try {\n        const response = await fetch(\'/api/patients\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar pacientes\');\n        }\n        \n        patients = await response.json();\n        \n        // Preencher select do formulário\n        const patientIdSelect = document.getElementById(\'patientId\');\n        patientIdSelect.innerHTML = \'<option value="">Selecione o paciente</option>\';\n        patients.forEach(patient => {\n          const option = document.createElement(\'option\');\n          option.value = patient.id;\n          option.textContent = patient.fullName;\n          patientIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar pacientes:\', error);\n      }\n    }\n    \n    // Carregar agendamentos\n    async function loadAppointments() {\n      try {\n        const url = new URL(\'/api/appointments\', window.location.origin);\n        \n        // Adicionar parâmetros de data\n        const startDate = new Date(currentYear, currentMonth, 1);\n        const endDate = new Date(currentYear, currentMonth + 1, 0);\n        \n        url.searchParams.append(\'startDate\', startDate.toISOString().split(\'T\')[0]);\n        url.searchParams.append(\'endDate\', endDate.toISOString().split(\'T\')[0]);\n        \n        // Adicionar filtros\n        if (professionalFilter.value) {\n          url.searchParams.append(\'professionalId\', professionalFilter.value);\n        }\n        \n        if (facilityFilter.value) {\n          url.searchParams.append(\'facilityId\', facilityFilter.value);\n        }\n        \n        if (statusFilter.value) {\n          url.searchParams.append(\'status\', statusFilter.value);\n        }\n        \n        if (typeFilter.value) {\n          url.searchParams.append(\'procedureType\', typeFilter.value);\n        }\n        \n        const response = await fetch(url, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar agendamentos\');\n        }\n        \n        appointments = await response.json();\n        \n        // Renderizar calendário com os agendamentos\n        renderCalendar();\n        renderListView();\n      } catch (error) {\n        console.error(\'Erro ao carregar agendamentos:\', error);\n      }\n    }\n    \n    // Filtrar agendamentos\n    function filterAppointments() {\n      loadAppointments();\n    }\n    \n    // Atualizar título do calendário\n    function updateCalendarTitle() {\n      const monthNames = [\n        \'Janeiro\', \'Fevereiro\', \'Março\', \'Abril\', \'Maio\', \'Junho\',\n        \'Julho\', \'Agosto\', \'Setembro\', \'Outubro\', \'Novembro\', \'Dezembro\'\n      ];\n      \n      calendarTitleElement.textContent = `${monthNames[currentMonth]} ${currentYear}`;\n    }\n    \n    // Renderizar calendário\n    function renderCalendar() {\n      const calendarGrid = document.querySelector(\'.calendar-grid\');\n      const daysContainer = document.createElement(\'div\');\n      daysContainer.className = \'calendar-days\';\n      \n      // Remover os dias existentes (exceto cabeçalhos)\n      const existingDays = calendarGrid.querySelectorAll(\'.calendar-day\');\n      existingDays.forEach(day => day.remove());\n      \n      // Obter o primeiro dia do mês\n      const firstDay = new Date(currentYear, currentMonth, 1);\n      const lastDay = new Date(currentYear, currentMonth + 1, 0);\n      \n      // Obter o dia da semana do primeiro dia (0 = Domingo, 1 = Segunda, etc.)\n      const firstDayOfWeek = firstDay.getDay();\n      \n      // Obter o número de dias no mês\n      const daysInMonth = lastDay.getDate();\n      \n      // Obter o último dia do mês anterior\n      const prevMonthLastDay = new Date(currentYear, currentMonth, 0).getDate();\n      \n      // Dia atual\n      const today = new Date();\n      const isCurrentMonth = today.getMonth() === currentMonth && today.getFullYear() === currentYear;\n      \n      // Dias do mês anterior\n      for (let i = 0; i < firstDayOfWeek; i++) {\n        const day = document.createElement(\'div\');\n        day.className = \'calendar-day other-month\';\n        \n        const dayNumber = prevMonthLastDay - firstDayOfWeek + i + 1;\n        day.innerHTML = `<div class="calendar-day-number">${dayNumber}</div>`;\n        \n        calendarGrid.appendChild(day);\n      }\n      \n      // Dias do mês atual\n      for (let i = 1; i <= daysInMonth; i++) {\n        const day = document.createElement(\'div\');\n        day.className = \'calendar-day\';\n        \n        // Se for hoje\n        if (isCurrentMonth && i === today.getDate()) {\n          day.classList.add(\'today\');\n        }\n        \n        day.innerHTML = `<div class="calendar-day-number">${i}</div>`;\n        \n        // Adicionar agendamentos para este dia\n        const date = new Date(currentYear, currentMonth, i);\n        const dateString = date.toISOString().split(\'T\')[0];\n        \n        const dayAppointments = appointments.filter(appointment => {\n          const appointmentDate = new Date(appointment.startTime);\n          return appointmentDate.toISOString().split(\'T\')[0] === dateString;\n        });\n        \n        dayAppointments.forEach(appointment => {\n          const appointmentElement = document.createElement(\'div\');\n          appointmentElement.className = `appointment ${appointment.status}`;\n          \n          const startTime = new Date(appointment.startTime);\n          const timeString = startTime.toLocaleTimeString(\'pt-BR\', { hour: \'2-digit\', minute: \'2-digit\' });\n          \n          // Encontrar dados relacionados\n          const patient = patients.find(p => p.id === appointment.patientId);\n          const professional = professionals.find(p => p.id === appointment.professionalId);\n          \n          appointmentElement.textContent = `${timeString} - ${patient ? patient.fullName : \'Paciente\'} (${translateProcedureType(appointment.procedureType)})`;\n          appointmentElement.title = `${timeString} - ${patient ? patient.fullName : \'Paciente\'} com ${professional ? professional.user.fullName : \'Profissional\'}`;\n          \n          // Adicionar evento de clique\n          appointmentElement.dataset.id = appointment.id;\n          appointmentElement.addEventListener(\'click\', () => viewAppointment(appointment.id));\n          \n          day.appendChild(appointmentElement);\n        });\n        \n        calendarGrid.appendChild(day);\n      }\n      \n      // Preencher o resto da grade com dias do próximo mês\n      const totalDaysDisplayed = firstDayOfWeek + daysInMonth;\n      const remainingDays = 42 - totalDaysDisplayed; // 6 linhas * 7 dias\n      \n      for (let i = 1; i <= remainingDays; i++) {\n        const day = document.createElement(\'div\');\n        day.className = \'calendar-day other-month\';\n        day.innerHTML = `<div class="calendar-day-number">${i}</div>`;\n        calendarGrid.appendChild(day);\n      }\n    }\n    \n    // Renderizar visualização em lista\n    function renderListView() {\n      const tbody = document.getElementById(\'appointmentsTableBody\');\n      tbody.innerHTML = \'\';\n      \n      if (appointments.length === 0) {\n        const row = document.createElement(\'tr\');\n        row.innerHTML = `\n          <td colspan="7">\n            <div class="empty-state">\n              <div class="empty-icon">📅</div>\n              <div class="empty-text">Nenhum agendamento encontrado para o período selecionado.</div>\n              <button class="button button-primary" id="emptyNewAppointmentBtn">Novo Agendamento</button>\n            </div>\n          </td>\n        `;\n        tbody.appendChild(row);\n        \n        document.getElementById(\'emptyNewAppointmentBtn\')?.addEventListener(\'click\', openNewAppointmentModal);\n        return;\n      }\n      \n      // Ordenar agendamentos por data\n      const sortedAppointments = [...appointments].sort((a, b) => {\n        return new Date(a.startTime) - new Date(b.startTime);\n      });\n      \n      sortedAppointments.forEach(appointment => {\n        const row = document.createElement(\'tr\');\n        \n        // Encontrar dados relacionados\n        const patient = patients.find(p => p.id === appointment.patientId);\n        const professional = professionals.find(p => p.id === appointment.professionalId);\n        const room = rooms.find(r => r.id === appointment.roomId);\n        \n        row.innerHTML = `\n          <td>${formatDateTime(appointment.startTime)}</td>\n          <td>${patient ? patient.fullName : \'N/A\'}</td>\n          <td>${professional ? professional.user.fullName : \'N/A\'}</td>\n          <td>${translateProcedureType(appointment.procedureType)}</td>\n          <td>${room ? room.name : \'N/A\'}</td>\n          <td><span class="status status-${appointment.status}">${translateStatus(appointment.status)}</span></td>\n          <td>\n            <button class="action-button view-appointment" data-id="${appointment.id}">Visualizar</button>\n            <button class="action-button edit-appointment" data-id="${appointment.id}">Editar</button>\n          </td>\n        `;\n        \n        tbody.appendChild(row);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-appointment\').forEach(button => {\n        button.addEventListener(\'click\', () => viewAppointment(button.dataset.id));\n      });\n      \n      document.querySelectorAll(\'.edit-appointment\').forEach(button => {\n        button.addEventListener(\'click\', () => editAppointment(button.dataset.id));\n      });\n    }\n    \n    // Navegar para o mês anterior\n    function previousMonth() {\n      currentMonth--;\n      if (currentMonth < 0) {\n        currentMonth = 11;\n        currentYear--;\n      }\n      updateCalendarTitle();\n      loadAppointments();\n    }\n    \n    // Navegar para o mês atual\n    function goToToday() {\n      const today = new Date();\n      currentMonth = today.getMonth();\n      currentYear = today.getFullYear();\n      updateCalendarTitle();\n      loadAppointments();\n    }\n    \n    // Navegar para o próximo mês\n    function nextMonth() {\n      currentMonth++;\n      if (currentMonth > 11) {\n        currentMonth = 0;\n        currentYear++;\n      }\n      updateCalendarTitle();\n      loadAppointments();\n    }\n    \n    // Mostrar visualização de mês\n    function showMonthView() {\n      monthViewButton.classList.add(\'active\');\n      weekViewButton.classList.remove(\'active\');\n      listViewButton.classList.remove(\'active\');\n      \n      monthViewElement.style.display = \'block\';\n      weekViewElement.style.display = \'none\';\n      listViewElement.style.display = \'none\';\n    }\n    \n    // Mostrar visualização de semana\n    function showWeekView() {\n      monthViewButton.classList.remove(\'active\');\n      weekViewButton.classList.add(\'active\');\n      listViewButton.classList.remove(\'active\');\n      \n      monthViewElement.style.display = \'none\';\n      weekViewElement.style.display = \'block\';\n      listViewElement.style.display = \'none\';\n      \n      // Implementar visualização da semana (simplificado)\n      alert(\'Visualização de semana será implementada em breve.\');\n      showMonthView(); // Voltar para visualização de mês por enquanto\n    }\n    \n    // Mostrar visualização de lista\n    function showListView() {\n      monthViewButton.classList.remove(\'active\');\n      weekViewButton.classList.remove(\'active\');\n      listViewButton.classList.add(\'active\');\n      \n      monthViewElement.style.display = \'none\';\n      weekViewElement.style.display = \'none\';\n      listViewElement.style.display = \'block\';\n    }\n    \n    // Abrir modal para novo agendamento\n    function openNewAppointmentModal() {\n      modalTitle.textContent = \'Novo Agendamento\';\n      appointmentForm.reset();\n      appointmentIdInput.value = \'\';\n      \n      // Carregar dados necessários\n      if (patients.length === 0) loadPatients();\n      if (professionals.length === 0) loadProfessionals();\n      if (facilities.length > 0 && rooms.length === 0) loadRooms(facilities[0].id);\n      \n      // Definir status padrão como "Agendado"\n      document.getElementById(\'status\').value = \'scheduled\';\n      \n      // Definir data padrão como hoje\n      const today = new Date();\n      const dateString = today.toISOString().split(\'T\')[0];\n      document.getElementById(\'appointmentDate\').value = dateString;\n      \n      appointmentModal.classList.add(\'active\');\n    }\n    \n    // Fechar modal de agendamento\n    function closeAppointmentModal() {\n      appointmentModal.classList.remove(\'active\');\n    }\n    \n    // Fechar modal de visualização\n    function closeViewAppointmentModal() {\n      viewAppointmentModal.classList.remove(\'active\');\n    }\n    \n    // Editar agendamento\n    async function editAppointment(appointmentId) {\n      try {\n        modalTitle.textContent = \'Editar Agendamento\';\n        \n        // Carregar dados necessários\n        if (patients.length === 0) await loadPatients();\n        if (professionals.length === 0) await loadProfessionals();\n        if (facilities.length > 0 && rooms.length === 0) await loadRooms(facilities[0].id);\n        \n        const appointment = appointments.find(a => a.id == appointmentId);\n        \n        if (!appointment) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/appointments/${appointmentId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados do agendamento\');\n          }\n          \n          const appointmentData = await response.json();\n          fillAppointmentForm(appointmentData);\n        } else {\n          fillAppointmentForm(appointment);\n        }\n        \n        appointmentModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar agendamento:\', error);\n        alert(\'Erro ao carregar dados do agendamento. Tente novamente.\');\n      }\n    }\n    \n    // Preencher formulário com dados do agendamento\n    function fillAppointmentForm(appointment) {\n      appointmentIdInput.value = appointment.id;\n      document.getElementById(\'patientId\').value = appointment.patientId || \'\';\n      document.getElementById(\'professionalId\').value = appointment.professionalId || \'\';\n      \n      // Data e hora\n      const startTime = new Date(appointment.startTime);\n      const endTime = new Date(appointment.endTime);\n      \n      document.getElementById(\'appointmentDate\').value = startTime.toISOString().split(\'T\')[0];\n      document.getElementById(\'startTime\').value = startTime.toLocaleTimeString(\'en-GB\', { hour: \'2-digit\', minute: \'2-digit\' });\n      document.getElementById(\'endTime\').value = endTime.toLocaleTimeString(\'en-GB\', { hour: \'2-digit\', minute: \'2-digit\' });\n      \n      document.getElementById(\'procedureType\').value = appointment.procedureType || \'\';\n      document.getElementById(\'roomId\').value = appointment.roomId || \'\';\n      document.getElementById(\'status\').value = appointment.status || \'scheduled\';\n      document.getElementById(\'notes\').value = appointment.notes || \'\';\n    }\n    \n    // Visualizar agendamento\n    async function viewAppointment(appointmentId) {\n      try {\n        // Carregar dados necessários\n        if (patients.length === 0) await loadPatients();\n        if (professionals.length === 0) await loadProfessionals();\n        \n        const appointment = appointments.find(a => a.id == appointmentId);\n        \n        if (!appointment) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/appointments/${appointmentId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados do agendamento\');\n          }\n          \n          const appointmentData = await response.json();\n          displayAppointmentDetails(appointmentData);\n        } else {\n          displayAppointmentDetails(appointment);\n        }\n        \n        // Configurar botão de edição\n        editAppointmentButton.dataset.appointmentId = appointmentId;\n        \n        viewAppointmentModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar agendamento:\', error);\n        alert(\'Erro ao carregar dados do agendamento. Tente novamente.\');\n      }\n    }\n    \n    // Exibir detalhes do agendamento\n    function displayAppointmentDetails(appointment) {\n      // Encontrar dados relacionados\n      const patient = patients.find(p => p.id === appointment.patientId);\n      const professional = professionals.find(p => p.id === appointment.professionalId);\n      const room = rooms.find(r => r.id === appointment.roomId);\n      \n      document.getElementById(\'viewPatient\').textContent = patient ? patient.fullName : \'N/A\';\n      document.getElementById(\'viewProfessional\').textContent = professional ? professional.user.fullName : \'N/A\';\n      \n      // Data e hora\n      const startTime = new Date(appointment.startTime);\n      const endTime = new Date(appointment.endTime);\n      \n      document.getElementById(\'viewDate\').textContent = formatDate(appointment.startTime);\n      document.getElementById(\'viewTime\').textContent = `${formatTime(appointment.startTime)} até ${formatTime(appointment.endTime)}`;\n      \n      document.getElementById(\'viewProcedureType\').textContent = translateProcedureType(appointment.procedureType);\n      document.getElementById(\'viewRoom\').textContent = room ? room.name : \'N/A\';\n      \n      const statusElement = document.getElementById(\'viewStatus\');\n      statusElement.textContent = translateStatus(appointment.status);\n      statusElement.className = `status status-${appointment.status}`;\n      \n      document.getElementById(\'viewNotes\').textContent = appointment.notes || \'Nenhuma observação\';\n      \n      // Configurar o botão de evolução (visível apenas quando status é "atendido")\n      const evolutionButton = document.getElementById(\'addEvolutionButton\');\n      if (appointment.status === \'attended\') {\n        evolutionButton.style.display = \'block\';\n        evolutionButton.dataset.appointmentId = appointment.id;\n      } else {\n        evolutionButton.style.display = \'none\';\n      }\n    }\n    \n    // Salvar agendamento\n    async function saveAppointment() {\n      try {\n        // Validação básica\n        const patientId = document.getElementById(\'patientId\').value;\n        const professionalId = document.getElementById(\'professionalId\').value;\n        const appointmentDate = document.getElementById(\'appointmentDate\').value;\n        const startTime = document.getElementById(\'startTime\').value;\n        const endTime = document.getElementById(\'endTime\').value;\n        const procedureType = document.getElementById(\'procedureType\').value;\n        const roomId = document.getElementById(\'roomId\').value;\n        \n        if (!patientId || !professionalId || !appointmentDate || !startTime || !endTime || !procedureType || !roomId) {\n          alert(\'Por favor, preencha todos os campos obrigatórios.\');\n          return;\n        }\n        \n        // Construir datas ISO\n        const startDateTime = new Date(`${appointmentDate}T${startTime}`);\n        const endDateTime = new Date(`${appointmentDate}T${endTime}`);\n        \n        // Verificar se a data de término é posterior à data de início\n        if (endDateTime <= startDateTime) {\n          alert(\'A hora de término deve ser posterior à hora de início.\');\n          return;\n        }\n        \n        // Preparar dados do agendamento\n        const appointmentData = {\n          patientId: parseInt(patientId),\n          professionalId: parseInt(professionalId),\n          startTime: startDateTime.toISOString(),\n          endTime: endDateTime.toISOString(),\n          procedureType,\n          roomId: parseInt(roomId),\n          status: document.getElementById(\'status\').value,\n          notes: document.getElementById(\'notes\').value\n        };\n        \n        const appointmentId = appointmentIdInput.value;\n        let response;\n        \n        if (appointmentId) {\n          // Editar agendamento existente\n          response = await fetch(`/api/appointments/${appointmentId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(appointmentData)\n          });\n        } else {\n          // Adicionar novo agendamento\n          response = await fetch(\'/api/appointments\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(appointmentData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || \'Erro ao salvar agendamento\');\n        }\n        \n        // Fechar modal e recarregar lista\n        closeAppointmentModal();\n        loadAppointments();\n        \n        alert(appointmentId ? \'Agendamento atualizado com sucesso!\' : \'Agendamento adicionado com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar agendamento:\', error);\n        alert(`Erro ao salvar agendamento: ${error.message}`);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n   $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', () => {\n      checkAuth();\n      setupEventListeners();\n      \n      const today = new Date();\n      currentMonth = today.getMonth();\n      currentYear = today.getFullYear();\n      \n      // Iniciar calendário\n      updateCalendarTitle();\n      renderCalendar();\n      \n      // Carregar filtros\n      loadProfessionals();\n      loadFacilities();\n      \n      // Carregar agendamentos\n      loadAppointments();\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const calendarTitleElement = document.getElementById(\'calendarTitle\');\n    const prevButton = document.getElementById(\'prevButton\');\n    const todayButton = document.getElementById(\'todayButton\');\n    const nextButton = document.getElementById(\'nextButton\');\n    const monthViewButton = document.getElementById(\'monthViewButton\');\n    const weekViewButton = document.getElementById(\'weekViewButton\');\n    const listViewButton = document.getElementById(\'listViewButton\');\n    const monthViewElement = document.getElementById(\'monthView\');\n    const weekViewElement = document.getElementById(\'weekView\');\n    const listViewElement = document.getElementById(\'listView\');\n    const newAppointmentButton = document.getElementById(\'newAppointmentButton\');\n    const appointmentModal = document.getElementById(\'appointmentModal\');\n    const viewAppointmentModal = document.getElementById(\'viewAppointmentModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const appointmentForm = document.getElementById(\'appointmentForm\');\n    const appointmentIdInput = document.getElementById(\'appointmentId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    const closeViewButton = document.getElementById(\'closeViewButton\');\n    const editAppointmentButton = document.getElementById(\'editAppointmentButton\');\n    const addEvolutionButton = document.getElementById(\'addEvolutionButton\');\n    const professionalFilter = document.getElementById(\'professionalFilter\');\n    const facilityFilter = document.getElementById(\'facilityFilter\');\n    const statusFilter = document.getElementById(\'statusFilter\');\n    const typeFilter = document.getElementById(\'typeFilter\');\n    \n    // Variáveis globais para o calendário\n    let currentMonth;\n    let currentYear;\n    let appointments = [];\n    let professionals = [];\n    let patients = [];\n    let facilities = [];\n    let rooms = [];\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        const userData = await response.json();\n        displayUserData(userData);\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir status\n    function translateStatus(status) {\n      const translations = {\n        \'scheduled\': \'Agendado\',\n        \'confirmed\': \'Confirmado\',\n        \'completed\': \'Concluído\',\n        \'attended\': \'Atendido\',\n        \'cancelled\': \'Cancelado\',\n        \'no_show\': \'Não compareceu\',\n        \'pending\': \'Pendente\'\n      };\n      \n      return translations[status] || status;\n    }\n    \n    // Traduzir tipo de procedimento\n    function translateProcedureType(type) {\n      const translations = {\n        \'psychology_aba\': \'Psicologia - ABA\',\n        \'psychology_cbt\': \'Psicologia - TCC\',\n        \'speech_therapy\': \'Fonoaudiologia\',\n        \'physical_therapy\': \'Fisioterapia\',\n        \'occupational_therapy\': \'Terapia Ocupacional\',\n        \'evaluation\': \'Avaliação\',\n        \'other\': \'Outro\',\n        \'free_time\': \'Tempo Livre\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Formatar data\n    function formatDate(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleDateString(\'pt-BR\');\n    }\n    \n    // Formatar hora\n    function formatTime(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleTimeString(\'pt-BR\', { hour: \'2-digit\', minute: \'2-digit\' });\n    }\n    \n    // Formatar data e hora\n    function formatDateTime(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleString(\'pt-BR\', {\n        day: \'2-digit\',\n        month: \'2-digit\',\n        year: \'numeric\',\n        hour: \'2-digit\',\n        minute: \'2-digit\'\n      });\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Filtros\n      professionalFilter.addEventListener(\'change\', filterAppointments);\n      facilityFilter.addEventListener(\'change\', filterAppointments);\n      statusFilter.addEventListener(\'change\', filterAppointments);\n      typeFilter.addEventListener(\'change\', filterAppointments);\n      \n      // Navegação do calendário\n      prevButton.addEventListener(\'click\', previousMonth);\n      todayButton.addEventListener(\'click\', goToToday);\n      nextButton.addEventListener(\'click\', nextMonth);\n      \n      // Alternar visualizações\n      monthViewButton.addEventListener(\'click\', showMonthView);\n      weekViewButton.addEventListener(\'click\', showWeekView);\n      listViewButton.addEventListener(\'click\', showListView);\n      \n      // Novo agendamento\n      newAppointmentButton.addEventListener(\'click\', openNewAppointmentModal);\n      \n      // Fechar modal\n      closeModal.addEventListener(\'click\', closeAppointmentModal);\n      closeViewModal.addEventListener(\'click\', closeViewAppointmentModal);\n      cancelButton.addEventListener(\'click\', closeAppointmentModal);\n      closeViewButton.addEventListener(\'click\', closeViewAppointmentModal);\n      \n      // Modal de background\n      appointmentModal.addEventListener(\'click\', function(e) {\n        if (e.target === appointmentModal) {\n          closeAppointmentModal();\n        }\n      });\n      \n      viewAppointmentModal.addEventListener(\'click\', function(e) {\n        if (e.target === viewAppointmentModal) {\n          closeViewAppointmentModal();\n        }\n      });\n      \n      // Salvar agendamento\n      saveButton.addEventListener(\'click\', saveAppointment);\n      \n      // Editar a partir da visualização\n      editAppointmentButton.addEventListener(\'click\', function() {\n        closeViewAppointmentModal();\n        editAppointment(this.dataset.appointmentId);\n      });\n      \n      // Botão para registrar evolução\n      addEvolutionButton.addEventListener(\'click\', function() {\n        const appointmentId = this.dataset.appointmentId;\n        window.location.href = `/evolutions.html?appointmentId=${appointmentId}`;\n      });\n    }\n    \n    // Carregar profissionais\n    async function loadProfessionals() {\n      try {\n        const response = await fetch(\'/api/professionals\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar profissionais\');\n        }\n        \n        professionals = await response.json();\n        \n        // Preencher select de filtro\n        professionalFilter.innerHTML = \'<option value="">Todos</option>\';\n        professionals.forEach(professional => {\n          const option = document.createElement(\'option\');\n          option.value = professional.id;\n          option.textContent = professional.user.fullName;\n          professionalFilter.appendChild(option);\n        });\n        \n        // Preencher select do formulário\n        const professionalIdSelect = document.getElementById(\'professionalId\');\n        professionalIdSelect.innerHTML = \'<option value="">Selecione o profissional</option>\';\n        professionals.forEach(professional => {\n          const option = document.createElement(\'option\');\n          option.value = professional.id;\n          option.textContent = professional.user.fullName;\n          professionalIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar profissionais:\', error);\n      }\n    }\n    \n    // Carregar unidades\n    async function loadFacilities() {\n      try {\n        const response = await fetch(\'/api/facilities\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar unidades\');\n        }\n        \n        facilities = await response.json();\n        \n        // Preencher select de filtro\n        facilityFilter.innerHTML = \'<option value="">Todas</option>\';\n        facilities.forEach(facility => {\n          const option = document.createElement(\'option\');\n          option.value = facility.id;\n          option.textContent = facility.name;\n          facilityFilter.appendChild(option);\n        });\n        \n        // Carregar salas da primeira unidade por padrão\n        if (facilities.length > 0) {\n          loadRooms(facilities[0].id);\n        }\n      } catch (error) {\n        console.error(\'Erro ao carregar unidades:\', error);\n      }\n    }\n    \n    // Carregar salas\n    async function loadRooms(facilityId) {\n      try {\n        const response = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar salas\');\n        }\n        \n        rooms = await response.json();\n        \n        // Preencher select do formulário\n        const roomIdSelect = document.getElementById(\'roomId\');\n        roomIdSelect.innerHTML = \'<option value="">Selecione a sala</option>\';\n        rooms.forEach(room => {\n          const option = document.createElement(\'option\');\n          option.value = room.id;\n          option.textContent = room.name;\n          roomIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar salas:\', error);\n      }\n    }\n    \n    // Carregar pacientes\n    async function loadPatients() {\n      try {\n        const response = await fetch(\'/api/patients\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar pacientes\');\n        }\n        \n        patients = await response.json();\n        \n        // Preencher select do formulário\n        const patientIdSelect = document.getElementById(\'patientId\');\n        patientIdSelect.innerHTML = \'<option value="">Selecione o paciente</option>\';\n        patients.forEach(patient => {\n          const option = document.createElement(\'option\');\n          option.value = patient.id;\n          option.textContent = patient.fullName;\n          patientIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar pacientes:\', error);\n      }\n    }\n    \n    // Carregar agendamentos\n    async function loadAppointments() {\n      try {\n        const url = new URL(\'/api/appointments\', window.location.origin);\n        \n        // Adicionar parâmetros de data\n        const startDate = new Date(currentYear, currentMonth, 1);\n        const endDate = new Date(currentYear, currentMonth + 1, 0);\n        \n        url.searchParams.append(\'startDate\', startDate.toISOString().split(\'T\')[0]);\n        url.searchParams.append(\'endDate\', endDate.toISOString().split(\'T\')[0]);\n        \n        // Adicionar filtros\n        if (professionalFilter.value) {\n          url.searchParams.append(\'professionalId\', professionalFilter.value);\n        }\n        \n        if (facilityFilter.value) {\n          url.searchParams.append(\'facilityId\', facilityFilter.value);\n        }\n        \n        if (statusFilter.value) {\n          url.searchParams.append(\'status\', statusFilter.value);\n        }\n        \n        if (typeFilter.value) {\n          url.searchParams.append(\'procedureType\', typeFilter.value);\n        }\n        \n        const response = await fetch(url, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar agendamentos\');\n        }\n        \n        appointments = await response.json();\n        \n        // Renderizar calendário com os agendamentos\n        renderCalendar();\n        renderListView();\n      } catch (error) {\n        console.error(\'Erro ao carregar agendamentos:\', error);\n      }\n    }\n    \n    // Filtrar agendamentos\n    function filterAppointments() {\n      loadAppointments();\n    }\n    \n    // Atualizar título do calendário\n    function updateCalendarTitle() {\n      const monthNames = [\n        \'Janeiro\', \'Fevereiro\', \'Março\', \'Abril\', \'Maio\', \'Junho\',\n        \'Julho\', \'Agosto\', \'Setembro\', \'Outubro\', \'Novembro\', \'Dezembro\'\n      ];\n      \n      calendarTitleElement.textContent = `${monthNames[currentMonth]} ${currentYear}`;\n    }\n    \n    // Renderizar calendário\n    function renderCalendar() {\n      const calendarGrid = document.querySelector(\'.calendar-grid\');\n      const daysContainer = document.createElement(\'div\');\n      daysContainer.className = \'calendar-days\';\n      \n      // Remover os dias existentes (exceto cabeçalhos)\n      const existingDays = calendarGrid.querySelectorAll(\'.calendar-day\');\n      existingDays.forEach(day => day.remove());\n      \n      // Obter o primeiro dia do mês\n      const firstDay = new Date(currentYear, currentMonth, 1);\n      const lastDay = new Date(currentYear, currentMonth + 1, 0);\n      \n      // Obter o dia da semana do primeiro dia (0 = Domingo, 1 = Segunda, etc.)\n      const firstDayOfWeek = firstDay.getDay();\n      \n      // Obter o número de dias no mês\n      const daysInMonth = lastDay.getDate();\n      \n      // Obter o último dia do mês anterior\n      const prevMonthLastDay = new Date(currentYear, currentMonth, 0).getDate();\n      \n      // Dia atual\n      const today = new Date();\n      const isCurrentMonth = today.getMonth() === currentMonth && today.getFullYear() === currentYear;\n      \n      // Dias do mês anterior\n      for (let i = 0; i < firstDayOfWeek; i++) {\n        const day = document.createElement(\'div\');\n        day.className = \'calendar-day other-month\';\n        \n        const dayNumber = prevMonthLastDay - firstDayOfWeek + i + 1;\n        day.innerHTML = `<div class="calendar-day-number">${dayNumber}</div>`;\n        \n        calendarGrid.appendChild(day);\n      }\n      \n      // Dias do mês atual\n      for (let i = 1; i <= daysInMonth; i++) {\n        const day = document.createElement(\'div\');\n        day.className = \'calendar-day\';\n        \n        // Se for hoje\n        if (isCurrentMonth && i === today.getDate()) {\n          day.classList.add(\'today\');\n        }\n        \n        day.innerHTML = `<div class="calendar-day-number">${i}</div>`;\n        \n        // Adicionar agendamentos para este dia\n        const date = new Date(currentYear, currentMonth, i);\n        const dateString = date.toISOString().split(\'T\')[0];\n        \n        const dayAppointments = appointments.filter(appointment => {\n          const appointmentDate = new Date(appointment.startTime);\n          return appointmentDate.toISOString().split(\'T\')[0] === dateString;\n        });\n        \n        dayAppointments.forEach(appointment => {\n          const appointmentElement = document.createElement(\'div\');\n          appointmentElement.className = `appointment ${appointment.status}`;\n          \n          const startTime = new Date(appointment.startTime);\n          const timeString = startTime.toLocaleTimeString(\'pt-BR\', { hour: \'2-digit\', minute: \'2-digit\' });\n          \n          // Encontrar dados relacionados\n          const patient = patients.find(p => p.id === appointment.patientId);\n          const professional = professionals.find(p => p.id === appointment.professionalId);\n          \n          appointmentElement.textContent = `${timeString} - ${patient ? patient.fullName : \'Paciente\'} (${translateProcedureType(appointment.procedureType)})`;\n          appointmentElement.title = `${timeString} - ${patient ? patient.fullName : \'Paciente\'} com ${professional ? professional.user.fullName : \'Profissional\'}`;\n          \n          // Adicionar evento de clique\n          appointmentElement.dataset.id = appointment.id;\n          appointmentElement.addEventListener(\'click\', () => viewAppointment(appointment.id));\n          \n          day.appendChild(appointmentElement);\n        });\n        \n        calendarGrid.appendChild(day);\n      }\n      \n      // Preencher o resto da grade com dias do próximo mês\n      const totalDaysDisplayed = firstDayOfWeek + daysInMonth;\n      const remainingDays = 42 - totalDaysDisplayed; // 6 linhas * 7 dias\n      \n      for (let i = 1; i <= remainingDays; i++) {\n        const day = document.createElement(\'div\');\n        day.className = \'calendar-day other-month\';\n        day.innerHTML = `<div class="calendar-day-number">${i}</div>`;\n        calendarGrid.appendChild(day);\n      }\n    }\n    \n    // Renderizar visualização em lista\n    function renderListView() {\n      const tbody = document.getElementById(\'appointmentsTableBody\');\n      tbody.innerHTML = \'\';\n      \n      if (appointments.length === 0) {\n        const row = document.createElement(\'tr\');\n        row.innerHTML = `\n          <td colspan="7">\n            <div class="empty-state">\n              <div class="empty-icon">📅</div>\n              <div class="empty-text">Nenhum agendamento encontrado para o período selecionado.</div>\n              <button class="button button-primary" id="emptyNewAppointmentBtn">Novo Agendamento</button>\n            </div>\n          </td>\n        `;\n        tbody.appendChild(row);\n        \n        document.getElementById(\'emptyNewAppointmentBtn\')?.addEventListener(\'click\', openNewAppointmentModal);\n        return;\n      }\n      \n      // Ordenar agendamentos por data\n      const sortedAppointments = [...appointments].sort((a, b) => {\n        return new Date(a.startTime) - new Date(b.startTime);\n      });\n      \n      sortedAppointments.forEach(appointment => {\n        const row = document.createElement(\'tr\');\n        \n        // Encontrar dados relacionados\n        const patient = patients.find(p => p.id === appointment.patientId);\n        const professional = professionals.find(p => p.id === appointment.professionalId);\n        const room = rooms.find(r => r.id === appointment.roomId);\n        \n        row.innerHTML = `\n          <td>${formatDateTime(appointment.startTime)}</td>\n          <td>${patient ? patient.fullName : \'N/A\'}</td>\n          <td>${professional ? professional.user.fullName : \'N/A\'}</td>\n          <td>${translateProcedureType(appointment.procedureType)}</td>\n          <td>${room ? room.name : \'N/A\'}</td>\n          <td><span class="status status-${appointment.status}">${translateStatus(appointment.status)}</span></td>\n          <td>\n            <button class="action-button view-appointment" data-id="${appointment.id}">Visualizar</button>\n            <button class="action-button edit-appointment" data-id="${appointment.id}">Editar</button>\n          </td>\n        `;\n        \n        tbody.appendChild(row);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-appointment\').forEach(button => {\n        button.addEventListener(\'click\', () => viewAppointment(button.dataset.id));\n      });\n      \n      document.querySelectorAll(\'.edit-appointment\').forEach(button => {\n        button.addEventListener(\'click\', () => editAppointment(button.dataset.id));\n      });\n    }\n    \n    // Navegar para o mês anterior\n    function previousMonth() {\n      currentMonth--;\n      if (currentMonth < 0) {\n        currentMonth = 11;\n        currentYear--;\n      }\n      updateCalendarTitle();\n      loadAppointments();\n    }\n    \n    // Navegar para o mês atual\n    function goToToday() {\n      const today = new Date();\n      currentMonth = today.getMonth();\n      currentYear = today.getFullYear();\n      updateCalendarTitle();\n      loadAppointments();\n    }\n    \n    // Navegar para o próximo mês\n    function nextMonth() {\n      currentMonth++;\n      if (currentMonth > 11) {\n        currentMonth = 0;\n        currentYear++;\n      }\n      updateCalendarTitle();\n      loadAppointments();\n    }\n    \n    // Mostrar visualização de mês\n    function showMonthView() {\n      monthViewButton.classList.add(\'active\');\n      weekViewButton.classList.remove(\'active\');\n      listViewButton.classList.remove(\'active\');\n      \n      monthViewElement.style.display = \'block\';\n      weekViewElement.style.display = \'none\';\n      listViewElement.style.display = \'none\';\n    }\n    \n    // Mostrar visualização de semana\n    function showWeekView() {\n      monthViewButton.classList.remove(\'active\');\n      weekViewButton.classList.add(\'active\');\n      listViewButton.classList.remove(\'active\');\n      \n      monthViewElement.style.display = \'none\';\n      weekViewElement.style.display = \'block\';\n      listViewElement.style.display = \'none\';\n      \n      // Implementar visualização da semana (simplificado)\n      alert(\'Visualização de semana será implementada em breve.\');\n      showMonthView(); // Voltar para visualização de mês por enquanto\n    }\n    \n    // Mostrar visualização de lista\n    function showListView() {\n      monthViewButton.classList.remove(\'active\');\n      weekViewButton.classList.remove(\'active\');\n      listViewButton.classList.add(\'active\');\n      \n      monthViewElement.style.display = \'none\';\n      weekViewElement.style.display = \'none\';\n      listViewElement.style.display = \'block\';\n    }\n    \n    // Abrir modal para novo agendamento\n    function openNewAppointmentModal() {\n      modalTitle.textContent = \'Novo Agendamento\';\n      appointmentForm.reset();\n      appointmentIdInput.value = \'\';\n      \n      // Carregar dados necessários\n      if (patients.length === 0) loadPatients();\n      if (professionals.length === 0) loadProfessionals();\n      if (facilities.length > 0 && rooms.length === 0) loadRooms(facilities[0].id);\n      \n      // Definir status padrão como "Agendado"\n      document.getElementById(\'status\').value = \'scheduled\';\n      \n      // Definir data padrão como hoje\n      const today = new Date();\n      const dateString = today.toISOString().split(\'T\')[0];\n      document.getElementById(\'appointmentDate\').value = dateString;\n      \n      appointmentModal.classList.add(\'active\');\n    }\n    \n    // Fechar modal de agendamento\n    function closeAppointmentModal() {\n      appointmentModal.classList.remove(\'active\');\n    }\n    \n    // Fechar modal de visualização\n    function closeViewAppointmentModal() {\n      viewAppointmentModal.classList.remove(\'active\');\n    }\n    \n    // Editar agendamento\n    async function editAppointment(appointmentId) {\n      try {\n        modalTitle.textContent = \'Editar Agendamento\';\n        \n        // Carregar dados necessários\n        if (patients.length === 0) await loadPatients();\n        if (professionals.length === 0) await loadProfessionals();\n        if (facilities.length > 0 && rooms.length === 0) await loadRooms(facilities[0].id);\n        \n        const appointment = appointments.find(a => a.id == appointmentId);\n        \n        if (!appointment) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/appointments/${appointmentId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados do agendamento\');\n          }\n          \n          const appointmentData = await response.json();\n          fillAppointmentForm(appointmentData);\n        } else {\n          fillAppointmentForm(appointment);\n        }\n        \n        appointmentModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar agendamento:\', error);\n        alert(\'Erro ao carregar dados do agendamento. Tente novamente.\');\n      }\n    }\n    \n    // Preencher formulário com dados do agendamento\n    function fillAppointmentForm(appointment) {\n      appointmentIdInput.value = appointment.id;\n      document.getElementById(\'patientId\').value = appointment.patientId || \'\';\n      document.getElementById(\'professionalId\').value = appointment.professionalId || \'\';\n      \n      // Data e hora\n      const startTime = new Date(appointment.startTime);\n      const endTime = new Date(appointment.endTime);\n      \n      document.getElementById(\'appointmentDate\').value = startTime.toISOString().split(\'T\')[0];\n      document.getElementById(\'startTime\').value = startTime.toLocaleTimeString(\'en-GB\', { hour: \'2-digit\', minute: \'2-digit\' });\n      document.getElementById(\'endTime\').value = endTime.toLocaleTimeString(\'en-GB\', { hour: \'2-digit\', minute: \'2-digit\' });\n      \n      document.getElementById(\'procedureType\').value = appointment.procedureType || \'\';\n      document.getElementById(\'roomId\').value = appointment.roomId || \'\';\n      document.getElementById(\'status\').value = appointment.status || \'scheduled\';\n      document.getElementById(\'notes\').value = appointment.notes || \'\';\n    }\n    \n    // Visualizar agendamento\n    async function viewAppointment(appointmentId) {\n      try {\n        // Carregar dados necessários\n        if (patients.length === 0) await loadPatients();\n        if (professionals.length === 0) await loadProfessionals();\n        \n        const appointment = appointments.find(a => a.id == appointmentId);\n        \n        if (!appointment) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/appointments/${appointmentId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados do agendamento\');\n          }\n          \n          const appointmentData = await response.json();\n          displayAppointmentDetails(appointmentData);\n        } else {\n          displayAppointmentDetails(appointment);\n        }\n        \n        // Configurar botão de edição\n        editAppointmentButton.dataset.appointmentId = appointmentId;\n        \n        viewAppointmentModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar agendamento:\', error);\n        alert(\'Erro ao carregar dados do agendamento. Tente novamente.\');\n      }\n    }\n    \n    // Exibir detalhes do agendamento\n    function displayAppointmentDetails(appointment) {\n      // Encontrar dados relacionados\n      const patient = patients.find(p => p.id === appointment.patientId);\n      const professional = professionals.find(p => p.id === appointment.professionalId);\n      const room = rooms.find(r => r.id === appointment.roomId);\n      \n      document.getElementById(\'viewPatient\').textContent = patient ? patient.fullName : \'N/A\';\n      document.getElementById(\'viewProfessional\').textContent = professional ? professional.user.fullName : \'N/A\';\n      \n      // Data e hora\n      const startTime = new Date(appointment.startTime);\n      const endTime = new Date(appointment.endTime);\n      \n      document.getElementById(\'viewDate\').textContent = formatDate(appointment.startTime);\n      document.getElementById(\'viewTime\').textContent = `${formatTime(appointment.startTime)} até ${formatTime(appointment.endTime)}`;\n      \n      document.getElementById(\'viewProcedureType\').textContent = translateProcedureType(appointment.procedureType);\n      document.getElementById(\'viewRoom\').textContent = room ? room.name : \'N/A\';\n      \n      const statusElement = document.getElementById(\'viewStatus\');\n      statusElement.textContent = translateStatus(appointment.status);\n      statusElement.className = `status status-${appointment.status}`;\n      \n      document.getElementById(\'viewNotes\').textContent = appointment.notes || \'Nenhuma observação\';\n      \n      // Configurar o botão de evolução (visível apenas quando status é "atendido")\n      const evolutionButton = document.getElementById(\'addEvolutionButton\');\n      if (appointment.status === \'attended\') {\n        evolutionButton.style.display = \'block\';\n        evolutionButton.dataset.appointmentId = appointment.id;\n      } else {\n        evolutionButton.style.display = \'none\';\n      }\n    }\n    \n    // Salvar agendamento\n    async function saveAppointment() {\n      try {\n        // Validação básica\n        const patientId = document.getElementById(\'patientId\').value;\n        const professionalId = document.getElementById(\'professionalId\').value;\n        const appointmentDate = document.getElementById(\'appointmentDate\').value;\n        const startTime = document.getElementById(\'startTime\').value;\n        const endTime = document.getElementById(\'endTime\').value;\n        const procedureType = document.getElementById(\'procedureType\').value;\n        const roomId = document.getElementById(\'roomId\').value;\n        \n        if (!patientId || !professionalId || !appointmentDate || !startTime || !endTime || !procedureType || !roomId) {\n          alert(\'Por favor, preencha todos os campos obrigatórios.\');\n          return;\n        }\n        \n        // Construir datas ISO\n        const startDateTime = new Date(`${appointmentDate}T${startTime}`);\n        const endDateTime = new Date(`${appointmentDate}T${endTime}`);\n        \n        // Verificar se a data de término é posterior à data de início\n        if (endDateTime <= startDateTime) {\n          alert(\'A hora de término deve ser posterior à hora de início.\');\n          return;\n        }\n        \n        // Preparar dados do agendamento\n        const appointmentData = {\n          patientId: parseInt(patientId),\n          professionalId: parseInt(professionalId),\n          startTime: startDateTime.toISOString(),\n          endTime: endDateTime.toISOString(),\n          procedureType,\n          roomId: parseInt(roomId),\n          status: document.getElementById(\'status\').value,\n          notes: document.getElementById(\'notes\').value\n        };\n        \n        const appointmentId = appointmentIdInput.value;\n        let response;\n        \n        if (appointmentId) {\n          // Editar agendamento existente\n          response = await fetch(`/api/appointments/${appointmentId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(appointmentData)\n          });\n        } else {\n          // Adicionar novo agendamento\n          response = await fetch(\'/api/appointments\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(appointmentData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || \'Erro ao salvar agendamento\');\n        }\n        \n        // Fechar modal e recarregar lista\n        closeAppointmentModal();\n        loadAppointments();\n        \n        alert(appointmentId ? \'Agendamento atualizado com sucesso!\' : \'Agendamento adicionado com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar agendamento:\', error);\n        alert(`Erro ao salvar agendamento: ${error.message}`);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n  </script>\n', PosixPath('client/public/appointments.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 68fa51f27f1ad121ea319910f3a1cba7288e2ca2d0752c1e81c7ae24d57450a7e285313de9ce7a07a0b1b7bf5b3e1578d9d28360884df6bf65f8013975b0c999_0
2025-05-07 18:31:35,134 - semgrep.rule_match - DEBUG - match_key = ('\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', () => {\n      checkAuth();\n      setupEventListeners();\n      \n      const today = new Date();\n      currentMonth = today.getMonth();\n      currentYear = today.getFullYear();\n      \n      // Iniciar calendário\n      updateCalendarTitle();\n      renderCalendar();\n      \n      // Carregar filtros\n      loadProfessionals();\n      loadFacilities();\n      \n      // Carregar agendamentos\n      loadAppointments();\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const calendarTitleElement = document.getElementById(\'calendarTitle\');\n    const prevButton = document.getElementById(\'prevButton\');\n    const todayButton = document.getElementById(\'todayButton\');\n    const nextButton = document.getElementById(\'nextButton\');\n    const monthViewButton = document.getElementById(\'monthViewButton\');\n    const weekViewButton = document.getElementById(\'weekViewButton\');\n    const listViewButton = document.getElementById(\'listViewButton\');\n    const monthViewElement = document.getElementById(\'monthView\');\n    const weekViewElement = document.getElementById(\'weekView\');\n    const listViewElement = document.getElementById(\'listView\');\n    const newAppointmentButton = document.getElementById(\'newAppointmentButton\');\n    const appointmentModal = document.getElementById(\'appointmentModal\');\n    const viewAppointmentModal = document.getElementById(\'viewAppointmentModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const appointmentForm = document.getElementById(\'appointmentForm\');\n    const appointmentIdInput = document.getElementById(\'appointmentId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    const closeViewButton = document.getElementById(\'closeViewButton\');\n    const editAppointmentButton = document.getElementById(\'editAppointmentButton\');\n    const addEvolutionButton = document.getElementById(\'addEvolutionButton\');\n    const professionalFilter = document.getElementById(\'professionalFilter\');\n    const facilityFilter = document.getElementById(\'facilityFilter\');\n    const statusFilter = document.getElementById(\'statusFilter\');\n    const typeFilter = document.getElementById(\'typeFilter\');\n    \n    // Variáveis globais para o calendário\n    let currentMonth;\n    let currentYear;\n    let appointments = [];\n    let professionals = [];\n    let patients = [];\n    let facilities = [];\n    let rooms = [];\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        const userData = await response.json();\n        displayUserData(userData);\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir status\n    function translateStatus(status) {\n      const translations = {\n        \'scheduled\': \'Agendado\',\n        \'confirmed\': \'Confirmado\',\n        \'completed\': \'Concluído\',\n        \'attended\': \'Atendido\',\n        \'cancelled\': \'Cancelado\',\n        \'no_show\': \'Não compareceu\',\n        \'pending\': \'Pendente\'\n      };\n      \n      return translations[status] || status;\n    }\n    \n    // Traduzir tipo de procedimento\n    function translateProcedureType(type) {\n      const translations = {\n        \'psychology_aba\': \'Psicologia - ABA\',\n        \'psychology_cbt\': \'Psicologia - TCC\',\n        \'speech_therapy\': \'Fonoaudiologia\',\n        \'physical_therapy\': \'Fisioterapia\',\n        \'occupational_therapy\': \'Terapia Ocupacional\',\n        \'evaluation\': \'Avaliação\',\n        \'other\': \'Outro\',\n        \'free_time\': \'Tempo Livre\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Formatar data\n    function formatDate(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleDateString(\'pt-BR\');\n    }\n    \n    // Formatar hora\n    function formatTime(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleTimeString(\'pt-BR\', { hour: \'2-digit\', minute: \'2-digit\' });\n    }\n    \n    // Formatar data e hora\n    function formatDateTime(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleString(\'pt-BR\', {\n        day: \'2-digit\',\n        month: \'2-digit\',\n        year: \'numeric\',\n        hour: \'2-digit\',\n        minute: \'2-digit\'\n      });\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Filtros\n      professionalFilter.addEventListener(\'change\', filterAppointments);\n      facilityFilter.addEventListener(\'change\', filterAppointments);\n      statusFilter.addEventListener(\'change\', filterAppointments);\n      typeFilter.addEventListener(\'change\', filterAppointments);\n      \n      // Navegação do calendário\n      prevButton.addEventListener(\'click\', previousMonth);\n      todayButton.addEventListener(\'click\', goToToday);\n      nextButton.addEventListener(\'click\', nextMonth);\n      \n      // Alternar visualizações\n      monthViewButton.addEventListener(\'click\', showMonthView);\n      weekViewButton.addEventListener(\'click\', showWeekView);\n      listViewButton.addEventListener(\'click\', showListView);\n      \n      // Novo agendamento\n      newAppointmentButton.addEventListener(\'click\', openNewAppointmentModal);\n      \n      // Fechar modal\n      closeModal.addEventListener(\'click\', closeAppointmentModal);\n      closeViewModal.addEventListener(\'click\', closeViewAppointmentModal);\n      cancelButton.addEventListener(\'click\', closeAppointmentModal);\n      closeViewButton.addEventListener(\'click\', closeViewAppointmentModal);\n      \n      // Modal de background\n      appointmentModal.addEventListener(\'click\', function(e) {\n        if (e.target === appointmentModal) {\n          closeAppointmentModal();\n        }\n      });\n      \n      viewAppointmentModal.addEventListener(\'click\', function(e) {\n        if (e.target === viewAppointmentModal) {\n          closeViewAppointmentModal();\n        }\n      });\n      \n      // Salvar agendamento\n      saveButton.addEventListener(\'click\', saveAppointment);\n      \n      // Editar a partir da visualização\n      editAppointmentButton.addEventListener(\'click\', function() {\n        closeViewAppointmentModal();\n        editAppointment(this.dataset.appointmentId);\n      });\n      \n      // Botão para registrar evolução\n      addEvolutionButton.addEventListener(\'click\', function() {\n        const appointmentId = this.dataset.appointmentId;\n        window.location.href = `/evolutions.html?appointmentId=${appointmentId}`;\n      });\n    }\n    \n    // Carregar profissionais\n    async function loadProfessionals() {\n      try {\n        const response = await fetch(\'/api/professionals\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar profissionais\');\n        }\n        \n        professionals = await response.json();\n        \n        // Preencher select de filtro\n        professionalFilter.innerHTML = \'<option value="">Todos</option>\';\n        professionals.forEach(professional => {\n          const option = document.createElement(\'option\');\n          option.value = professional.id;\n          option.textContent = professional.user.fullName;\n          professionalFilter.appendChild(option);\n        });\n        \n        // Preencher select do formulário\n        const professionalIdSelect = document.getElementById(\'professionalId\');\n        professionalIdSelect.innerHTML = \'<option value="">Selecione o profissional</option>\';\n        professionals.forEach(professional => {\n          const option = document.createElement(\'option\');\n          option.value = professional.id;\n          option.textContent = professional.user.fullName;\n          professionalIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar profissionais:\', error);\n      }\n    }\n    \n    // Carregar unidades\n    async function loadFacilities() {\n      try {\n        const response = await fetch(\'/api/facilities\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar unidades\');\n        }\n        \n        facilities = await response.json();\n        \n        // Preencher select de filtro\n        facilityFilter.innerHTML = \'<option value="">Todas</option>\';\n        facilities.forEach(facility => {\n          const option = document.createElement(\'option\');\n          option.value = facility.id;\n          option.textContent = facility.name;\n          facilityFilter.appendChild(option);\n        });\n        \n        // Carregar salas da primeira unidade por padrão\n        if (facilities.length > 0) {\n          loadRooms(facilities[0].id);\n        }\n      } catch (error) {\n        console.error(\'Erro ao carregar unidades:\', error);\n      }\n    }\n    \n    // Carregar salas\n    async function loadRooms(facilityId) {\n      try {\n        const response = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar salas\');\n        }\n        \n        rooms = await response.json();\n        \n        // Preencher select do formulário\n        const roomIdSelect = document.getElementById(\'roomId\');\n        roomIdSelect.innerHTML = \'<option value="">Selecione a sala</option>\';\n        rooms.forEach(room => {\n          const option = document.createElement(\'option\');\n          option.value = room.id;\n          option.textContent = room.name;\n          roomIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar salas:\', error);\n      }\n    }\n    \n    // Carregar pacientes\n    async function loadPatients() {\n      try {\n        const response = await fetch(\'/api/patients\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar pacientes\');\n        }\n        \n        patients = await response.json();\n        \n        // Preencher select do formulário\n        const patientIdSelect = document.getElementById(\'patientId\');\n        patientIdSelect.innerHTML = \'<option value="">Selecione o paciente</option>\';\n        patients.forEach(patient => {\n          const option = document.createElement(\'option\');\n          option.value = patient.id;\n          option.textContent = patient.fullName;\n          patientIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar pacientes:\', error);\n      }\n    }\n    \n    // Carregar agendamentos\n    async function loadAppointments() {\n      try {\n        const url = new URL(\'/api/appointments\', window.location.origin);\n        \n        // Adicionar parâmetros de data\n        const startDate = new Date(currentYear, currentMonth, 1);\n        const endDate = new Date(currentYear, currentMonth + 1, 0);\n        \n        url.searchParams.append(\'startDate\', startDate.toISOString().split(\'T\')[0]);\n        url.searchParams.append(\'endDate\', endDate.toISOString().split(\'T\')[0]);\n        \n        // Adicionar filtros\n        if (professionalFilter.value) {\n          url.searchParams.append(\'professionalId\', professionalFilter.value);\n        }\n        \n        if (facilityFilter.value) {\n          url.searchParams.append(\'facilityId\', facilityFilter.value);\n        }\n        \n        if (statusFilter.value) {\n          url.searchParams.append(\'status\', statusFilter.value);\n        }\n        \n        if (typeFilter.value) {\n          url.searchParams.append(\'procedureType\', typeFilter.value);\n        }\n        \n        const response = await fetch(url, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar agendamentos\');\n        }\n        \n        appointments = await response.json();\n        \n        // Renderizar calendário com os agendamentos\n        renderCalendar();\n        renderListView();\n      } catch (error) {\n        console.error(\'Erro ao carregar agendamentos:\', error);\n      }\n    }\n    \n    // Filtrar agendamentos\n    function filterAppointments() {\n      loadAppointments();\n    }\n    \n    // Atualizar título do calendário\n    function updateCalendarTitle() {\n      const monthNames = [\n        \'Janeiro\', \'Fevereiro\', \'Março\', \'Abril\', \'Maio\', \'Junho\',\n        \'Julho\', \'Agosto\', \'Setembro\', \'Outubro\', \'Novembro\', \'Dezembro\'\n      ];\n      \n      calendarTitleElement.textContent = `${monthNames[currentMonth]} ${currentYear}`;\n    }\n    \n    // Renderizar calendário\n    function renderCalendar() {\n      const calendarGrid = document.querySelector(\'.calendar-grid\');\n      const daysContainer = document.createElement(\'div\');\n      daysContainer.className = \'calendar-days\';\n      \n      // Remover os dias existentes (exceto cabeçalhos)\n      const existingDays = calendarGrid.querySelectorAll(\'.calendar-day\');\n      existingDays.forEach(day => day.remove());\n      \n      // Obter o primeiro dia do mês\n      const firstDay = new Date(currentYear, currentMonth, 1);\n      const lastDay = new Date(currentYear, currentMonth + 1, 0);\n      \n      // Obter o dia da semana do primeiro dia (0 = Domingo, 1 = Segunda, etc.)\n      const firstDayOfWeek = firstDay.getDay();\n      \n      // Obter o número de dias no mês\n      const daysInMonth = lastDay.getDate();\n      \n      // Obter o último dia do mês anterior\n      const prevMonthLastDay = new Date(currentYear, currentMonth, 0).getDate();\n      \n      // Dia atual\n      const today = new Date();\n      const isCurrentMonth = today.getMonth() === currentMonth && today.getFullYear() === currentYear;\n      \n      // Dias do mês anterior\n      for (let i = 0; i < firstDayOfWeek; i++) {\n        const day = document.createElement(\'div\');\n        day.className = \'calendar-day other-month\';\n        \n        const dayNumber = prevMonthLastDay - firstDayOfWeek + i + 1;\n        day.innerHTML = `<div class="calendar-day-number">${dayNumber}</div>`;\n        \n        calendarGrid.appendChild(day);\n      }\n      \n      // Dias do mês atual\n      for (let i = 1; i <= daysInMonth; i++) {\n        const day = document.createElement(\'div\');\n        day.className = \'calendar-day\';\n        \n        // Se for hoje\n        if (isCurrentMonth && i === today.getDate()) {\n          day.classList.add(\'today\');\n        }\n        \n        day.innerHTML = `<div class="calendar-day-number">${i}</div>`;\n        \n        // Adicionar agendamentos para este dia\n        const date = new Date(currentYear, currentMonth, i);\n        const dateString = date.toISOString().split(\'T\')[0];\n        \n        const dayAppointments = appointments.filter(appointment => {\n          const appointmentDate = new Date(appointment.startTime);\n          return appointmentDate.toISOString().split(\'T\')[0] === dateString;\n        });\n        \n        dayAppointments.forEach(appointment => {\n          const appointmentElement = document.createElement(\'div\');\n          appointmentElement.className = `appointment ${appointment.status}`;\n          \n          const startTime = new Date(appointment.startTime);\n          const timeString = startTime.toLocaleTimeString(\'pt-BR\', { hour: \'2-digit\', minute: \'2-digit\' });\n          \n          // Encontrar dados relacionados\n          const patient = patients.find(p => p.id === appointment.patientId);\n          const professional = professionals.find(p => p.id === appointment.professionalId);\n          \n          appointmentElement.textContent = `${timeString} - ${patient ? patient.fullName : \'Paciente\'} (${translateProcedureType(appointment.procedureType)})`;\n          appointmentElement.title = `${timeString} - ${patient ? patient.fullName : \'Paciente\'} com ${professional ? professional.user.fullName : \'Profissional\'}`;\n          \n          // Adicionar evento de clique\n          appointmentElement.dataset.id = appointment.id;\n          appointmentElement.addEventListener(\'click\', () => viewAppointment(appointment.id));\n          \n          day.appendChild(appointmentElement);\n        });\n        \n        calendarGrid.appendChild(day);\n      }\n      \n      // Preencher o resto da grade com dias do próximo mês\n      const totalDaysDisplayed = firstDayOfWeek + daysInMonth;\n      const remainingDays = 42 - totalDaysDisplayed; // 6 linhas * 7 dias\n      \n      for (let i = 1; i <= remainingDays; i++) {\n        const day = document.createElement(\'div\');\n        day.className = \'calendar-day other-month\';\n        day.innerHTML = `<div class="calendar-day-number">${i}</div>`;\n        calendarGrid.appendChild(day);\n      }\n    }\n    \n    // Renderizar visualização em lista\n    function renderListView() {\n      const tbody = document.getElementById(\'appointmentsTableBody\');\n      tbody.innerHTML = \'\';\n      \n      if (appointments.length === 0) {\n        const row = document.createElement(\'tr\');\n        row.innerHTML = `\n          <td colspan="7">\n            <div class="empty-state">\n              <div class="empty-icon">📅</div>\n              <div class="empty-text">Nenhum agendamento encontrado para o período selecionado.</div>\n              <button class="button button-primary" id="emptyNewAppointmentBtn">Novo Agendamento</button>\n            </div>\n          </td>\n        `;\n        tbody.appendChild(row);\n        \n        document.getElementById(\'emptyNewAppointmentBtn\')?.addEventListener(\'click\', openNewAppointmentModal);\n        return;\n      }\n      \n      // Ordenar agendamentos por data\n      const sortedAppointments = [...appointments].sort((a, b) => {\n        return new Date(a.startTime) - new Date(b.startTime);\n      });\n      \n      sortedAppointments.forEach(appointment => {\n        const row = document.createElement(\'tr\');\n        \n        // Encontrar dados relacionados\n        const patient = patients.find(p => p.id === appointment.patientId);\n        const professional = professionals.find(p => p.id === appointment.professionalId);\n        const room = rooms.find(r => r.id === appointment.roomId);\n        \n        row.innerHTML = `\n          <td>${formatDateTime(appointment.startTime)}</td>\n          <td>${patient ? patient.fullName : \'N/A\'}</td>\n          <td>${professional ? professional.user.fullName : \'N/A\'}</td>\n          <td>${translateProcedureType(appointment.procedureType)}</td>\n          <td>${room ? room.name : \'N/A\'}</td>\n          <td><span class="status status-${appointment.status}">${translateStatus(appointment.status)}</span></td>\n          <td>\n            <button class="action-button view-appointment" data-id="${appointment.id}">Visualizar</button>\n            <button class="action-button edit-appointment" data-id="${appointment.id}">Editar</button>\n          </td>\n        `;\n        \n        tbody.appendChild(row);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-appointment\').forEach(button => {\n        button.addEventListener(\'click\', () => viewAppointment(button.dataset.id));\n      });\n      \n      document.querySelectorAll(\'.edit-appointment\').forEach(button => {\n        button.addEventListener(\'click\', () => editAppointment(button.dataset.id));\n      });\n    }\n    \n    // Navegar para o mês anterior\n    function previousMonth() {\n      currentMonth--;\n      if (currentMonth < 0) {\n        currentMonth = 11;\n        currentYear--;\n      }\n      updateCalendarTitle();\n      loadAppointments();\n    }\n    \n    // Navegar para o mês atual\n    function goToToday() {\n      const today = new Date();\n      currentMonth = today.getMonth();\n      currentYear = today.getFullYear();\n      updateCalendarTitle();\n      loadAppointments();\n    }\n    \n    // Navegar para o próximo mês\n    function nextMonth() {\n      currentMonth++;\n      if (currentMonth > 11) {\n        currentMonth = 0;\n        currentYear++;\n      }\n      updateCalendarTitle();\n      loadAppointments();\n    }\n    \n    // Mostrar visualização de mês\n    function showMonthView() {\n      monthViewButton.classList.add(\'active\');\n      weekViewButton.classList.remove(\'active\');\n      listViewButton.classList.remove(\'active\');\n      \n      monthViewElement.style.display = \'block\';\n      weekViewElement.style.display = \'none\';\n      listViewElement.style.display = \'none\';\n    }\n    \n    // Mostrar visualização de semana\n    function showWeekView() {\n      monthViewButton.classList.remove(\'active\');\n      weekViewButton.classList.add(\'active\');\n      listViewButton.classList.remove(\'active\');\n      \n      monthViewElement.style.display = \'none\';\n      weekViewElement.style.display = \'block\';\n      listViewElement.style.display = \'none\';\n      \n      // Implementar visualização da semana (simplificado)\n      alert(\'Visualização de semana será implementada em breve.\');\n      showMonthView(); // Voltar para visualização de mês por enquanto\n    }\n    \n    // Mostrar visualização de lista\n    function showListView() {\n      monthViewButton.classList.remove(\'active\');\n      weekViewButton.classList.remove(\'active\');\n      listViewButton.classList.add(\'active\');\n      \n      monthViewElement.style.display = \'none\';\n      weekViewElement.style.display = \'none\';\n      listViewElement.style.display = \'block\';\n    }\n    \n    // Abrir modal para novo agendamento\n    function openNewAppointmentModal() {\n      modalTitle.textContent = \'Novo Agendamento\';\n      appointmentForm.reset();\n      appointmentIdInput.value = \'\';\n      \n      // Carregar dados necessários\n      if (patients.length === 0) loadPatients();\n      if (professionals.length === 0) loadProfessionals();\n      if (facilities.length > 0 && rooms.length === 0) loadRooms(facilities[0].id);\n      \n      // Definir status padrão como "Agendado"\n      document.getElementById(\'status\').value = \'scheduled\';\n      \n      // Definir data padrão como hoje\n      const today = new Date();\n      const dateString = today.toISOString().split(\'T\')[0];\n      document.getElementById(\'appointmentDate\').value = dateString;\n      \n      appointmentModal.classList.add(\'active\');\n    }\n    \n    // Fechar modal de agendamento\n    function closeAppointmentModal() {\n      appointmentModal.classList.remove(\'active\');\n    }\n    \n    // Fechar modal de visualização\n    function closeViewAppointmentModal() {\n      viewAppointmentModal.classList.remove(\'active\');\n    }\n    \n    // Editar agendamento\n    async function editAppointment(appointmentId) {\n      try {\n        modalTitle.textContent = \'Editar Agendamento\';\n        \n        // Carregar dados necessários\n        if (patients.length === 0) await loadPatients();\n        if (professionals.length === 0) await loadProfessionals();\n        if (facilities.length > 0 && rooms.length === 0) await loadRooms(facilities[0].id);\n        \n        const appointment = appointments.find(a => a.id == appointmentId);\n        \n        if (!appointment) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/appointments/${appointmentId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados do agendamento\');\n          }\n          \n          const appointmentData = await response.json();\n          fillAppointmentForm(appointmentData);\n        } else {\n          fillAppointmentForm(appointment);\n        }\n        \n        appointmentModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar agendamento:\', error);\n        alert(\'Erro ao carregar dados do agendamento. Tente novamente.\');\n      }\n    }\n    \n    // Preencher formulário com dados do agendamento\n    function fillAppointmentForm(appointment) {\n      appointmentIdInput.value = appointment.id;\n      document.getElementById(\'patientId\').value = appointment.patientId || \'\';\n      document.getElementById(\'professionalId\').value = appointment.professionalId || \'\';\n      \n      // Data e hora\n      const startTime = new Date(appointment.startTime);\n      const endTime = new Date(appointment.endTime);\n      \n      document.getElementById(\'appointmentDate\').value = startTime.toISOString().split(\'T\')[0];\n      document.getElementById(\'startTime\').value = startTime.toLocaleTimeString(\'en-GB\', { hour: \'2-digit\', minute: \'2-digit\' });\n      document.getElementById(\'endTime\').value = endTime.toLocaleTimeString(\'en-GB\', { hour: \'2-digit\', minute: \'2-digit\' });\n      \n      document.getElementById(\'procedureType\').value = appointment.procedureType || \'\';\n      document.getElementById(\'roomId\').value = appointment.roomId || \'\';\n      document.getElementById(\'status\').value = appointment.status || \'scheduled\';\n      document.getElementById(\'notes\').value = appointment.notes || \'\';\n    }\n    \n    // Visualizar agendamento\n    async function viewAppointment(appointmentId) {\n      try {\n        // Carregar dados necessários\n        if (patients.length === 0) await loadPatients();\n        if (professionals.length === 0) await loadProfessionals();\n        \n        const appointment = appointments.find(a => a.id == appointmentId);\n        \n        if (!appointment) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/appointments/${appointmentId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados do agendamento\');\n          }\n          \n          const appointmentData = await response.json();\n          displayAppointmentDetails(appointmentData);\n        } else {\n          displayAppointmentDetails(appointment);\n        }\n        \n        // Configurar botão de edição\n        editAppointmentButton.dataset.appointmentId = appointmentId;\n        \n        viewAppointmentModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar agendamento:\', error);\n        alert(\'Erro ao carregar dados do agendamento. Tente novamente.\');\n      }\n    }\n    \n    // Exibir detalhes do agendamento\n    function displayAppointmentDetails(appointment) {\n      // Encontrar dados relacionados\n      const patient = patients.find(p => p.id === appointment.patientId);\n      const professional = professionals.find(p => p.id === appointment.professionalId);\n      const room = rooms.find(r => r.id === appointment.roomId);\n      \n      document.getElementById(\'viewPatient\').textContent = patient ? patient.fullName : \'N/A\';\n      document.getElementById(\'viewProfessional\').textContent = professional ? professional.user.fullName : \'N/A\';\n      \n      // Data e hora\n      const startTime = new Date(appointment.startTime);\n      const endTime = new Date(appointment.endTime);\n      \n      document.getElementById(\'viewDate\').textContent = formatDate(appointment.startTime);\n      document.getElementById(\'viewTime\').textContent = `${formatTime(appointment.startTime)} até ${formatTime(appointment.endTime)}`;\n      \n      document.getElementById(\'viewProcedureType\').textContent = translateProcedureType(appointment.procedureType);\n      document.getElementById(\'viewRoom\').textContent = room ? room.name : \'N/A\';\n      \n      const statusElement = document.getElementById(\'viewStatus\');\n      statusElement.textContent = translateStatus(appointment.status);\n      statusElement.className = `status status-${appointment.status}`;\n      \n      document.getElementById(\'viewNotes\').textContent = appointment.notes || \'Nenhuma observação\';\n      \n      // Configurar o botão de evolução (visível apenas quando status é "atendido")\n      const evolutionButton = document.getElementById(\'addEvolutionButton\');\n      if (appointment.status === \'attended\') {\n        evolutionButton.style.display = \'block\';\n        evolutionButton.dataset.appointmentId = appointment.id;\n      } else {\n        evolutionButton.style.display = \'none\';\n      }\n    }\n    \n    // Salvar agendamento\n    async function saveAppointment() {\n      try {\n        // Validação básica\n        const patientId = document.getElementById(\'patientId\').value;\n        const professionalId = document.getElementById(\'professionalId\').value;\n        const appointmentDate = document.getElementById(\'appointmentDate\').value;\n        const startTime = document.getElementById(\'startTime\').value;\n        const endTime = document.getElementById(\'endTime\').value;\n        const procedureType = document.getElementById(\'procedureType\').value;\n        const roomId = document.getElementById(\'roomId\').value;\n        \n        if (!patientId || !professionalId || !appointmentDate || !startTime || !endTime || !procedureType || !roomId) {\n          alert(\'Por favor, preencha todos os campos obrigatórios.\');\n          return;\n        }\n        \n        // Construir datas ISO\n        const startDateTime = new Date(`${appointmentDate}T${startTime}`);\n        const endDateTime = new Date(`${appointmentDate}T${endTime}`);\n        \n        // Verificar se a data de término é posterior à data de início\n        if (endDateTime <= startDateTime) {\n          alert(\'A hora de término deve ser posterior à hora de início.\');\n          return;\n        }\n        \n        // Preparar dados do agendamento\n        const appointmentData = {\n          patientId: parseInt(patientId),\n          professionalId: parseInt(professionalId),\n          startTime: startDateTime.toISOString(),\n          endTime: endDateTime.toISOString(),\n          procedureType,\n          roomId: parseInt(roomId),\n          status: document.getElementById(\'status\').value,\n          notes: document.getElementById(\'notes\').value\n        };\n        \n        const appointmentId = appointmentIdInput.value;\n        let response;\n        \n        if (appointmentId) {\n          // Editar agendamento existente\n          response = await fetch(`/api/appointments/${appointmentId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(appointmentData)\n          });\n        } else {\n          // Adicionar novo agendamento\n          response = await fetch(\'/api/appointments\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(appointmentData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || \'Erro ao salvar agendamento\');\n        }\n        \n        // Fechar modal e recarregar lista\n        closeAppointmentModal();\n        loadAppointments();\n        \n        alert(appointmentId ? \'Agendamento atualizado com sucesso!\' : \'Agendamento adicionado com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar agendamento:\', error);\n        alert(`Erro ao salvar agendamento: ${error.message}`);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n   $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', () => {\n      checkAuth();\n      setupEventListeners();\n      \n      const today = new Date();\n      currentMonth = today.getMonth();\n      currentYear = today.getFullYear();\n      \n      // Iniciar calendário\n      updateCalendarTitle();\n      renderCalendar();\n      \n      // Carregar filtros\n      loadProfessionals();\n      loadFacilities();\n      \n      // Carregar agendamentos\n      loadAppointments();\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const calendarTitleElement = document.getElementById(\'calendarTitle\');\n    const prevButton = document.getElementById(\'prevButton\');\n    const todayButton = document.getElementById(\'todayButton\');\n    const nextButton = document.getElementById(\'nextButton\');\n    const monthViewButton = document.getElementById(\'monthViewButton\');\n    const weekViewButton = document.getElementById(\'weekViewButton\');\n    const listViewButton = document.getElementById(\'listViewButton\');\n    const monthViewElement = document.getElementById(\'monthView\');\n    const weekViewElement = document.getElementById(\'weekView\');\n    const listViewElement = document.getElementById(\'listView\');\n    const newAppointmentButton = document.getElementById(\'newAppointmentButton\');\n    const appointmentModal = document.getElementById(\'appointmentModal\');\n    const viewAppointmentModal = document.getElementById(\'viewAppointmentModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const appointmentForm = document.getElementById(\'appointmentForm\');\n    const appointmentIdInput = document.getElementById(\'appointmentId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    const closeViewButton = document.getElementById(\'closeViewButton\');\n    const editAppointmentButton = document.getElementById(\'editAppointmentButton\');\n    const addEvolutionButton = document.getElementById(\'addEvolutionButton\');\n    const professionalFilter = document.getElementById(\'professionalFilter\');\n    const facilityFilter = document.getElementById(\'facilityFilter\');\n    const statusFilter = document.getElementById(\'statusFilter\');\n    const typeFilter = document.getElementById(\'typeFilter\');\n    \n    // Variáveis globais para o calendário\n    let currentMonth;\n    let currentYear;\n    let appointments = [];\n    let professionals = [];\n    let patients = [];\n    let facilities = [];\n    let rooms = [];\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        const userData = await response.json();\n        displayUserData(userData);\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir status\n    function translateStatus(status) {\n      const translations = {\n        \'scheduled\': \'Agendado\',\n        \'confirmed\': \'Confirmado\',\n        \'completed\': \'Concluído\',\n        \'attended\': \'Atendido\',\n        \'cancelled\': \'Cancelado\',\n        \'no_show\': \'Não compareceu\',\n        \'pending\': \'Pendente\'\n      };\n      \n      return translations[status] || status;\n    }\n    \n    // Traduzir tipo de procedimento\n    function translateProcedureType(type) {\n      const translations = {\n        \'psychology_aba\': \'Psicologia - ABA\',\n        \'psychology_cbt\': \'Psicologia - TCC\',\n        \'speech_therapy\': \'Fonoaudiologia\',\n        \'physical_therapy\': \'Fisioterapia\',\n        \'occupational_therapy\': \'Terapia Ocupacional\',\n        \'evaluation\': \'Avaliação\',\n        \'other\': \'Outro\',\n        \'free_time\': \'Tempo Livre\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Formatar data\n    function formatDate(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleDateString(\'pt-BR\');\n    }\n    \n    // Formatar hora\n    function formatTime(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleTimeString(\'pt-BR\', { hour: \'2-digit\', minute: \'2-digit\' });\n    }\n    \n    // Formatar data e hora\n    function formatDateTime(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleString(\'pt-BR\', {\n        day: \'2-digit\',\n        month: \'2-digit\',\n        year: \'numeric\',\n        hour: \'2-digit\',\n        minute: \'2-digit\'\n      });\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Filtros\n      professionalFilter.addEventListener(\'change\', filterAppointments);\n      facilityFilter.addEventListener(\'change\', filterAppointments);\n      statusFilter.addEventListener(\'change\', filterAppointments);\n      typeFilter.addEventListener(\'change\', filterAppointments);\n      \n      // Navegação do calendário\n      prevButton.addEventListener(\'click\', previousMonth);\n      todayButton.addEventListener(\'click\', goToToday);\n      nextButton.addEventListener(\'click\', nextMonth);\n      \n      // Alternar visualizações\n      monthViewButton.addEventListener(\'click\', showMonthView);\n      weekViewButton.addEventListener(\'click\', showWeekView);\n      listViewButton.addEventListener(\'click\', showListView);\n      \n      // Novo agendamento\n      newAppointmentButton.addEventListener(\'click\', openNewAppointmentModal);\n      \n      // Fechar modal\n      closeModal.addEventListener(\'click\', closeAppointmentModal);\n      closeViewModal.addEventListener(\'click\', closeViewAppointmentModal);\n      cancelButton.addEventListener(\'click\', closeAppointmentModal);\n      closeViewButton.addEventListener(\'click\', closeViewAppointmentModal);\n      \n      // Modal de background\n      appointmentModal.addEventListener(\'click\', function(e) {\n        if (e.target === appointmentModal) {\n          closeAppointmentModal();\n        }\n      });\n      \n      viewAppointmentModal.addEventListener(\'click\', function(e) {\n        if (e.target === viewAppointmentModal) {\n          closeViewAppointmentModal();\n        }\n      });\n      \n      // Salvar agendamento\n      saveButton.addEventListener(\'click\', saveAppointment);\n      \n      // Editar a partir da visualização\n      editAppointmentButton.addEventListener(\'click\', function() {\n        closeViewAppointmentModal();\n        editAppointment(this.dataset.appointmentId);\n      });\n      \n      // Botão para registrar evolução\n      addEvolutionButton.addEventListener(\'click\', function() {\n        const appointmentId = this.dataset.appointmentId;\n        window.location.href = `/evolutions.html?appointmentId=${appointmentId}`;\n      });\n    }\n    \n    // Carregar profissionais\n    async function loadProfessionals() {\n      try {\n        const response = await fetch(\'/api/professionals\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar profissionais\');\n        }\n        \n        professionals = await response.json();\n        \n        // Preencher select de filtro\n        professionalFilter.innerHTML = \'<option value="">Todos</option>\';\n        professionals.forEach(professional => {\n          const option = document.createElement(\'option\');\n          option.value = professional.id;\n          option.textContent = professional.user.fullName;\n          professionalFilter.appendChild(option);\n        });\n        \n        // Preencher select do formulário\n        const professionalIdSelect = document.getElementById(\'professionalId\');\n        professionalIdSelect.innerHTML = \'<option value="">Selecione o profissional</option>\';\n        professionals.forEach(professional => {\n          const option = document.createElement(\'option\');\n          option.value = professional.id;\n          option.textContent = professional.user.fullName;\n          professionalIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar profissionais:\', error);\n      }\n    }\n    \n    // Carregar unidades\n    async function loadFacilities() {\n      try {\n        const response = await fetch(\'/api/facilities\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar unidades\');\n        }\n        \n        facilities = await response.json();\n        \n        // Preencher select de filtro\n        facilityFilter.innerHTML = \'<option value="">Todas</option>\';\n        facilities.forEach(facility => {\n          const option = document.createElement(\'option\');\n          option.value = facility.id;\n          option.textContent = facility.name;\n          facilityFilter.appendChild(option);\n        });\n        \n        // Carregar salas da primeira unidade por padrão\n        if (facilities.length > 0) {\n          loadRooms(facilities[0].id);\n        }\n      } catch (error) {\n        console.error(\'Erro ao carregar unidades:\', error);\n      }\n    }\n    \n    // Carregar salas\n    async function loadRooms(facilityId) {\n      try {\n        const response = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar salas\');\n        }\n        \n        rooms = await response.json();\n        \n        // Preencher select do formulário\n        const roomIdSelect = document.getElementById(\'roomId\');\n        roomIdSelect.innerHTML = \'<option value="">Selecione a sala</option>\';\n        rooms.forEach(room => {\n          const option = document.createElement(\'option\');\n          option.value = room.id;\n          option.textContent = room.name;\n          roomIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar salas:\', error);\n      }\n    }\n    \n    // Carregar pacientes\n    async function loadPatients() {\n      try {\n        const response = await fetch(\'/api/patients\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar pacientes\');\n        }\n        \n        patients = await response.json();\n        \n        // Preencher select do formulário\n        const patientIdSelect = document.getElementById(\'patientId\');\n        patientIdSelect.innerHTML = \'<option value="">Selecione o paciente</option>\';\n        patients.forEach(patient => {\n          const option = document.createElement(\'option\');\n          option.value = patient.id;\n          option.textContent = patient.fullName;\n          patientIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar pacientes:\', error);\n      }\n    }\n    \n    // Carregar agendamentos\n    async function loadAppointments() {\n      try {\n        const url = new URL(\'/api/appointments\', window.location.origin);\n        \n        // Adicionar parâmetros de data\n        const startDate = new Date(currentYear, currentMonth, 1);\n        const endDate = new Date(currentYear, currentMonth + 1, 0);\n        \n        url.searchParams.append(\'startDate\', startDate.toISOString().split(\'T\')[0]);\n        url.searchParams.append(\'endDate\', endDate.toISOString().split(\'T\')[0]);\n        \n        // Adicionar filtros\n        if (professionalFilter.value) {\n          url.searchParams.append(\'professionalId\', professionalFilter.value);\n        }\n        \n        if (facilityFilter.value) {\n          url.searchParams.append(\'facilityId\', facilityFilter.value);\n        }\n        \n        if (statusFilter.value) {\n          url.searchParams.append(\'status\', statusFilter.value);\n        }\n        \n        if (typeFilter.value) {\n          url.searchParams.append(\'procedureType\', typeFilter.value);\n        }\n        \n        const response = await fetch(url, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar agendamentos\');\n        }\n        \n        appointments = await response.json();\n        \n        // Renderizar calendário com os agendamentos\n        renderCalendar();\n        renderListView();\n      } catch (error) {\n        console.error(\'Erro ao carregar agendamentos:\', error);\n      }\n    }\n    \n    // Filtrar agendamentos\n    function filterAppointments() {\n      loadAppointments();\n    }\n    \n    // Atualizar título do calendário\n    function updateCalendarTitle() {\n      const monthNames = [\n        \'Janeiro\', \'Fevereiro\', \'Março\', \'Abril\', \'Maio\', \'Junho\',\n        \'Julho\', \'Agosto\', \'Setembro\', \'Outubro\', \'Novembro\', \'Dezembro\'\n      ];\n      \n      calendarTitleElement.textContent = `${monthNames[currentMonth]} ${currentYear}`;\n    }\n    \n    // Renderizar calendário\n    function renderCalendar() {\n      const calendarGrid = document.querySelector(\'.calendar-grid\');\n      const daysContainer = document.createElement(\'div\');\n      daysContainer.className = \'calendar-days\';\n      \n      // Remover os dias existentes (exceto cabeçalhos)\n      const existingDays = calendarGrid.querySelectorAll(\'.calendar-day\');\n      existingDays.forEach(day => day.remove());\n      \n      // Obter o primeiro dia do mês\n      const firstDay = new Date(currentYear, currentMonth, 1);\n      const lastDay = new Date(currentYear, currentMonth + 1, 0);\n      \n      // Obter o dia da semana do primeiro dia (0 = Domingo, 1 = Segunda, etc.)\n      const firstDayOfWeek = firstDay.getDay();\n      \n      // Obter o número de dias no mês\n      const daysInMonth = lastDay.getDate();\n      \n      // Obter o último dia do mês anterior\n      const prevMonthLastDay = new Date(currentYear, currentMonth, 0).getDate();\n      \n      // Dia atual\n      const today = new Date();\n      const isCurrentMonth = today.getMonth() === currentMonth && today.getFullYear() === currentYear;\n      \n      // Dias do mês anterior\n      for (let i = 0; i < firstDayOfWeek; i++) {\n        const day = document.createElement(\'div\');\n        day.className = \'calendar-day other-month\';\n        \n        const dayNumber = prevMonthLastDay - firstDayOfWeek + i + 1;\n        day.innerHTML = `<div class="calendar-day-number">${dayNumber}</div>`;\n        \n        calendarGrid.appendChild(day);\n      }\n      \n      // Dias do mês atual\n      for (let i = 1; i <= daysInMonth; i++) {\n        const day = document.createElement(\'div\');\n        day.className = \'calendar-day\';\n        \n        // Se for hoje\n        if (isCurrentMonth && i === today.getDate()) {\n          day.classList.add(\'today\');\n        }\n        \n        day.innerHTML = `<div class="calendar-day-number">${i}</div>`;\n        \n        // Adicionar agendamentos para este dia\n        const date = new Date(currentYear, currentMonth, i);\n        const dateString = date.toISOString().split(\'T\')[0];\n        \n        const dayAppointments = appointments.filter(appointment => {\n          const appointmentDate = new Date(appointment.startTime);\n          return appointmentDate.toISOString().split(\'T\')[0] === dateString;\n        });\n        \n        dayAppointments.forEach(appointment => {\n          const appointmentElement = document.createElement(\'div\');\n          appointmentElement.className = `appointment ${appointment.status}`;\n          \n          const startTime = new Date(appointment.startTime);\n          const timeString = startTime.toLocaleTimeString(\'pt-BR\', { hour: \'2-digit\', minute: \'2-digit\' });\n          \n          // Encontrar dados relacionados\n          const patient = patients.find(p => p.id === appointment.patientId);\n          const professional = professionals.find(p => p.id === appointment.professionalId);\n          \n          appointmentElement.textContent = `${timeString} - ${patient ? patient.fullName : \'Paciente\'} (${translateProcedureType(appointment.procedureType)})`;\n          appointmentElement.title = `${timeString} - ${patient ? patient.fullName : \'Paciente\'} com ${professional ? professional.user.fullName : \'Profissional\'}`;\n          \n          // Adicionar evento de clique\n          appointmentElement.dataset.id = appointment.id;\n          appointmentElement.addEventListener(\'click\', () => viewAppointment(appointment.id));\n          \n          day.appendChild(appointmentElement);\n        });\n        \n        calendarGrid.appendChild(day);\n      }\n      \n      // Preencher o resto da grade com dias do próximo mês\n      const totalDaysDisplayed = firstDayOfWeek + daysInMonth;\n      const remainingDays = 42 - totalDaysDisplayed; // 6 linhas * 7 dias\n      \n      for (let i = 1; i <= remainingDays; i++) {\n        const day = document.createElement(\'div\');\n        day.className = \'calendar-day other-month\';\n        day.innerHTML = `<div class="calendar-day-number">${i}</div>`;\n        calendarGrid.appendChild(day);\n      }\n    }\n    \n    // Renderizar visualização em lista\n    function renderListView() {\n      const tbody = document.getElementById(\'appointmentsTableBody\');\n      tbody.innerHTML = \'\';\n      \n      if (appointments.length === 0) {\n        const row = document.createElement(\'tr\');\n        row.innerHTML = `\n          <td colspan="7">\n            <div class="empty-state">\n              <div class="empty-icon">📅</div>\n              <div class="empty-text">Nenhum agendamento encontrado para o período selecionado.</div>\n              <button class="button button-primary" id="emptyNewAppointmentBtn">Novo Agendamento</button>\n            </div>\n          </td>\n        `;\n        tbody.appendChild(row);\n        \n        document.getElementById(\'emptyNewAppointmentBtn\')?.addEventListener(\'click\', openNewAppointmentModal);\n        return;\n      }\n      \n      // Ordenar agendamentos por data\n      const sortedAppointments = [...appointments].sort((a, b) => {\n        return new Date(a.startTime) - new Date(b.startTime);\n      });\n      \n      sortedAppointments.forEach(appointment => {\n        const row = document.createElement(\'tr\');\n        \n        // Encontrar dados relacionados\n        const patient = patients.find(p => p.id === appointment.patientId);\n        const professional = professionals.find(p => p.id === appointment.professionalId);\n        const room = rooms.find(r => r.id === appointment.roomId);\n        \n        row.innerHTML = `\n          <td>${formatDateTime(appointment.startTime)}</td>\n          <td>${patient ? patient.fullName : \'N/A\'}</td>\n          <td>${professional ? professional.user.fullName : \'N/A\'}</td>\n          <td>${translateProcedureType(appointment.procedureType)}</td>\n          <td>${room ? room.name : \'N/A\'}</td>\n          <td><span class="status status-${appointment.status}">${translateStatus(appointment.status)}</span></td>\n          <td>\n            <button class="action-button view-appointment" data-id="${appointment.id}">Visualizar</button>\n            <button class="action-button edit-appointment" data-id="${appointment.id}">Editar</button>\n          </td>\n        `;\n        \n        tbody.appendChild(row);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-appointment\').forEach(button => {\n        button.addEventListener(\'click\', () => viewAppointment(button.dataset.id));\n      });\n      \n      document.querySelectorAll(\'.edit-appointment\').forEach(button => {\n        button.addEventListener(\'click\', () => editAppointment(button.dataset.id));\n      });\n    }\n    \n    // Navegar para o mês anterior\n    function previousMonth() {\n      currentMonth--;\n      if (currentMonth < 0) {\n        currentMonth = 11;\n        currentYear--;\n      }\n      updateCalendarTitle();\n      loadAppointments();\n    }\n    \n    // Navegar para o mês atual\n    function goToToday() {\n      const today = new Date();\n      currentMonth = today.getMonth();\n      currentYear = today.getFullYear();\n      updateCalendarTitle();\n      loadAppointments();\n    }\n    \n    // Navegar para o próximo mês\n    function nextMonth() {\n      currentMonth++;\n      if (currentMonth > 11) {\n        currentMonth = 0;\n        currentYear++;\n      }\n      updateCalendarTitle();\n      loadAppointments();\n    }\n    \n    // Mostrar visualização de mês\n    function showMonthView() {\n      monthViewButton.classList.add(\'active\');\n      weekViewButton.classList.remove(\'active\');\n      listViewButton.classList.remove(\'active\');\n      \n      monthViewElement.style.display = \'block\';\n      weekViewElement.style.display = \'none\';\n      listViewElement.style.display = \'none\';\n    }\n    \n    // Mostrar visualização de semana\n    function showWeekView() {\n      monthViewButton.classList.remove(\'active\');\n      weekViewButton.classList.add(\'active\');\n      listViewButton.classList.remove(\'active\');\n      \n      monthViewElement.style.display = \'none\';\n      weekViewElement.style.display = \'block\';\n      listViewElement.style.display = \'none\';\n      \n      // Implementar visualização da semana (simplificado)\n      alert(\'Visualização de semana será implementada em breve.\');\n      showMonthView(); // Voltar para visualização de mês por enquanto\n    }\n    \n    // Mostrar visualização de lista\n    function showListView() {\n      monthViewButton.classList.remove(\'active\');\n      weekViewButton.classList.remove(\'active\');\n      listViewButton.classList.add(\'active\');\n      \n      monthViewElement.style.display = \'none\';\n      weekViewElement.style.display = \'none\';\n      listViewElement.style.display = \'block\';\n    }\n    \n    // Abrir modal para novo agendamento\n    function openNewAppointmentModal() {\n      modalTitle.textContent = \'Novo Agendamento\';\n      appointmentForm.reset();\n      appointmentIdInput.value = \'\';\n      \n      // Carregar dados necessários\n      if (patients.length === 0) loadPatients();\n      if (professionals.length === 0) loadProfessionals();\n      if (facilities.length > 0 && rooms.length === 0) loadRooms(facilities[0].id);\n      \n      // Definir status padrão como "Agendado"\n      document.getElementById(\'status\').value = \'scheduled\';\n      \n      // Definir data padrão como hoje\n      const today = new Date();\n      const dateString = today.toISOString().split(\'T\')[0];\n      document.getElementById(\'appointmentDate\').value = dateString;\n      \n      appointmentModal.classList.add(\'active\');\n    }\n    \n    // Fechar modal de agendamento\n    function closeAppointmentModal() {\n      appointmentModal.classList.remove(\'active\');\n    }\n    \n    // Fechar modal de visualização\n    function closeViewAppointmentModal() {\n      viewAppointmentModal.classList.remove(\'active\');\n    }\n    \n    // Editar agendamento\n    async function editAppointment(appointmentId) {\n      try {\n        modalTitle.textContent = \'Editar Agendamento\';\n        \n        // Carregar dados necessários\n        if (patients.length === 0) await loadPatients();\n        if (professionals.length === 0) await loadProfessionals();\n        if (facilities.length > 0 && rooms.length === 0) await loadRooms(facilities[0].id);\n        \n        const appointment = appointments.find(a => a.id == appointmentId);\n        \n        if (!appointment) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/appointments/${appointmentId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados do agendamento\');\n          }\n          \n          const appointmentData = await response.json();\n          fillAppointmentForm(appointmentData);\n        } else {\n          fillAppointmentForm(appointment);\n        }\n        \n        appointmentModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar agendamento:\', error);\n        alert(\'Erro ao carregar dados do agendamento. Tente novamente.\');\n      }\n    }\n    \n    // Preencher formulário com dados do agendamento\n    function fillAppointmentForm(appointment) {\n      appointmentIdInput.value = appointment.id;\n      document.getElementById(\'patientId\').value = appointment.patientId || \'\';\n      document.getElementById(\'professionalId\').value = appointment.professionalId || \'\';\n      \n      // Data e hora\n      const startTime = new Date(appointment.startTime);\n      const endTime = new Date(appointment.endTime);\n      \n      document.getElementById(\'appointmentDate\').value = startTime.toISOString().split(\'T\')[0];\n      document.getElementById(\'startTime\').value = startTime.toLocaleTimeString(\'en-GB\', { hour: \'2-digit\', minute: \'2-digit\' });\n      document.getElementById(\'endTime\').value = endTime.toLocaleTimeString(\'en-GB\', { hour: \'2-digit\', minute: \'2-digit\' });\n      \n      document.getElementById(\'procedureType\').value = appointment.procedureType || \'\';\n      document.getElementById(\'roomId\').value = appointment.roomId || \'\';\n      document.getElementById(\'status\').value = appointment.status || \'scheduled\';\n      document.getElementById(\'notes\').value = appointment.notes || \'\';\n    }\n    \n    // Visualizar agendamento\n    async function viewAppointment(appointmentId) {\n      try {\n        // Carregar dados necessários\n        if (patients.length === 0) await loadPatients();\n        if (professionals.length === 0) await loadProfessionals();\n        \n        const appointment = appointments.find(a => a.id == appointmentId);\n        \n        if (!appointment) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/appointments/${appointmentId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados do agendamento\');\n          }\n          \n          const appointmentData = await response.json();\n          displayAppointmentDetails(appointmentData);\n        } else {\n          displayAppointmentDetails(appointment);\n        }\n        \n        // Configurar botão de edição\n        editAppointmentButton.dataset.appointmentId = appointmentId;\n        \n        viewAppointmentModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar agendamento:\', error);\n        alert(\'Erro ao carregar dados do agendamento. Tente novamente.\');\n      }\n    }\n    \n    // Exibir detalhes do agendamento\n    function displayAppointmentDetails(appointment) {\n      // Encontrar dados relacionados\n      const patient = patients.find(p => p.id === appointment.patientId);\n      const professional = professionals.find(p => p.id === appointment.professionalId);\n      const room = rooms.find(r => r.id === appointment.roomId);\n      \n      document.getElementById(\'viewPatient\').textContent = patient ? patient.fullName : \'N/A\';\n      document.getElementById(\'viewProfessional\').textContent = professional ? professional.user.fullName : \'N/A\';\n      \n      // Data e hora\n      const startTime = new Date(appointment.startTime);\n      const endTime = new Date(appointment.endTime);\n      \n      document.getElementById(\'viewDate\').textContent = formatDate(appointment.startTime);\n      document.getElementById(\'viewTime\').textContent = `${formatTime(appointment.startTime)} até ${formatTime(appointment.endTime)}`;\n      \n      document.getElementById(\'viewProcedureType\').textContent = translateProcedureType(appointment.procedureType);\n      document.getElementById(\'viewRoom\').textContent = room ? room.name : \'N/A\';\n      \n      const statusElement = document.getElementById(\'viewStatus\');\n      statusElement.textContent = translateStatus(appointment.status);\n      statusElement.className = `status status-${appointment.status}`;\n      \n      document.getElementById(\'viewNotes\').textContent = appointment.notes || \'Nenhuma observação\';\n      \n      // Configurar o botão de evolução (visível apenas quando status é "atendido")\n      const evolutionButton = document.getElementById(\'addEvolutionButton\');\n      if (appointment.status === \'attended\') {\n        evolutionButton.style.display = \'block\';\n        evolutionButton.dataset.appointmentId = appointment.id;\n      } else {\n        evolutionButton.style.display = \'none\';\n      }\n    }\n    \n    // Salvar agendamento\n    async function saveAppointment() {\n      try {\n        // Validação básica\n        const patientId = document.getElementById(\'patientId\').value;\n        const professionalId = document.getElementById(\'professionalId\').value;\n        const appointmentDate = document.getElementById(\'appointmentDate\').value;\n        const startTime = document.getElementById(\'startTime\').value;\n        const endTime = document.getElementById(\'endTime\').value;\n        const procedureType = document.getElementById(\'procedureType\').value;\n        const roomId = document.getElementById(\'roomId\').value;\n        \n        if (!patientId || !professionalId || !appointmentDate || !startTime || !endTime || !procedureType || !roomId) {\n          alert(\'Por favor, preencha todos os campos obrigatórios.\');\n          return;\n        }\n        \n        // Construir datas ISO\n        const startDateTime = new Date(`${appointmentDate}T${startTime}`);\n        const endDateTime = new Date(`${appointmentDate}T${endTime}`);\n        \n        // Verificar se a data de término é posterior à data de início\n        if (endDateTime <= startDateTime) {\n          alert(\'A hora de término deve ser posterior à hora de início.\');\n          return;\n        }\n        \n        // Preparar dados do agendamento\n        const appointmentData = {\n          patientId: parseInt(patientId),\n          professionalId: parseInt(professionalId),\n          startTime: startDateTime.toISOString(),\n          endTime: endDateTime.toISOString(),\n          procedureType,\n          roomId: parseInt(roomId),\n          status: document.getElementById(\'status\').value,\n          notes: document.getElementById(\'notes\').value\n        };\n        \n        const appointmentId = appointmentIdInput.value;\n        let response;\n        \n        if (appointmentId) {\n          // Editar agendamento existente\n          response = await fetch(`/api/appointments/${appointmentId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(appointmentData)\n          });\n        } else {\n          // Adicionar novo agendamento\n          response = await fetch(\'/api/appointments\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(appointmentData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || \'Erro ao salvar agendamento\');\n        }\n        \n        // Fechar modal e recarregar lista\n        closeAppointmentModal();\n        loadAppointments();\n        \n        alert(appointmentId ? \'Agendamento atualizado com sucesso!\' : \'Agendamento adicionado com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar agendamento:\', error);\n        alert(`Erro ao salvar agendamento: ${error.message}`);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n  </script>\n', PosixPath('client/public/appointments.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 68fa51f27f1ad121ea319910f3a1cba7288e2ca2d0752c1e81c7ae24d57450a7e285313de9ce7a07a0b1b7bf5b3e1578d9d28360884df6bf65f8013975b0c999_0
2025-05-07 18:31:35,142 - semgrep.rule_match - DEBUG - match_key = ('\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', () => {\n      checkAuth();\n      setupEventListeners();\n      \n      const today = new Date();\n      currentMonth = today.getMonth();\n      currentYear = today.getFullYear();\n      \n      // Iniciar calendário\n      updateCalendarTitle();\n      renderCalendar();\n      \n      // Carregar filtros\n      loadProfessionals();\n      loadFacilities();\n      \n      // Carregar agendamentos\n      loadAppointments();\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const calendarTitleElement = document.getElementById(\'calendarTitle\');\n    const prevButton = document.getElementById(\'prevButton\');\n    const todayButton = document.getElementById(\'todayButton\');\n    const nextButton = document.getElementById(\'nextButton\');\n    const monthViewButton = document.getElementById(\'monthViewButton\');\n    const weekViewButton = document.getElementById(\'weekViewButton\');\n    const listViewButton = document.getElementById(\'listViewButton\');\n    const monthViewElement = document.getElementById(\'monthView\');\n    const weekViewElement = document.getElementById(\'weekView\');\n    const listViewElement = document.getElementById(\'listView\');\n    const newAppointmentButton = document.getElementById(\'newAppointmentButton\');\n    const appointmentModal = document.getElementById(\'appointmentModal\');\n    const viewAppointmentModal = document.getElementById(\'viewAppointmentModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const appointmentForm = document.getElementById(\'appointmentForm\');\n    const appointmentIdInput = document.getElementById(\'appointmentId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    const closeViewButton = document.getElementById(\'closeViewButton\');\n    const editAppointmentButton = document.getElementById(\'editAppointmentButton\');\n    const addEvolutionButton = document.getElementById(\'addEvolutionButton\');\n    const professionalFilter = document.getElementById(\'professionalFilter\');\n    const facilityFilter = document.getElementById(\'facilityFilter\');\n    const statusFilter = document.getElementById(\'statusFilter\');\n    const typeFilter = document.getElementById(\'typeFilter\');\n    \n    // Variáveis globais para o calendário\n    let currentMonth;\n    let currentYear;\n    let appointments = [];\n    let professionals = [];\n    let patients = [];\n    let facilities = [];\n    let rooms = [];\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        const userData = await response.json();\n        displayUserData(userData);\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir status\n    function translateStatus(status) {\n      const translations = {\n        \'scheduled\': \'Agendado\',\n        \'confirmed\': \'Confirmado\',\n        \'completed\': \'Concluído\',\n        \'attended\': \'Atendido\',\n        \'cancelled\': \'Cancelado\',\n        \'no_show\': \'Não compareceu\',\n        \'pending\': \'Pendente\'\n      };\n      \n      return translations[status] || status;\n    }\n    \n    // Traduzir tipo de procedimento\n    function translateProcedureType(type) {\n      const translations = {\n        \'psychology_aba\': \'Psicologia - ABA\',\n        \'psychology_cbt\': \'Psicologia - TCC\',\n        \'speech_therapy\': \'Fonoaudiologia\',\n        \'physical_therapy\': \'Fisioterapia\',\n        \'occupational_therapy\': \'Terapia Ocupacional\',\n        \'evaluation\': \'Avaliação\',\n        \'other\': \'Outro\',\n        \'free_time\': \'Tempo Livre\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Formatar data\n    function formatDate(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleDateString(\'pt-BR\');\n    }\n    \n    // Formatar hora\n    function formatTime(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleTimeString(\'pt-BR\', { hour: \'2-digit\', minute: \'2-digit\' });\n    }\n    \n    // Formatar data e hora\n    function formatDateTime(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleString(\'pt-BR\', {\n        day: \'2-digit\',\n        month: \'2-digit\',\n        year: \'numeric\',\n        hour: \'2-digit\',\n        minute: \'2-digit\'\n      });\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Filtros\n      professionalFilter.addEventListener(\'change\', filterAppointments);\n      facilityFilter.addEventListener(\'change\', filterAppointments);\n      statusFilter.addEventListener(\'change\', filterAppointments);\n      typeFilter.addEventListener(\'change\', filterAppointments);\n      \n      // Navegação do calendário\n      prevButton.addEventListener(\'click\', previousMonth);\n      todayButton.addEventListener(\'click\', goToToday);\n      nextButton.addEventListener(\'click\', nextMonth);\n      \n      // Alternar visualizações\n      monthViewButton.addEventListener(\'click\', showMonthView);\n      weekViewButton.addEventListener(\'click\', showWeekView);\n      listViewButton.addEventListener(\'click\', showListView);\n      \n      // Novo agendamento\n      newAppointmentButton.addEventListener(\'click\', openNewAppointmentModal);\n      \n      // Fechar modal\n      closeModal.addEventListener(\'click\', closeAppointmentModal);\n      closeViewModal.addEventListener(\'click\', closeViewAppointmentModal);\n      cancelButton.addEventListener(\'click\', closeAppointmentModal);\n      closeViewButton.addEventListener(\'click\', closeViewAppointmentModal);\n      \n      // Modal de background\n      appointmentModal.addEventListener(\'click\', function(e) {\n        if (e.target === appointmentModal) {\n          closeAppointmentModal();\n        }\n      });\n      \n      viewAppointmentModal.addEventListener(\'click\', function(e) {\n        if (e.target === viewAppointmentModal) {\n          closeViewAppointmentModal();\n        }\n      });\n      \n      // Salvar agendamento\n      saveButton.addEventListener(\'click\', saveAppointment);\n      \n      // Editar a partir da visualização\n      editAppointmentButton.addEventListener(\'click\', function() {\n        closeViewAppointmentModal();\n        editAppointment(this.dataset.appointmentId);\n      });\n      \n      // Botão para registrar evolução\n      addEvolutionButton.addEventListener(\'click\', function() {\n        const appointmentId = this.dataset.appointmentId;\n        window.location.href = `/evolutions.html?appointmentId=${appointmentId}`;\n      });\n    }\n    \n    // Carregar profissionais\n    async function loadProfessionals() {\n      try {\n        const response = await fetch(\'/api/professionals\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar profissionais\');\n        }\n        \n        professionals = await response.json();\n        \n        // Preencher select de filtro\n        professionalFilter.innerHTML = \'<option value="">Todos</option>\';\n        professionals.forEach(professional => {\n          const option = document.createElement(\'option\');\n          option.value = professional.id;\n          option.textContent = professional.user.fullName;\n          professionalFilter.appendChild(option);\n        });\n        \n        // Preencher select do formulário\n        const professionalIdSelect = document.getElementById(\'professionalId\');\n        professionalIdSelect.innerHTML = \'<option value="">Selecione o profissional</option>\';\n        professionals.forEach(professional => {\n          const option = document.createElement(\'option\');\n          option.value = professional.id;\n          option.textContent = professional.user.fullName;\n          professionalIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar profissionais:\', error);\n      }\n    }\n    \n    // Carregar unidades\n    async function loadFacilities() {\n      try {\n        const response = await fetch(\'/api/facilities\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar unidades\');\n        }\n        \n        facilities = await response.json();\n        \n        // Preencher select de filtro\n        facilityFilter.innerHTML = \'<option value="">Todas</option>\';\n        facilities.forEach(facility => {\n          const option = document.createElement(\'option\');\n          option.value = facility.id;\n          option.textContent = facility.name;\n          facilityFilter.appendChild(option);\n        });\n        \n        // Carregar salas da primeira unidade por padrão\n        if (facilities.length > 0) {\n          loadRooms(facilities[0].id);\n        }\n      } catch (error) {\n        console.error(\'Erro ao carregar unidades:\', error);\n      }\n    }\n    \n    // Carregar salas\n    async function loadRooms(facilityId) {\n      try {\n        const response = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar salas\');\n        }\n        \n        rooms = await response.json();\n        \n        // Preencher select do formulário\n        const roomIdSelect = document.getElementById(\'roomId\');\n        roomIdSelect.innerHTML = \'<option value="">Selecione a sala</option>\';\n        rooms.forEach(room => {\n          const option = document.createElement(\'option\');\n          option.value = room.id;\n          option.textContent = room.name;\n          roomIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar salas:\', error);\n      }\n    }\n    \n    // Carregar pacientes\n    async function loadPatients() {\n      try {\n        const response = await fetch(\'/api/patients\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar pacientes\');\n        }\n        \n        patients = await response.json();\n        \n        // Preencher select do formulário\n        const patientIdSelect = document.getElementById(\'patientId\');\n        patientIdSelect.innerHTML = \'<option value="">Selecione o paciente</option>\';\n        patients.forEach(patient => {\n          const option = document.createElement(\'option\');\n          option.value = patient.id;\n          option.textContent = patient.fullName;\n          patientIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar pacientes:\', error);\n      }\n    }\n    \n    // Carregar agendamentos\n    async function loadAppointments() {\n      try {\n        const url = new URL(\'/api/appointments\', window.location.origin);\n        \n        // Adicionar parâmetros de data\n        const startDate = new Date(currentYear, currentMonth, 1);\n        const endDate = new Date(currentYear, currentMonth + 1, 0);\n        \n        url.searchParams.append(\'startDate\', startDate.toISOString().split(\'T\')[0]);\n        url.searchParams.append(\'endDate\', endDate.toISOString().split(\'T\')[0]);\n        \n        // Adicionar filtros\n        if (professionalFilter.value) {\n          url.searchParams.append(\'professionalId\', professionalFilter.value);\n        }\n        \n        if (facilityFilter.value) {\n          url.searchParams.append(\'facilityId\', facilityFilter.value);\n        }\n        \n        if (statusFilter.value) {\n          url.searchParams.append(\'status\', statusFilter.value);\n        }\n        \n        if (typeFilter.value) {\n          url.searchParams.append(\'procedureType\', typeFilter.value);\n        }\n        \n        const response = await fetch(url, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar agendamentos\');\n        }\n        \n        appointments = await response.json();\n        \n        // Renderizar calendário com os agendamentos\n        renderCalendar();\n        renderListView();\n      } catch (error) {\n        console.error(\'Erro ao carregar agendamentos:\', error);\n      }\n    }\n    \n    // Filtrar agendamentos\n    function filterAppointments() {\n      loadAppointments();\n    }\n    \n    // Atualizar título do calendário\n    function updateCalendarTitle() {\n      const monthNames = [\n        \'Janeiro\', \'Fevereiro\', \'Março\', \'Abril\', \'Maio\', \'Junho\',\n        \'Julho\', \'Agosto\', \'Setembro\', \'Outubro\', \'Novembro\', \'Dezembro\'\n      ];\n      \n      calendarTitleElement.textContent = `${monthNames[currentMonth]} ${currentYear}`;\n    }\n    \n    // Renderizar calendário\n    function renderCalendar() {\n      const calendarGrid = document.querySelector(\'.calendar-grid\');\n      const daysContainer = document.createElement(\'div\');\n      daysContainer.className = \'calendar-days\';\n      \n      // Remover os dias existentes (exceto cabeçalhos)\n      const existingDays = calendarGrid.querySelectorAll(\'.calendar-day\');\n      existingDays.forEach(day => day.remove());\n      \n      // Obter o primeiro dia do mês\n      const firstDay = new Date(currentYear, currentMonth, 1);\n      const lastDay = new Date(currentYear, currentMonth + 1, 0);\n      \n      // Obter o dia da semana do primeiro dia (0 = Domingo, 1 = Segunda, etc.)\n      const firstDayOfWeek = firstDay.getDay();\n      \n      // Obter o número de dias no mês\n      const daysInMonth = lastDay.getDate();\n      \n      // Obter o último dia do mês anterior\n      const prevMonthLastDay = new Date(currentYear, currentMonth, 0).getDate();\n      \n      // Dia atual\n      const today = new Date();\n      const isCurrentMonth = today.getMonth() === currentMonth && today.getFullYear() === currentYear;\n      \n      // Dias do mês anterior\n      for (let i = 0; i < firstDayOfWeek; i++) {\n        const day = document.createElement(\'div\');\n        day.className = \'calendar-day other-month\';\n        \n        const dayNumber = prevMonthLastDay - firstDayOfWeek + i + 1;\n        day.innerHTML = `<div class="calendar-day-number">${dayNumber}</div>`;\n        \n        calendarGrid.appendChild(day);\n      }\n      \n      // Dias do mês atual\n      for (let i = 1; i <= daysInMonth; i++) {\n        const day = document.createElement(\'div\');\n        day.className = \'calendar-day\';\n        \n        // Se for hoje\n        if (isCurrentMonth && i === today.getDate()) {\n          day.classList.add(\'today\');\n        }\n        \n        day.innerHTML = `<div class="calendar-day-number">${i}</div>`;\n        \n        // Adicionar agendamentos para este dia\n        const date = new Date(currentYear, currentMonth, i);\n        const dateString = date.toISOString().split(\'T\')[0];\n        \n        const dayAppointments = appointments.filter(appointment => {\n          const appointmentDate = new Date(appointment.startTime);\n          return appointmentDate.toISOString().split(\'T\')[0] === dateString;\n        });\n        \n        dayAppointments.forEach(appointment => {\n          const appointmentElement = document.createElement(\'div\');\n          appointmentElement.className = `appointment ${appointment.status}`;\n          \n          const startTime = new Date(appointment.startTime);\n          const timeString = startTime.toLocaleTimeString(\'pt-BR\', { hour: \'2-digit\', minute: \'2-digit\' });\n          \n          // Encontrar dados relacionados\n          const patient = patients.find(p => p.id === appointment.patientId);\n          const professional = professionals.find(p => p.id === appointment.professionalId);\n          \n          appointmentElement.textContent = `${timeString} - ${patient ? patient.fullName : \'Paciente\'} (${translateProcedureType(appointment.procedureType)})`;\n          appointmentElement.title = `${timeString} - ${patient ? patient.fullName : \'Paciente\'} com ${professional ? professional.user.fullName : \'Profissional\'}`;\n          \n          // Adicionar evento de clique\n          appointmentElement.dataset.id = appointment.id;\n          appointmentElement.addEventListener(\'click\', () => viewAppointment(appointment.id));\n          \n          day.appendChild(appointmentElement);\n        });\n        \n        calendarGrid.appendChild(day);\n      }\n      \n      // Preencher o resto da grade com dias do próximo mês\n      const totalDaysDisplayed = firstDayOfWeek + daysInMonth;\n      const remainingDays = 42 - totalDaysDisplayed; // 6 linhas * 7 dias\n      \n      for (let i = 1; i <= remainingDays; i++) {\n        const day = document.createElement(\'div\');\n        day.className = \'calendar-day other-month\';\n        day.innerHTML = `<div class="calendar-day-number">${i}</div>`;\n        calendarGrid.appendChild(day);\n      }\n    }\n    \n    // Renderizar visualização em lista\n    function renderListView() {\n      const tbody = document.getElementById(\'appointmentsTableBody\');\n      tbody.innerHTML = \'\';\n      \n      if (appointments.length === 0) {\n        const row = document.createElement(\'tr\');\n        row.innerHTML = `\n          <td colspan="7">\n            <div class="empty-state">\n              <div class="empty-icon">📅</div>\n              <div class="empty-text">Nenhum agendamento encontrado para o período selecionado.</div>\n              <button class="button button-primary" id="emptyNewAppointmentBtn">Novo Agendamento</button>\n            </div>\n          </td>\n        `;\n        tbody.appendChild(row);\n        \n        document.getElementById(\'emptyNewAppointmentBtn\')?.addEventListener(\'click\', openNewAppointmentModal);\n        return;\n      }\n      \n      // Ordenar agendamentos por data\n      const sortedAppointments = [...appointments].sort((a, b) => {\n        return new Date(a.startTime) - new Date(b.startTime);\n      });\n      \n      sortedAppointments.forEach(appointment => {\n        const row = document.createElement(\'tr\');\n        \n        // Encontrar dados relacionados\n        const patient = patients.find(p => p.id === appointment.patientId);\n        const professional = professionals.find(p => p.id === appointment.professionalId);\n        const room = rooms.find(r => r.id === appointment.roomId);\n        \n        row.innerHTML = `\n          <td>${formatDateTime(appointment.startTime)}</td>\n          <td>${patient ? patient.fullName : \'N/A\'}</td>\n          <td>${professional ? professional.user.fullName : \'N/A\'}</td>\n          <td>${translateProcedureType(appointment.procedureType)}</td>\n          <td>${room ? room.name : \'N/A\'}</td>\n          <td><span class="status status-${appointment.status}">${translateStatus(appointment.status)}</span></td>\n          <td>\n            <button class="action-button view-appointment" data-id="${appointment.id}">Visualizar</button>\n            <button class="action-button edit-appointment" data-id="${appointment.id}">Editar</button>\n          </td>\n        `;\n        \n        tbody.appendChild(row);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-appointment\').forEach(button => {\n        button.addEventListener(\'click\', () => viewAppointment(button.dataset.id));\n      });\n      \n      document.querySelectorAll(\'.edit-appointment\').forEach(button => {\n        button.addEventListener(\'click\', () => editAppointment(button.dataset.id));\n      });\n    }\n    \n    // Navegar para o mês anterior\n    function previousMonth() {\n      currentMonth--;\n      if (currentMonth < 0) {\n        currentMonth = 11;\n        currentYear--;\n      }\n      updateCalendarTitle();\n      loadAppointments();\n    }\n    \n    // Navegar para o mês atual\n    function goToToday() {\n      const today = new Date();\n      currentMonth = today.getMonth();\n      currentYear = today.getFullYear();\n      updateCalendarTitle();\n      loadAppointments();\n    }\n    \n    // Navegar para o próximo mês\n    function nextMonth() {\n      currentMonth++;\n      if (currentMonth > 11) {\n        currentMonth = 0;\n        currentYear++;\n      }\n      updateCalendarTitle();\n      loadAppointments();\n    }\n    \n    // Mostrar visualização de mês\n    function showMonthView() {\n      monthViewButton.classList.add(\'active\');\n      weekViewButton.classList.remove(\'active\');\n      listViewButton.classList.remove(\'active\');\n      \n      monthViewElement.style.display = \'block\';\n      weekViewElement.style.display = \'none\';\n      listViewElement.style.display = \'none\';\n    }\n    \n    // Mostrar visualização de semana\n    function showWeekView() {\n      monthViewButton.classList.remove(\'active\');\n      weekViewButton.classList.add(\'active\');\n      listViewButton.classList.remove(\'active\');\n      \n      monthViewElement.style.display = \'none\';\n      weekViewElement.style.display = \'block\';\n      listViewElement.style.display = \'none\';\n      \n      // Implementar visualização da semana (simplificado)\n      alert(\'Visualização de semana será implementada em breve.\');\n      showMonthView(); // Voltar para visualização de mês por enquanto\n    }\n    \n    // Mostrar visualização de lista\n    function showListView() {\n      monthViewButton.classList.remove(\'active\');\n      weekViewButton.classList.remove(\'active\');\n      listViewButton.classList.add(\'active\');\n      \n      monthViewElement.style.display = \'none\';\n      weekViewElement.style.display = \'none\';\n      listViewElement.style.display = \'block\';\n    }\n    \n    // Abrir modal para novo agendamento\n    function openNewAppointmentModal() {\n      modalTitle.textContent = \'Novo Agendamento\';\n      appointmentForm.reset();\n      appointmentIdInput.value = \'\';\n      \n      // Carregar dados necessários\n      if (patients.length === 0) loadPatients();\n      if (professionals.length === 0) loadProfessionals();\n      if (facilities.length > 0 && rooms.length === 0) loadRooms(facilities[0].id);\n      \n      // Definir status padrão como "Agendado"\n      document.getElementById(\'status\').value = \'scheduled\';\n      \n      // Definir data padrão como hoje\n      const today = new Date();\n      const dateString = today.toISOString().split(\'T\')[0];\n      document.getElementById(\'appointmentDate\').value = dateString;\n      \n      appointmentModal.classList.add(\'active\');\n    }\n    \n    // Fechar modal de agendamento\n    function closeAppointmentModal() {\n      appointmentModal.classList.remove(\'active\');\n    }\n    \n    // Fechar modal de visualização\n    function closeViewAppointmentModal() {\n      viewAppointmentModal.classList.remove(\'active\');\n    }\n    \n    // Editar agendamento\n    async function editAppointment(appointmentId) {\n      try {\n        modalTitle.textContent = \'Editar Agendamento\';\n        \n        // Carregar dados necessários\n        if (patients.length === 0) await loadPatients();\n        if (professionals.length === 0) await loadProfessionals();\n        if (facilities.length > 0 && rooms.length === 0) await loadRooms(facilities[0].id);\n        \n        const appointment = appointments.find(a => a.id == appointmentId);\n        \n        if (!appointment) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/appointments/${appointmentId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados do agendamento\');\n          }\n          \n          const appointmentData = await response.json();\n          fillAppointmentForm(appointmentData);\n        } else {\n          fillAppointmentForm(appointment);\n        }\n        \n        appointmentModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar agendamento:\', error);\n        alert(\'Erro ao carregar dados do agendamento. Tente novamente.\');\n      }\n    }\n    \n    // Preencher formulário com dados do agendamento\n    function fillAppointmentForm(appointment) {\n      appointmentIdInput.value = appointment.id;\n      document.getElementById(\'patientId\').value = appointment.patientId || \'\';\n      document.getElementById(\'professionalId\').value = appointment.professionalId || \'\';\n      \n      // Data e hora\n      const startTime = new Date(appointment.startTime);\n      const endTime = new Date(appointment.endTime);\n      \n      document.getElementById(\'appointmentDate\').value = startTime.toISOString().split(\'T\')[0];\n      document.getElementById(\'startTime\').value = startTime.toLocaleTimeString(\'en-GB\', { hour: \'2-digit\', minute: \'2-digit\' });\n      document.getElementById(\'endTime\').value = endTime.toLocaleTimeString(\'en-GB\', { hour: \'2-digit\', minute: \'2-digit\' });\n      \n      document.getElementById(\'procedureType\').value = appointment.procedureType || \'\';\n      document.getElementById(\'roomId\').value = appointment.roomId || \'\';\n      document.getElementById(\'status\').value = appointment.status || \'scheduled\';\n      document.getElementById(\'notes\').value = appointment.notes || \'\';\n    }\n    \n    // Visualizar agendamento\n    async function viewAppointment(appointmentId) {\n      try {\n        // Carregar dados necessários\n        if (patients.length === 0) await loadPatients();\n        if (professionals.length === 0) await loadProfessionals();\n        \n        const appointment = appointments.find(a => a.id == appointmentId);\n        \n        if (!appointment) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/appointments/${appointmentId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados do agendamento\');\n          }\n          \n          const appointmentData = await response.json();\n          displayAppointmentDetails(appointmentData);\n        } else {\n          displayAppointmentDetails(appointment);\n        }\n        \n        // Configurar botão de edição\n        editAppointmentButton.dataset.appointmentId = appointmentId;\n        \n        viewAppointmentModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar agendamento:\', error);\n        alert(\'Erro ao carregar dados do agendamento. Tente novamente.\');\n      }\n    }\n    \n    // Exibir detalhes do agendamento\n    function displayAppointmentDetails(appointment) {\n      // Encontrar dados relacionados\n      const patient = patients.find(p => p.id === appointment.patientId);\n      const professional = professionals.find(p => p.id === appointment.professionalId);\n      const room = rooms.find(r => r.id === appointment.roomId);\n      \n      document.getElementById(\'viewPatient\').textContent = patient ? patient.fullName : \'N/A\';\n      document.getElementById(\'viewProfessional\').textContent = professional ? professional.user.fullName : \'N/A\';\n      \n      // Data e hora\n      const startTime = new Date(appointment.startTime);\n      const endTime = new Date(appointment.endTime);\n      \n      document.getElementById(\'viewDate\').textContent = formatDate(appointment.startTime);\n      document.getElementById(\'viewTime\').textContent = `${formatTime(appointment.startTime)} até ${formatTime(appointment.endTime)}`;\n      \n      document.getElementById(\'viewProcedureType\').textContent = translateProcedureType(appointment.procedureType);\n      document.getElementById(\'viewRoom\').textContent = room ? room.name : \'N/A\';\n      \n      const statusElement = document.getElementById(\'viewStatus\');\n      statusElement.textContent = translateStatus(appointment.status);\n      statusElement.className = `status status-${appointment.status}`;\n      \n      document.getElementById(\'viewNotes\').textContent = appointment.notes || \'Nenhuma observação\';\n      \n      // Configurar o botão de evolução (visível apenas quando status é "atendido")\n      const evolutionButton = document.getElementById(\'addEvolutionButton\');\n      if (appointment.status === \'attended\') {\n        evolutionButton.style.display = \'block\';\n        evolutionButton.dataset.appointmentId = appointment.id;\n      } else {\n        evolutionButton.style.display = \'none\';\n      }\n    }\n    \n    // Salvar agendamento\n    async function saveAppointment() {\n      try {\n        // Validação básica\n        const patientId = document.getElementById(\'patientId\').value;\n        const professionalId = document.getElementById(\'professionalId\').value;\n        const appointmentDate = document.getElementById(\'appointmentDate\').value;\n        const startTime = document.getElementById(\'startTime\').value;\n        const endTime = document.getElementById(\'endTime\').value;\n        const procedureType = document.getElementById(\'procedureType\').value;\n        const roomId = document.getElementById(\'roomId\').value;\n        \n        if (!patientId || !professionalId || !appointmentDate || !startTime || !endTime || !procedureType || !roomId) {\n          alert(\'Por favor, preencha todos os campos obrigatórios.\');\n          return;\n        }\n        \n        // Construir datas ISO\n        const startDateTime = new Date(`${appointmentDate}T${startTime}`);\n        const endDateTime = new Date(`${appointmentDate}T${endTime}`);\n        \n        // Verificar se a data de término é posterior à data de início\n        if (endDateTime <= startDateTime) {\n          alert(\'A hora de término deve ser posterior à hora de início.\');\n          return;\n        }\n        \n        // Preparar dados do agendamento\n        const appointmentData = {\n          patientId: parseInt(patientId),\n          professionalId: parseInt(professionalId),\n          startTime: startDateTime.toISOString(),\n          endTime: endDateTime.toISOString(),\n          procedureType,\n          roomId: parseInt(roomId),\n          status: document.getElementById(\'status\').value,\n          notes: document.getElementById(\'notes\').value\n        };\n        \n        const appointmentId = appointmentIdInput.value;\n        let response;\n        \n        if (appointmentId) {\n          // Editar agendamento existente\n          response = await fetch(`/api/appointments/${appointmentId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(appointmentData)\n          });\n        } else {\n          // Adicionar novo agendamento\n          response = await fetch(\'/api/appointments\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(appointmentData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || \'Erro ao salvar agendamento\');\n        }\n        \n        // Fechar modal e recarregar lista\n        closeAppointmentModal();\n        loadAppointments();\n        \n        alert(appointmentId ? \'Agendamento atualizado com sucesso!\' : \'Agendamento adicionado com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar agendamento:\', error);\n        alert(`Erro ao salvar agendamento: ${error.message}`);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n   $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', () => {\n      checkAuth();\n      setupEventListeners();\n      \n      const today = new Date();\n      currentMonth = today.getMonth();\n      currentYear = today.getFullYear();\n      \n      // Iniciar calendário\n      updateCalendarTitle();\n      renderCalendar();\n      \n      // Carregar filtros\n      loadProfessionals();\n      loadFacilities();\n      \n      // Carregar agendamentos\n      loadAppointments();\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const calendarTitleElement = document.getElementById(\'calendarTitle\');\n    const prevButton = document.getElementById(\'prevButton\');\n    const todayButton = document.getElementById(\'todayButton\');\n    const nextButton = document.getElementById(\'nextButton\');\n    const monthViewButton = document.getElementById(\'monthViewButton\');\n    const weekViewButton = document.getElementById(\'weekViewButton\');\n    const listViewButton = document.getElementById(\'listViewButton\');\n    const monthViewElement = document.getElementById(\'monthView\');\n    const weekViewElement = document.getElementById(\'weekView\');\n    const listViewElement = document.getElementById(\'listView\');\n    const newAppointmentButton = document.getElementById(\'newAppointmentButton\');\n    const appointmentModal = document.getElementById(\'appointmentModal\');\n    const viewAppointmentModal = document.getElementById(\'viewAppointmentModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const appointmentForm = document.getElementById(\'appointmentForm\');\n    const appointmentIdInput = document.getElementById(\'appointmentId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    const closeViewButton = document.getElementById(\'closeViewButton\');\n    const editAppointmentButton = document.getElementById(\'editAppointmentButton\');\n    const addEvolutionButton = document.getElementById(\'addEvolutionButton\');\n    const professionalFilter = document.getElementById(\'professionalFilter\');\n    const facilityFilter = document.getElementById(\'facilityFilter\');\n    const statusFilter = document.getElementById(\'statusFilter\');\n    const typeFilter = document.getElementById(\'typeFilter\');\n    \n    // Variáveis globais para o calendário\n    let currentMonth;\n    let currentYear;\n    let appointments = [];\n    let professionals = [];\n    let patients = [];\n    let facilities = [];\n    let rooms = [];\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        const userData = await response.json();\n        displayUserData(userData);\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir status\n    function translateStatus(status) {\n      const translations = {\n        \'scheduled\': \'Agendado\',\n        \'confirmed\': \'Confirmado\',\n        \'completed\': \'Concluído\',\n        \'attended\': \'Atendido\',\n        \'cancelled\': \'Cancelado\',\n        \'no_show\': \'Não compareceu\',\n        \'pending\': \'Pendente\'\n      };\n      \n      return translations[status] || status;\n    }\n    \n    // Traduzir tipo de procedimento\n    function translateProcedureType(type) {\n      const translations = {\n        \'psychology_aba\': \'Psicologia - ABA\',\n        \'psychology_cbt\': \'Psicologia - TCC\',\n        \'speech_therapy\': \'Fonoaudiologia\',\n        \'physical_therapy\': \'Fisioterapia\',\n        \'occupational_therapy\': \'Terapia Ocupacional\',\n        \'evaluation\': \'Avaliação\',\n        \'other\': \'Outro\',\n        \'free_time\': \'Tempo Livre\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Formatar data\n    function formatDate(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleDateString(\'pt-BR\');\n    }\n    \n    // Formatar hora\n    function formatTime(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleTimeString(\'pt-BR\', { hour: \'2-digit\', minute: \'2-digit\' });\n    }\n    \n    // Formatar data e hora\n    function formatDateTime(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleString(\'pt-BR\', {\n        day: \'2-digit\',\n        month: \'2-digit\',\n        year: \'numeric\',\n        hour: \'2-digit\',\n        minute: \'2-digit\'\n      });\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Filtros\n      professionalFilter.addEventListener(\'change\', filterAppointments);\n      facilityFilter.addEventListener(\'change\', filterAppointments);\n      statusFilter.addEventListener(\'change\', filterAppointments);\n      typeFilter.addEventListener(\'change\', filterAppointments);\n      \n      // Navegação do calendário\n      prevButton.addEventListener(\'click\', previousMonth);\n      todayButton.addEventListener(\'click\', goToToday);\n      nextButton.addEventListener(\'click\', nextMonth);\n      \n      // Alternar visualizações\n      monthViewButton.addEventListener(\'click\', showMonthView);\n      weekViewButton.addEventListener(\'click\', showWeekView);\n      listViewButton.addEventListener(\'click\', showListView);\n      \n      // Novo agendamento\n      newAppointmentButton.addEventListener(\'click\', openNewAppointmentModal);\n      \n      // Fechar modal\n      closeModal.addEventListener(\'click\', closeAppointmentModal);\n      closeViewModal.addEventListener(\'click\', closeViewAppointmentModal);\n      cancelButton.addEventListener(\'click\', closeAppointmentModal);\n      closeViewButton.addEventListener(\'click\', closeViewAppointmentModal);\n      \n      // Modal de background\n      appointmentModal.addEventListener(\'click\', function(e) {\n        if (e.target === appointmentModal) {\n          closeAppointmentModal();\n        }\n      });\n      \n      viewAppointmentModal.addEventListener(\'click\', function(e) {\n        if (e.target === viewAppointmentModal) {\n          closeViewAppointmentModal();\n        }\n      });\n      \n      // Salvar agendamento\n      saveButton.addEventListener(\'click\', saveAppointment);\n      \n      // Editar a partir da visualização\n      editAppointmentButton.addEventListener(\'click\', function() {\n        closeViewAppointmentModal();\n        editAppointment(this.dataset.appointmentId);\n      });\n      \n      // Botão para registrar evolução\n      addEvolutionButton.addEventListener(\'click\', function() {\n        const appointmentId = this.dataset.appointmentId;\n        window.location.href = `/evolutions.html?appointmentId=${appointmentId}`;\n      });\n    }\n    \n    // Carregar profissionais\n    async function loadProfessionals() {\n      try {\n        const response = await fetch(\'/api/professionals\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar profissionais\');\n        }\n        \n        professionals = await response.json();\n        \n        // Preencher select de filtro\n        professionalFilter.innerHTML = \'<option value="">Todos</option>\';\n        professionals.forEach(professional => {\n          const option = document.createElement(\'option\');\n          option.value = professional.id;\n          option.textContent = professional.user.fullName;\n          professionalFilter.appendChild(option);\n        });\n        \n        // Preencher select do formulário\n        const professionalIdSelect = document.getElementById(\'professionalId\');\n        professionalIdSelect.innerHTML = \'<option value="">Selecione o profissional</option>\';\n        professionals.forEach(professional => {\n          const option = document.createElement(\'option\');\n          option.value = professional.id;\n          option.textContent = professional.user.fullName;\n          professionalIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar profissionais:\', error);\n      }\n    }\n    \n    // Carregar unidades\n    async function loadFacilities() {\n      try {\n        const response = await fetch(\'/api/facilities\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar unidades\');\n        }\n        \n        facilities = await response.json();\n        \n        // Preencher select de filtro\n        facilityFilter.innerHTML = \'<option value="">Todas</option>\';\n        facilities.forEach(facility => {\n          const option = document.createElement(\'option\');\n          option.value = facility.id;\n          option.textContent = facility.name;\n          facilityFilter.appendChild(option);\n        });\n        \n        // Carregar salas da primeira unidade por padrão\n        if (facilities.length > 0) {\n          loadRooms(facilities[0].id);\n        }\n      } catch (error) {\n        console.error(\'Erro ao carregar unidades:\', error);\n      }\n    }\n    \n    // Carregar salas\n    async function loadRooms(facilityId) {\n      try {\n        const response = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar salas\');\n        }\n        \n        rooms = await response.json();\n        \n        // Preencher select do formulário\n        const roomIdSelect = document.getElementById(\'roomId\');\n        roomIdSelect.innerHTML = \'<option value="">Selecione a sala</option>\';\n        rooms.forEach(room => {\n          const option = document.createElement(\'option\');\n          option.value = room.id;\n          option.textContent = room.name;\n          roomIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar salas:\', error);\n      }\n    }\n    \n    // Carregar pacientes\n    async function loadPatients() {\n      try {\n        const response = await fetch(\'/api/patients\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar pacientes\');\n        }\n        \n        patients = await response.json();\n        \n        // Preencher select do formulário\n        const patientIdSelect = document.getElementById(\'patientId\');\n        patientIdSelect.innerHTML = \'<option value="">Selecione o paciente</option>\';\n        patients.forEach(patient => {\n          const option = document.createElement(\'option\');\n          option.value = patient.id;\n          option.textContent = patient.fullName;\n          patientIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar pacientes:\', error);\n      }\n    }\n    \n    // Carregar agendamentos\n    async function loadAppointments() {\n      try {\n        const url = new URL(\'/api/appointments\', window.location.origin);\n        \n        // Adicionar parâmetros de data\n        const startDate = new Date(currentYear, currentMonth, 1);\n        const endDate = new Date(currentYear, currentMonth + 1, 0);\n        \n        url.searchParams.append(\'startDate\', startDate.toISOString().split(\'T\')[0]);\n        url.searchParams.append(\'endDate\', endDate.toISOString().split(\'T\')[0]);\n        \n        // Adicionar filtros\n        if (professionalFilter.value) {\n          url.searchParams.append(\'professionalId\', professionalFilter.value);\n        }\n        \n        if (facilityFilter.value) {\n          url.searchParams.append(\'facilityId\', facilityFilter.value);\n        }\n        \n        if (statusFilter.value) {\n          url.searchParams.append(\'status\', statusFilter.value);\n        }\n        \n        if (typeFilter.value) {\n          url.searchParams.append(\'procedureType\', typeFilter.value);\n        }\n        \n        const response = await fetch(url, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar agendamentos\');\n        }\n        \n        appointments = await response.json();\n        \n        // Renderizar calendário com os agendamentos\n        renderCalendar();\n        renderListView();\n      } catch (error) {\n        console.error(\'Erro ao carregar agendamentos:\', error);\n      }\n    }\n    \n    // Filtrar agendamentos\n    function filterAppointments() {\n      loadAppointments();\n    }\n    \n    // Atualizar título do calendário\n    function updateCalendarTitle() {\n      const monthNames = [\n        \'Janeiro\', \'Fevereiro\', \'Março\', \'Abril\', \'Maio\', \'Junho\',\n        \'Julho\', \'Agosto\', \'Setembro\', \'Outubro\', \'Novembro\', \'Dezembro\'\n      ];\n      \n      calendarTitleElement.textContent = `${monthNames[currentMonth]} ${currentYear}`;\n    }\n    \n    // Renderizar calendário\n    function renderCalendar() {\n      const calendarGrid = document.querySelector(\'.calendar-grid\');\n      const daysContainer = document.createElement(\'div\');\n      daysContainer.className = \'calendar-days\';\n      \n      // Remover os dias existentes (exceto cabeçalhos)\n      const existingDays = calendarGrid.querySelectorAll(\'.calendar-day\');\n      existingDays.forEach(day => day.remove());\n      \n      // Obter o primeiro dia do mês\n      const firstDay = new Date(currentYear, currentMonth, 1);\n      const lastDay = new Date(currentYear, currentMonth + 1, 0);\n      \n      // Obter o dia da semana do primeiro dia (0 = Domingo, 1 = Segunda, etc.)\n      const firstDayOfWeek = firstDay.getDay();\n      \n      // Obter o número de dias no mês\n      const daysInMonth = lastDay.getDate();\n      \n      // Obter o último dia do mês anterior\n      const prevMonthLastDay = new Date(currentYear, currentMonth, 0).getDate();\n      \n      // Dia atual\n      const today = new Date();\n      const isCurrentMonth = today.getMonth() === currentMonth && today.getFullYear() === currentYear;\n      \n      // Dias do mês anterior\n      for (let i = 0; i < firstDayOfWeek; i++) {\n        const day = document.createElement(\'div\');\n        day.className = \'calendar-day other-month\';\n        \n        const dayNumber = prevMonthLastDay - firstDayOfWeek + i + 1;\n        day.innerHTML = `<div class="calendar-day-number">${dayNumber}</div>`;\n        \n        calendarGrid.appendChild(day);\n      }\n      \n      // Dias do mês atual\n      for (let i = 1; i <= daysInMonth; i++) {\n        const day = document.createElement(\'div\');\n        day.className = \'calendar-day\';\n        \n        // Se for hoje\n        if (isCurrentMonth && i === today.getDate()) {\n          day.classList.add(\'today\');\n        }\n        \n        day.innerHTML = `<div class="calendar-day-number">${i}</div>`;\n        \n        // Adicionar agendamentos para este dia\n        const date = new Date(currentYear, currentMonth, i);\n        const dateString = date.toISOString().split(\'T\')[0];\n        \n        const dayAppointments = appointments.filter(appointment => {\n          const appointmentDate = new Date(appointment.startTime);\n          return appointmentDate.toISOString().split(\'T\')[0] === dateString;\n        });\n        \n        dayAppointments.forEach(appointment => {\n          const appointmentElement = document.createElement(\'div\');\n          appointmentElement.className = `appointment ${appointment.status}`;\n          \n          const startTime = new Date(appointment.startTime);\n          const timeString = startTime.toLocaleTimeString(\'pt-BR\', { hour: \'2-digit\', minute: \'2-digit\' });\n          \n          // Encontrar dados relacionados\n          const patient = patients.find(p => p.id === appointment.patientId);\n          const professional = professionals.find(p => p.id === appointment.professionalId);\n          \n          appointmentElement.textContent = `${timeString} - ${patient ? patient.fullName : \'Paciente\'} (${translateProcedureType(appointment.procedureType)})`;\n          appointmentElement.title = `${timeString} - ${patient ? patient.fullName : \'Paciente\'} com ${professional ? professional.user.fullName : \'Profissional\'}`;\n          \n          // Adicionar evento de clique\n          appointmentElement.dataset.id = appointment.id;\n          appointmentElement.addEventListener(\'click\', () => viewAppointment(appointment.id));\n          \n          day.appendChild(appointmentElement);\n        });\n        \n        calendarGrid.appendChild(day);\n      }\n      \n      // Preencher o resto da grade com dias do próximo mês\n      const totalDaysDisplayed = firstDayOfWeek + daysInMonth;\n      const remainingDays = 42 - totalDaysDisplayed; // 6 linhas * 7 dias\n      \n      for (let i = 1; i <= remainingDays; i++) {\n        const day = document.createElement(\'div\');\n        day.className = \'calendar-day other-month\';\n        day.innerHTML = `<div class="calendar-day-number">${i}</div>`;\n        calendarGrid.appendChild(day);\n      }\n    }\n    \n    // Renderizar visualização em lista\n    function renderListView() {\n      const tbody = document.getElementById(\'appointmentsTableBody\');\n      tbody.innerHTML = \'\';\n      \n      if (appointments.length === 0) {\n        const row = document.createElement(\'tr\');\n        row.innerHTML = `\n          <td colspan="7">\n            <div class="empty-state">\n              <div class="empty-icon">📅</div>\n              <div class="empty-text">Nenhum agendamento encontrado para o período selecionado.</div>\n              <button class="button button-primary" id="emptyNewAppointmentBtn">Novo Agendamento</button>\n            </div>\n          </td>\n        `;\n        tbody.appendChild(row);\n        \n        document.getElementById(\'emptyNewAppointmentBtn\')?.addEventListener(\'click\', openNewAppointmentModal);\n        return;\n      }\n      \n      // Ordenar agendamentos por data\n      const sortedAppointments = [...appointments].sort((a, b) => {\n        return new Date(a.startTime) - new Date(b.startTime);\n      });\n      \n      sortedAppointments.forEach(appointment => {\n        const row = document.createElement(\'tr\');\n        \n        // Encontrar dados relacionados\n        const patient = patients.find(p => p.id === appointment.patientId);\n        const professional = professionals.find(p => p.id === appointment.professionalId);\n        const room = rooms.find(r => r.id === appointment.roomId);\n        \n        row.innerHTML = `\n          <td>${formatDateTime(appointment.startTime)}</td>\n          <td>${patient ? patient.fullName : \'N/A\'}</td>\n          <td>${professional ? professional.user.fullName : \'N/A\'}</td>\n          <td>${translateProcedureType(appointment.procedureType)}</td>\n          <td>${room ? room.name : \'N/A\'}</td>\n          <td><span class="status status-${appointment.status}">${translateStatus(appointment.status)}</span></td>\n          <td>\n            <button class="action-button view-appointment" data-id="${appointment.id}">Visualizar</button>\n            <button class="action-button edit-appointment" data-id="${appointment.id}">Editar</button>\n          </td>\n        `;\n        \n        tbody.appendChild(row);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-appointment\').forEach(button => {\n        button.addEventListener(\'click\', () => viewAppointment(button.dataset.id));\n      });\n      \n      document.querySelectorAll(\'.edit-appointment\').forEach(button => {\n        button.addEventListener(\'click\', () => editAppointment(button.dataset.id));\n      });\n    }\n    \n    // Navegar para o mês anterior\n    function previousMonth() {\n      currentMonth--;\n      if (currentMonth < 0) {\n        currentMonth = 11;\n        currentYear--;\n      }\n      updateCalendarTitle();\n      loadAppointments();\n    }\n    \n    // Navegar para o mês atual\n    function goToToday() {\n      const today = new Date();\n      currentMonth = today.getMonth();\n      currentYear = today.getFullYear();\n      updateCalendarTitle();\n      loadAppointments();\n    }\n    \n    // Navegar para o próximo mês\n    function nextMonth() {\n      currentMonth++;\n      if (currentMonth > 11) {\n        currentMonth = 0;\n        currentYear++;\n      }\n      updateCalendarTitle();\n      loadAppointments();\n    }\n    \n    // Mostrar visualização de mês\n    function showMonthView() {\n      monthViewButton.classList.add(\'active\');\n      weekViewButton.classList.remove(\'active\');\n      listViewButton.classList.remove(\'active\');\n      \n      monthViewElement.style.display = \'block\';\n      weekViewElement.style.display = \'none\';\n      listViewElement.style.display = \'none\';\n    }\n    \n    // Mostrar visualização de semana\n    function showWeekView() {\n      monthViewButton.classList.remove(\'active\');\n      weekViewButton.classList.add(\'active\');\n      listViewButton.classList.remove(\'active\');\n      \n      monthViewElement.style.display = \'none\';\n      weekViewElement.style.display = \'block\';\n      listViewElement.style.display = \'none\';\n      \n      // Implementar visualização da semana (simplificado)\n      alert(\'Visualização de semana será implementada em breve.\');\n      showMonthView(); // Voltar para visualização de mês por enquanto\n    }\n    \n    // Mostrar visualização de lista\n    function showListView() {\n      monthViewButton.classList.remove(\'active\');\n      weekViewButton.classList.remove(\'active\');\n      listViewButton.classList.add(\'active\');\n      \n      monthViewElement.style.display = \'none\';\n      weekViewElement.style.display = \'none\';\n      listViewElement.style.display = \'block\';\n    }\n    \n    // Abrir modal para novo agendamento\n    function openNewAppointmentModal() {\n      modalTitle.textContent = \'Novo Agendamento\';\n      appointmentForm.reset();\n      appointmentIdInput.value = \'\';\n      \n      // Carregar dados necessários\n      if (patients.length === 0) loadPatients();\n      if (professionals.length === 0) loadProfessionals();\n      if (facilities.length > 0 && rooms.length === 0) loadRooms(facilities[0].id);\n      \n      // Definir status padrão como "Agendado"\n      document.getElementById(\'status\').value = \'scheduled\';\n      \n      // Definir data padrão como hoje\n      const today = new Date();\n      const dateString = today.toISOString().split(\'T\')[0];\n      document.getElementById(\'appointmentDate\').value = dateString;\n      \n      appointmentModal.classList.add(\'active\');\n    }\n    \n    // Fechar modal de agendamento\n    function closeAppointmentModal() {\n      appointmentModal.classList.remove(\'active\');\n    }\n    \n    // Fechar modal de visualização\n    function closeViewAppointmentModal() {\n      viewAppointmentModal.classList.remove(\'active\');\n    }\n    \n    // Editar agendamento\n    async function editAppointment(appointmentId) {\n      try {\n        modalTitle.textContent = \'Editar Agendamento\';\n        \n        // Carregar dados necessários\n        if (patients.length === 0) await loadPatients();\n        if (professionals.length === 0) await loadProfessionals();\n        if (facilities.length > 0 && rooms.length === 0) await loadRooms(facilities[0].id);\n        \n        const appointment = appointments.find(a => a.id == appointmentId);\n        \n        if (!appointment) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/appointments/${appointmentId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados do agendamento\');\n          }\n          \n          const appointmentData = await response.json();\n          fillAppointmentForm(appointmentData);\n        } else {\n          fillAppointmentForm(appointment);\n        }\n        \n        appointmentModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar agendamento:\', error);\n        alert(\'Erro ao carregar dados do agendamento. Tente novamente.\');\n      }\n    }\n    \n    // Preencher formulário com dados do agendamento\n    function fillAppointmentForm(appointment) {\n      appointmentIdInput.value = appointment.id;\n      document.getElementById(\'patientId\').value = appointment.patientId || \'\';\n      document.getElementById(\'professionalId\').value = appointment.professionalId || \'\';\n      \n      // Data e hora\n      const startTime = new Date(appointment.startTime);\n      const endTime = new Date(appointment.endTime);\n      \n      document.getElementById(\'appointmentDate\').value = startTime.toISOString().split(\'T\')[0];\n      document.getElementById(\'startTime\').value = startTime.toLocaleTimeString(\'en-GB\', { hour: \'2-digit\', minute: \'2-digit\' });\n      document.getElementById(\'endTime\').value = endTime.toLocaleTimeString(\'en-GB\', { hour: \'2-digit\', minute: \'2-digit\' });\n      \n      document.getElementById(\'procedureType\').value = appointment.procedureType || \'\';\n      document.getElementById(\'roomId\').value = appointment.roomId || \'\';\n      document.getElementById(\'status\').value = appointment.status || \'scheduled\';\n      document.getElementById(\'notes\').value = appointment.notes || \'\';\n    }\n    \n    // Visualizar agendamento\n    async function viewAppointment(appointmentId) {\n      try {\n        // Carregar dados necessários\n        if (patients.length === 0) await loadPatients();\n        if (professionals.length === 0) await loadProfessionals();\n        \n        const appointment = appointments.find(a => a.id == appointmentId);\n        \n        if (!appointment) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/appointments/${appointmentId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados do agendamento\');\n          }\n          \n          const appointmentData = await response.json();\n          displayAppointmentDetails(appointmentData);\n        } else {\n          displayAppointmentDetails(appointment);\n        }\n        \n        // Configurar botão de edição\n        editAppointmentButton.dataset.appointmentId = appointmentId;\n        \n        viewAppointmentModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar agendamento:\', error);\n        alert(\'Erro ao carregar dados do agendamento. Tente novamente.\');\n      }\n    }\n    \n    // Exibir detalhes do agendamento\n    function displayAppointmentDetails(appointment) {\n      // Encontrar dados relacionados\n      const patient = patients.find(p => p.id === appointment.patientId);\n      const professional = professionals.find(p => p.id === appointment.professionalId);\n      const room = rooms.find(r => r.id === appointment.roomId);\n      \n      document.getElementById(\'viewPatient\').textContent = patient ? patient.fullName : \'N/A\';\n      document.getElementById(\'viewProfessional\').textContent = professional ? professional.user.fullName : \'N/A\';\n      \n      // Data e hora\n      const startTime = new Date(appointment.startTime);\n      const endTime = new Date(appointment.endTime);\n      \n      document.getElementById(\'viewDate\').textContent = formatDate(appointment.startTime);\n      document.getElementById(\'viewTime\').textContent = `${formatTime(appointment.startTime)} até ${formatTime(appointment.endTime)}`;\n      \n      document.getElementById(\'viewProcedureType\').textContent = translateProcedureType(appointment.procedureType);\n      document.getElementById(\'viewRoom\').textContent = room ? room.name : \'N/A\';\n      \n      const statusElement = document.getElementById(\'viewStatus\');\n      statusElement.textContent = translateStatus(appointment.status);\n      statusElement.className = `status status-${appointment.status}`;\n      \n      document.getElementById(\'viewNotes\').textContent = appointment.notes || \'Nenhuma observação\';\n      \n      // Configurar o botão de evolução (visível apenas quando status é "atendido")\n      const evolutionButton = document.getElementById(\'addEvolutionButton\');\n      if (appointment.status === \'attended\') {\n        evolutionButton.style.display = \'block\';\n        evolutionButton.dataset.appointmentId = appointment.id;\n      } else {\n        evolutionButton.style.display = \'none\';\n      }\n    }\n    \n    // Salvar agendamento\n    async function saveAppointment() {\n      try {\n        // Validação básica\n        const patientId = document.getElementById(\'patientId\').value;\n        const professionalId = document.getElementById(\'professionalId\').value;\n        const appointmentDate = document.getElementById(\'appointmentDate\').value;\n        const startTime = document.getElementById(\'startTime\').value;\n        const endTime = document.getElementById(\'endTime\').value;\n        const procedureType = document.getElementById(\'procedureType\').value;\n        const roomId = document.getElementById(\'roomId\').value;\n        \n        if (!patientId || !professionalId || !appointmentDate || !startTime || !endTime || !procedureType || !roomId) {\n          alert(\'Por favor, preencha todos os campos obrigatórios.\');\n          return;\n        }\n        \n        // Construir datas ISO\n        const startDateTime = new Date(`${appointmentDate}T${startTime}`);\n        const endDateTime = new Date(`${appointmentDate}T${endTime}`);\n        \n        // Verificar se a data de término é posterior à data de início\n        if (endDateTime <= startDateTime) {\n          alert(\'A hora de término deve ser posterior à hora de início.\');\n          return;\n        }\n        \n        // Preparar dados do agendamento\n        const appointmentData = {\n          patientId: parseInt(patientId),\n          professionalId: parseInt(professionalId),\n          startTime: startDateTime.toISOString(),\n          endTime: endDateTime.toISOString(),\n          procedureType,\n          roomId: parseInt(roomId),\n          status: document.getElementById(\'status\').value,\n          notes: document.getElementById(\'notes\').value\n        };\n        \n        const appointmentId = appointmentIdInput.value;\n        let response;\n        \n        if (appointmentId) {\n          // Editar agendamento existente\n          response = await fetch(`/api/appointments/${appointmentId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(appointmentData)\n          });\n        } else {\n          // Adicionar novo agendamento\n          response = await fetch(\'/api/appointments\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(appointmentData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || \'Erro ao salvar agendamento\');\n        }\n        \n        // Fechar modal e recarregar lista\n        closeAppointmentModal();\n        loadAppointments();\n        \n        alert(appointmentId ? \'Agendamento atualizado com sucesso!\' : \'Agendamento adicionado com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar agendamento:\', error);\n        alert(`Erro ao salvar agendamento: ${error.message}`);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n  </script>\n', PosixPath('client/public/appointments.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 68fa51f27f1ad121ea319910f3a1cba7288e2ca2d0752c1e81c7ae24d57450a7e285313de9ce7a07a0b1b7bf5b3e1578d9d28360884df6bf65f8013975b0c999_0
2025-05-07 18:31:35,145 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('client/public/dashboard.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 1d516adcfbf988e0f3d134de3080a39d0f10ac192f6fd04bd93e6f30ed2eaec63fc8877c0354dc32cb7ee243fa8ff23d426db3ccec88a29bfdd2eb9565fa9eae_0
2025-05-07 18:31:35,147 - semgrep.rule_match - DEBUG - match_key = ('\n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const userIdElement = document.getElementById(\'userId\');\n    const usernameValueElement = document.getElementById(\'usernameValue\');\n    const fullNameValueElement = document.getElementById(\'fullNameValue\');\n    const emailValueElement = document.getElementById(\'emailValue\');\n    const roleValueElement = document.getElementById(\'roleValue\');\n    const lastLoginValueElement = document.getElementById(\'lastLoginValue\');\n    const appointmentsTableElement = document.getElementById(\'appointmentsTable\');\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        const userData = await response.json();\n        displayUserData(userData);\n        \n        // Carregar dados de exemplo para a tabela\n        loadSampleAppointments();\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n      \n      // Preencher os valores do perfil\n      userIdElement.textContent = user.id;\n      usernameValueElement.textContent = user.username;\n      fullNameValueElement.textContent = user.fullName;\n      emailValueElement.textContent = user.email;\n      roleValueElement.textContent = translateRole(user.role);\n      \n      // Formatar data de último login\n      const lastLogin = new Date(user.lastLogin);\n      lastLoginValueElement.textContent = lastLogin.toLocaleString(\'pt-BR\');\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir status\n    function translateStatus(status) {\n      const translations = {\n        \'scheduled\': \'Agendado\',\n        \'confirmed\': \'Confirmado\',\n        \'completed\': \'Concluído\',\n        \'cancelled\': \'Cancelado\',\n        \'no_show\': \'Não compareceu\',\n        \'pending\': \'Pendente\'\n      };\n      \n      return translations[status] || status;\n    }\n    \n    // Obter classe CSS para status\n    function getStatusClass(status) {\n      switch (status) {\n        case \'completed\':\n          return \'status-completed\';\n        case \'scheduled\':\n        case \'confirmed\':\n          return \'status-scheduled\';\n        case \'cancelled\':\n        case \'no_show\':\n          return \'status-cancelled\';\n        default:\n          return \'\';\n      }\n    }\n    \n    // Traduzir tipo de procedimento\n    function translateProcedureType(type) {\n      const translations = {\n        \'psychology_aba\': \'Psicologia - ABA\',\n        \'psychology_cbt\': \'Psicologia - TCC\',\n        \'speech_therapy\': \'Fonoaudiologia\',\n        \'physical_therapy\': \'Fisioterapia\',\n        \'occupational_therapy\': \'Terapia Ocupacional\',\n        \'evaluation\': \'Avaliação\',\n        \'other\': \'Outro\',\n        \'free_time\': \'Tempo Livre\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Carregar dados de exemplo para a tabela de agendamentos\n    function loadSampleAppointments() {\n      const sampleAppointments = [\n        {\n          patient: \'Maria Silva\',\n          professional: \'Dr. João Santos\',\n          dateTime: \'2025-05-07T14:30:00\',\n          procedureType: \'psychology_aba\',\n          status: \'scheduled\'\n        },\n        {\n          patient: \'Carlos Oliveira\',\n          professional: \'Dra. Ana Pereira\',\n          dateTime: \'2025-05-06T10:00:00\',\n          procedureType: \'physical_therapy\',\n          status: \'completed\'\n        },\n        {\n          patient: \'Juliana Costa\',\n          professional: \'Dr. Marcos Lima\',\n          dateTime: \'2025-05-08T16:15:00\',\n          procedureType: \'speech_therapy\',\n          status: \'confirmed\'\n        },\n        {\n          patient: \'Pedro Souza\',\n          professional: \'Dra. Paula Ribeiro\',\n          dateTime: \'2025-05-05T09:00:00\',\n          procedureType: \'evaluation\',\n          status: \'cancelled\'\n        },\n        {\n          patient: \'Luciana Ferreira\',\n          professional: \'Dr. Roberto Alves\',\n          dateTime: \'2025-05-07T11:30:00\',\n          procedureType: \'occupational_therapy\',\n          status: \'scheduled\'\n        }\n      ];\n      \n      // Limpar tabela\n      appointmentsTableElement.innerHTML = \'\';\n      \n      // Adicionar linhas\n      sampleAppointments.forEach(appointment => {\n        const row = document.createElement(\'tr\');\n        \n        const dateTime = new Date(appointment.dateTime);\n        const formattedDateTime = dateTime.toLocaleString(\'pt-BR\', {\n          day: \'2-digit\',\n          month: \'2-digit\',\n          year: \'numeric\',\n          hour: \'2-digit\',\n          minute: \'2-digit\'\n        });\n        \n        row.innerHTML = `\n          <td>${appointment.patient}</td>\n          <td>${appointment.professional}</td>\n          <td>${formattedDateTime}</td>\n          <td>${translateProcedureType(appointment.procedureType)}</td>\n          <td><span class="status ${getStatusClass(appointment.status)}">${translateStatus(appointment.status)}</span></td>\n          <td><button class="action-button">Ver detalhes</button></td>\n        `;\n        \n        appointmentsTableElement.appendChild(row);\n      });\n    }\n    \n    // Manipular logout\n    logoutButton.addEventListener(\'click\', async () => {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    });\n    \n    // Inicializar\n    document.addEventListener(\'DOMContentLoaded\', checkAuth);\n   $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const userIdElement = document.getElementById(\'userId\');\n    const usernameValueElement = document.getElementById(\'usernameValue\');\n    const fullNameValueElement = document.getElementById(\'fullNameValue\');\n    const emailValueElement = document.getElementById(\'emailValue\');\n    const roleValueElement = document.getElementById(\'roleValue\');\n    const lastLoginValueElement = document.getElementById(\'lastLoginValue\');\n    const appointmentsTableElement = document.getElementById(\'appointmentsTable\');\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        const userData = await response.json();\n        displayUserData(userData);\n        \n        // Carregar dados de exemplo para a tabela\n        loadSampleAppointments();\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n      \n      // Preencher os valores do perfil\n      userIdElement.textContent = user.id;\n      usernameValueElement.textContent = user.username;\n      fullNameValueElement.textContent = user.fullName;\n      emailValueElement.textContent = user.email;\n      roleValueElement.textContent = translateRole(user.role);\n      \n      // Formatar data de último login\n      const lastLogin = new Date(user.lastLogin);\n      lastLoginValueElement.textContent = lastLogin.toLocaleString(\'pt-BR\');\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir status\n    function translateStatus(status) {\n      const translations = {\n        \'scheduled\': \'Agendado\',\n        \'confirmed\': \'Confirmado\',\n        \'completed\': \'Concluído\',\n        \'cancelled\': \'Cancelado\',\n        \'no_show\': \'Não compareceu\',\n        \'pending\': \'Pendente\'\n      };\n      \n      return translations[status] || status;\n    }\n    \n    // Obter classe CSS para status\n    function getStatusClass(status) {\n      switch (status) {\n        case \'completed\':\n          return \'status-completed\';\n        case \'scheduled\':\n        case \'confirmed\':\n          return \'status-scheduled\';\n        case \'cancelled\':\n        case \'no_show\':\n          return \'status-cancelled\';\n        default:\n          return \'\';\n      }\n    }\n    \n    // Traduzir tipo de procedimento\n    function translateProcedureType(type) {\n      const translations = {\n        \'psychology_aba\': \'Psicologia - ABA\',\n        \'psychology_cbt\': \'Psicologia - TCC\',\n        \'speech_therapy\': \'Fonoaudiologia\',\n        \'physical_therapy\': \'Fisioterapia\',\n        \'occupational_therapy\': \'Terapia Ocupacional\',\n        \'evaluation\': \'Avaliação\',\n        \'other\': \'Outro\',\n        \'free_time\': \'Tempo Livre\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Carregar dados de exemplo para a tabela de agendamentos\n    function loadSampleAppointments() {\n      const sampleAppointments = [\n        {\n          patient: \'Maria Silva\',\n          professional: \'Dr. João Santos\',\n          dateTime: \'2025-05-07T14:30:00\',\n          procedureType: \'psychology_aba\',\n          status: \'scheduled\'\n        },\n        {\n          patient: \'Carlos Oliveira\',\n          professional: \'Dra. Ana Pereira\',\n          dateTime: \'2025-05-06T10:00:00\',\n          procedureType: \'physical_therapy\',\n          status: \'completed\'\n        },\n        {\n          patient: \'Juliana Costa\',\n          professional: \'Dr. Marcos Lima\',\n          dateTime: \'2025-05-08T16:15:00\',\n          procedureType: \'speech_therapy\',\n          status: \'confirmed\'\n        },\n        {\n          patient: \'Pedro Souza\',\n          professional: \'Dra. Paula Ribeiro\',\n          dateTime: \'2025-05-05T09:00:00\',\n          procedureType: \'evaluation\',\n          status: \'cancelled\'\n        },\n        {\n          patient: \'Luciana Ferreira\',\n          professional: \'Dr. Roberto Alves\',\n          dateTime: \'2025-05-07T11:30:00\',\n          procedureType: \'occupational_therapy\',\n          status: \'scheduled\'\n        }\n      ];\n      \n      // Limpar tabela\n      appointmentsTableElement.innerHTML = \'\';\n      \n      // Adicionar linhas\n      sampleAppointments.forEach(appointment => {\n        const row = document.createElement(\'tr\');\n        \n        const dateTime = new Date(appointment.dateTime);\n        const formattedDateTime = dateTime.toLocaleString(\'pt-BR\', {\n          day: \'2-digit\',\n          month: \'2-digit\',\n          year: \'numeric\',\n          hour: \'2-digit\',\n          minute: \'2-digit\'\n        });\n        \n        row.innerHTML = `\n          <td>${appointment.patient}</td>\n          <td>${appointment.professional}</td>\n          <td>${formattedDateTime}</td>\n          <td>${translateProcedureType(appointment.procedureType)}</td>\n          <td><span class="status ${getStatusClass(appointment.status)}">${translateStatus(appointment.status)}</span></td>\n          <td><button class="action-button">Ver detalhes</button></td>\n        `;\n        \n        appointmentsTableElement.appendChild(row);\n      });\n    }\n    \n    // Manipular logout\n    logoutButton.addEventListener(\'click\', async () => {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    });\n    \n    // Inicializar\n    document.addEventListener(\'DOMContentLoaded\', checkAuth);\n  </script>\n', PosixPath('client/public/dashboard.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 0238d1d753ddc131a7e0cba128f494dac3df736262016e1b7d755f5e88671f4e7c0e1cc6745bcb4bd134218852c4c5c39ba1030855f16ef22aac6f0faa97ce4f_0
2025-05-07 18:31:35,149 - semgrep.rule_match - DEBUG - match_key = ('\n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const userIdElement = document.getElementById(\'userId\');\n    const usernameValueElement = document.getElementById(\'usernameValue\');\n    const fullNameValueElement = document.getElementById(\'fullNameValue\');\n    const emailValueElement = document.getElementById(\'emailValue\');\n    const roleValueElement = document.getElementById(\'roleValue\');\n    const lastLoginValueElement = document.getElementById(\'lastLoginValue\');\n    const appointmentsTableElement = document.getElementById(\'appointmentsTable\');\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        const userData = await response.json();\n        displayUserData(userData);\n        \n        // Carregar dados de exemplo para a tabela\n        loadSampleAppointments();\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n      \n      // Preencher os valores do perfil\n      userIdElement.textContent = user.id;\n      usernameValueElement.textContent = user.username;\n      fullNameValueElement.textContent = user.fullName;\n      emailValueElement.textContent = user.email;\n      roleValueElement.textContent = translateRole(user.role);\n      \n      // Formatar data de último login\n      const lastLogin = new Date(user.lastLogin);\n      lastLoginValueElement.textContent = lastLogin.toLocaleString(\'pt-BR\');\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir status\n    function translateStatus(status) {\n      const translations = {\n        \'scheduled\': \'Agendado\',\n        \'confirmed\': \'Confirmado\',\n        \'completed\': \'Concluído\',\n        \'cancelled\': \'Cancelado\',\n        \'no_show\': \'Não compareceu\',\n        \'pending\': \'Pendente\'\n      };\n      \n      return translations[status] || status;\n    }\n    \n    // Obter classe CSS para status\n    function getStatusClass(status) {\n      switch (status) {\n        case \'completed\':\n          return \'status-completed\';\n        case \'scheduled\':\n        case \'confirmed\':\n          return \'status-scheduled\';\n        case \'cancelled\':\n        case \'no_show\':\n          return \'status-cancelled\';\n        default:\n          return \'\';\n      }\n    }\n    \n    // Traduzir tipo de procedimento\n    function translateProcedureType(type) {\n      const translations = {\n        \'psychology_aba\': \'Psicologia - ABA\',\n        \'psychology_cbt\': \'Psicologia - TCC\',\n        \'speech_therapy\': \'Fonoaudiologia\',\n        \'physical_therapy\': \'Fisioterapia\',\n        \'occupational_therapy\': \'Terapia Ocupacional\',\n        \'evaluation\': \'Avaliação\',\n        \'other\': \'Outro\',\n        \'free_time\': \'Tempo Livre\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Carregar dados de exemplo para a tabela de agendamentos\n    function loadSampleAppointments() {\n      const sampleAppointments = [\n        {\n          patient: \'Maria Silva\',\n          professional: \'Dr. João Santos\',\n          dateTime: \'2025-05-07T14:30:00\',\n          procedureType: \'psychology_aba\',\n          status: \'scheduled\'\n        },\n        {\n          patient: \'Carlos Oliveira\',\n          professional: \'Dra. Ana Pereira\',\n          dateTime: \'2025-05-06T10:00:00\',\n          procedureType: \'physical_therapy\',\n          status: \'completed\'\n        },\n        {\n          patient: \'Juliana Costa\',\n          professional: \'Dr. Marcos Lima\',\n          dateTime: \'2025-05-08T16:15:00\',\n          procedureType: \'speech_therapy\',\n          status: \'confirmed\'\n        },\n        {\n          patient: \'Pedro Souza\',\n          professional: \'Dra. Paula Ribeiro\',\n          dateTime: \'2025-05-05T09:00:00\',\n          procedureType: \'evaluation\',\n          status: \'cancelled\'\n        },\n        {\n          patient: \'Luciana Ferreira\',\n          professional: \'Dr. Roberto Alves\',\n          dateTime: \'2025-05-07T11:30:00\',\n          procedureType: \'occupational_therapy\',\n          status: \'scheduled\'\n        }\n      ];\n      \n      // Limpar tabela\n      appointmentsTableElement.innerHTML = \'\';\n      \n      // Adicionar linhas\n      sampleAppointments.forEach(appointment => {\n        const row = document.createElement(\'tr\');\n        \n        const dateTime = new Date(appointment.dateTime);\n        const formattedDateTime = dateTime.toLocaleString(\'pt-BR\', {\n          day: \'2-digit\',\n          month: \'2-digit\',\n          year: \'numeric\',\n          hour: \'2-digit\',\n          minute: \'2-digit\'\n        });\n        \n        row.innerHTML = `\n          <td>${appointment.patient}</td>\n          <td>${appointment.professional}</td>\n          <td>${formattedDateTime}</td>\n          <td>${translateProcedureType(appointment.procedureType)}</td>\n          <td><span class="status ${getStatusClass(appointment.status)}">${translateStatus(appointment.status)}</span></td>\n          <td><button class="action-button">Ver detalhes</button></td>\n        `;\n        \n        appointmentsTableElement.appendChild(row);\n      });\n    }\n    \n    // Manipular logout\n    logoutButton.addEventListener(\'click\', async () => {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    });\n    \n    // Inicializar\n    document.addEventListener(\'DOMContentLoaded\', checkAuth);\n   $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const userIdElement = document.getElementById(\'userId\');\n    const usernameValueElement = document.getElementById(\'usernameValue\');\n    const fullNameValueElement = document.getElementById(\'fullNameValue\');\n    const emailValueElement = document.getElementById(\'emailValue\');\n    const roleValueElement = document.getElementById(\'roleValue\');\n    const lastLoginValueElement = document.getElementById(\'lastLoginValue\');\n    const appointmentsTableElement = document.getElementById(\'appointmentsTable\');\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        const userData = await response.json();\n        displayUserData(userData);\n        \n        // Carregar dados de exemplo para a tabela\n        loadSampleAppointments();\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n      \n      // Preencher os valores do perfil\n      userIdElement.textContent = user.id;\n      usernameValueElement.textContent = user.username;\n      fullNameValueElement.textContent = user.fullName;\n      emailValueElement.textContent = user.email;\n      roleValueElement.textContent = translateRole(user.role);\n      \n      // Formatar data de último login\n      const lastLogin = new Date(user.lastLogin);\n      lastLoginValueElement.textContent = lastLogin.toLocaleString(\'pt-BR\');\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir status\n    function translateStatus(status) {\n      const translations = {\n        \'scheduled\': \'Agendado\',\n        \'confirmed\': \'Confirmado\',\n        \'completed\': \'Concluído\',\n        \'cancelled\': \'Cancelado\',\n        \'no_show\': \'Não compareceu\',\n        \'pending\': \'Pendente\'\n      };\n      \n      return translations[status] || status;\n    }\n    \n    // Obter classe CSS para status\n    function getStatusClass(status) {\n      switch (status) {\n        case \'completed\':\n          return \'status-completed\';\n        case \'scheduled\':\n        case \'confirmed\':\n          return \'status-scheduled\';\n        case \'cancelled\':\n        case \'no_show\':\n          return \'status-cancelled\';\n        default:\n          return \'\';\n      }\n    }\n    \n    // Traduzir tipo de procedimento\n    function translateProcedureType(type) {\n      const translations = {\n        \'psychology_aba\': \'Psicologia - ABA\',\n        \'psychology_cbt\': \'Psicologia - TCC\',\n        \'speech_therapy\': \'Fonoaudiologia\',\n        \'physical_therapy\': \'Fisioterapia\',\n        \'occupational_therapy\': \'Terapia Ocupacional\',\n        \'evaluation\': \'Avaliação\',\n        \'other\': \'Outro\',\n        \'free_time\': \'Tempo Livre\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Carregar dados de exemplo para a tabela de agendamentos\n    function loadSampleAppointments() {\n      const sampleAppointments = [\n        {\n          patient: \'Maria Silva\',\n          professional: \'Dr. João Santos\',\n          dateTime: \'2025-05-07T14:30:00\',\n          procedureType: \'psychology_aba\',\n          status: \'scheduled\'\n        },\n        {\n          patient: \'Carlos Oliveira\',\n          professional: \'Dra. Ana Pereira\',\n          dateTime: \'2025-05-06T10:00:00\',\n          procedureType: \'physical_therapy\',\n          status: \'completed\'\n        },\n        {\n          patient: \'Juliana Costa\',\n          professional: \'Dr. Marcos Lima\',\n          dateTime: \'2025-05-08T16:15:00\',\n          procedureType: \'speech_therapy\',\n          status: \'confirmed\'\n        },\n        {\n          patient: \'Pedro Souza\',\n          professional: \'Dra. Paula Ribeiro\',\n          dateTime: \'2025-05-05T09:00:00\',\n          procedureType: \'evaluation\',\n          status: \'cancelled\'\n        },\n        {\n          patient: \'Luciana Ferreira\',\n          professional: \'Dr. Roberto Alves\',\n          dateTime: \'2025-05-07T11:30:00\',\n          procedureType: \'occupational_therapy\',\n          status: \'scheduled\'\n        }\n      ];\n      \n      // Limpar tabela\n      appointmentsTableElement.innerHTML = \'\';\n      \n      // Adicionar linhas\n      sampleAppointments.forEach(appointment => {\n        const row = document.createElement(\'tr\');\n        \n        const dateTime = new Date(appointment.dateTime);\n        const formattedDateTime = dateTime.toLocaleString(\'pt-BR\', {\n          day: \'2-digit\',\n          month: \'2-digit\',\n          year: \'numeric\',\n          hour: \'2-digit\',\n          minute: \'2-digit\'\n        });\n        \n        row.innerHTML = `\n          <td>${appointment.patient}</td>\n          <td>${appointment.professional}</td>\n          <td>${formattedDateTime}</td>\n          <td>${translateProcedureType(appointment.procedureType)}</td>\n          <td><span class="status ${getStatusClass(appointment.status)}">${translateStatus(appointment.status)}</span></td>\n          <td><button class="action-button">Ver detalhes</button></td>\n        `;\n        \n        appointmentsTableElement.appendChild(row);\n      });\n    }\n    \n    // Manipular logout\n    logoutButton.addEventListener(\'click\', async () => {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    });\n    \n    // Inicializar\n    document.addEventListener(\'DOMContentLoaded\', checkAuth);\n  </script>\n', PosixPath('client/public/dashboard.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 0238d1d753ddc131a7e0cba128f494dac3df736262016e1b7d755f5e88671f4e7c0e1cc6745bcb4bd134218852c4c5c39ba1030855f16ef22aac6f0faa97ce4f_0
2025-05-07 18:31:35,151 - semgrep.rule_match - DEBUG - match_key = ('\n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const userIdElement = document.getElementById(\'userId\');\n    const usernameValueElement = document.getElementById(\'usernameValue\');\n    const fullNameValueElement = document.getElementById(\'fullNameValue\');\n    const emailValueElement = document.getElementById(\'emailValue\');\n    const roleValueElement = document.getElementById(\'roleValue\');\n    const lastLoginValueElement = document.getElementById(\'lastLoginValue\');\n    const appointmentsTableElement = document.getElementById(\'appointmentsTable\');\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        const userData = await response.json();\n        displayUserData(userData);\n        \n        // Carregar dados de exemplo para a tabela\n        loadSampleAppointments();\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n      \n      // Preencher os valores do perfil\n      userIdElement.textContent = user.id;\n      usernameValueElement.textContent = user.username;\n      fullNameValueElement.textContent = user.fullName;\n      emailValueElement.textContent = user.email;\n      roleValueElement.textContent = translateRole(user.role);\n      \n      // Formatar data de último login\n      const lastLogin = new Date(user.lastLogin);\n      lastLoginValueElement.textContent = lastLogin.toLocaleString(\'pt-BR\');\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir status\n    function translateStatus(status) {\n      const translations = {\n        \'scheduled\': \'Agendado\',\n        \'confirmed\': \'Confirmado\',\n        \'completed\': \'Concluído\',\n        \'cancelled\': \'Cancelado\',\n        \'no_show\': \'Não compareceu\',\n        \'pending\': \'Pendente\'\n      };\n      \n      return translations[status] || status;\n    }\n    \n    // Obter classe CSS para status\n    function getStatusClass(status) {\n      switch (status) {\n        case \'completed\':\n          return \'status-completed\';\n        case \'scheduled\':\n        case \'confirmed\':\n          return \'status-scheduled\';\n        case \'cancelled\':\n        case \'no_show\':\n          return \'status-cancelled\';\n        default:\n          return \'\';\n      }\n    }\n    \n    // Traduzir tipo de procedimento\n    function translateProcedureType(type) {\n      const translations = {\n        \'psychology_aba\': \'Psicologia - ABA\',\n        \'psychology_cbt\': \'Psicologia - TCC\',\n        \'speech_therapy\': \'Fonoaudiologia\',\n        \'physical_therapy\': \'Fisioterapia\',\n        \'occupational_therapy\': \'Terapia Ocupacional\',\n        \'evaluation\': \'Avaliação\',\n        \'other\': \'Outro\',\n        \'free_time\': \'Tempo Livre\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Carregar dados de exemplo para a tabela de agendamentos\n    function loadSampleAppointments() {\n      const sampleAppointments = [\n        {\n          patient: \'Maria Silva\',\n          professional: \'Dr. João Santos\',\n          dateTime: \'2025-05-07T14:30:00\',\n          procedureType: \'psychology_aba\',\n          status: \'scheduled\'\n        },\n        {\n          patient: \'Carlos Oliveira\',\n          professional: \'Dra. Ana Pereira\',\n          dateTime: \'2025-05-06T10:00:00\',\n          procedureType: \'physical_therapy\',\n          status: \'completed\'\n        },\n        {\n          patient: \'Juliana Costa\',\n          professional: \'Dr. Marcos Lima\',\n          dateTime: \'2025-05-08T16:15:00\',\n          procedureType: \'speech_therapy\',\n          status: \'confirmed\'\n        },\n        {\n          patient: \'Pedro Souza\',\n          professional: \'Dra. Paula Ribeiro\',\n          dateTime: \'2025-05-05T09:00:00\',\n          procedureType: \'evaluation\',\n          status: \'cancelled\'\n        },\n        {\n          patient: \'Luciana Ferreira\',\n          professional: \'Dr. Roberto Alves\',\n          dateTime: \'2025-05-07T11:30:00\',\n          procedureType: \'occupational_therapy\',\n          status: \'scheduled\'\n        }\n      ];\n      \n      // Limpar tabela\n      appointmentsTableElement.innerHTML = \'\';\n      \n      // Adicionar linhas\n      sampleAppointments.forEach(appointment => {\n        const row = document.createElement(\'tr\');\n        \n        const dateTime = new Date(appointment.dateTime);\n        const formattedDateTime = dateTime.toLocaleString(\'pt-BR\', {\n          day: \'2-digit\',\n          month: \'2-digit\',\n          year: \'numeric\',\n          hour: \'2-digit\',\n          minute: \'2-digit\'\n        });\n        \n        row.innerHTML = `\n          <td>${appointment.patient}</td>\n          <td>${appointment.professional}</td>\n          <td>${formattedDateTime}</td>\n          <td>${translateProcedureType(appointment.procedureType)}</td>\n          <td><span class="status ${getStatusClass(appointment.status)}">${translateStatus(appointment.status)}</span></td>\n          <td><button class="action-button">Ver detalhes</button></td>\n        `;\n        \n        appointmentsTableElement.appendChild(row);\n      });\n    }\n    \n    // Manipular logout\n    logoutButton.addEventListener(\'click\', async () => {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    });\n    \n    // Inicializar\n    document.addEventListener(\'DOMContentLoaded\', checkAuth);\n   $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const userIdElement = document.getElementById(\'userId\');\n    const usernameValueElement = document.getElementById(\'usernameValue\');\n    const fullNameValueElement = document.getElementById(\'fullNameValue\');\n    const emailValueElement = document.getElementById(\'emailValue\');\n    const roleValueElement = document.getElementById(\'roleValue\');\n    const lastLoginValueElement = document.getElementById(\'lastLoginValue\');\n    const appointmentsTableElement = document.getElementById(\'appointmentsTable\');\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        const userData = await response.json();\n        displayUserData(userData);\n        \n        // Carregar dados de exemplo para a tabela\n        loadSampleAppointments();\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n      \n      // Preencher os valores do perfil\n      userIdElement.textContent = user.id;\n      usernameValueElement.textContent = user.username;\n      fullNameValueElement.textContent = user.fullName;\n      emailValueElement.textContent = user.email;\n      roleValueElement.textContent = translateRole(user.role);\n      \n      // Formatar data de último login\n      const lastLogin = new Date(user.lastLogin);\n      lastLoginValueElement.textContent = lastLogin.toLocaleString(\'pt-BR\');\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir status\n    function translateStatus(status) {\n      const translations = {\n        \'scheduled\': \'Agendado\',\n        \'confirmed\': \'Confirmado\',\n        \'completed\': \'Concluído\',\n        \'cancelled\': \'Cancelado\',\n        \'no_show\': \'Não compareceu\',\n        \'pending\': \'Pendente\'\n      };\n      \n      return translations[status] || status;\n    }\n    \n    // Obter classe CSS para status\n    function getStatusClass(status) {\n      switch (status) {\n        case \'completed\':\n          return \'status-completed\';\n        case \'scheduled\':\n        case \'confirmed\':\n          return \'status-scheduled\';\n        case \'cancelled\':\n        case \'no_show\':\n          return \'status-cancelled\';\n        default:\n          return \'\';\n      }\n    }\n    \n    // Traduzir tipo de procedimento\n    function translateProcedureType(type) {\n      const translations = {\n        \'psychology_aba\': \'Psicologia - ABA\',\n        \'psychology_cbt\': \'Psicologia - TCC\',\n        \'speech_therapy\': \'Fonoaudiologia\',\n        \'physical_therapy\': \'Fisioterapia\',\n        \'occupational_therapy\': \'Terapia Ocupacional\',\n        \'evaluation\': \'Avaliação\',\n        \'other\': \'Outro\',\n        \'free_time\': \'Tempo Livre\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Carregar dados de exemplo para a tabela de agendamentos\n    function loadSampleAppointments() {\n      const sampleAppointments = [\n        {\n          patient: \'Maria Silva\',\n          professional: \'Dr. João Santos\',\n          dateTime: \'2025-05-07T14:30:00\',\n          procedureType: \'psychology_aba\',\n          status: \'scheduled\'\n        },\n        {\n          patient: \'Carlos Oliveira\',\n          professional: \'Dra. Ana Pereira\',\n          dateTime: \'2025-05-06T10:00:00\',\n          procedureType: \'physical_therapy\',\n          status: \'completed\'\n        },\n        {\n          patient: \'Juliana Costa\',\n          professional: \'Dr. Marcos Lima\',\n          dateTime: \'2025-05-08T16:15:00\',\n          procedureType: \'speech_therapy\',\n          status: \'confirmed\'\n        },\n        {\n          patient: \'Pedro Souza\',\n          professional: \'Dra. Paula Ribeiro\',\n          dateTime: \'2025-05-05T09:00:00\',\n          procedureType: \'evaluation\',\n          status: \'cancelled\'\n        },\n        {\n          patient: \'Luciana Ferreira\',\n          professional: \'Dr. Roberto Alves\',\n          dateTime: \'2025-05-07T11:30:00\',\n          procedureType: \'occupational_therapy\',\n          status: \'scheduled\'\n        }\n      ];\n      \n      // Limpar tabela\n      appointmentsTableElement.innerHTML = \'\';\n      \n      // Adicionar linhas\n      sampleAppointments.forEach(appointment => {\n        const row = document.createElement(\'tr\');\n        \n        const dateTime = new Date(appointment.dateTime);\n        const formattedDateTime = dateTime.toLocaleString(\'pt-BR\', {\n          day: \'2-digit\',\n          month: \'2-digit\',\n          year: \'numeric\',\n          hour: \'2-digit\',\n          minute: \'2-digit\'\n        });\n        \n        row.innerHTML = `\n          <td>${appointment.patient}</td>\n          <td>${appointment.professional}</td>\n          <td>${formattedDateTime}</td>\n          <td>${translateProcedureType(appointment.procedureType)}</td>\n          <td><span class="status ${getStatusClass(appointment.status)}">${translateStatus(appointment.status)}</span></td>\n          <td><button class="action-button">Ver detalhes</button></td>\n        `;\n        \n        appointmentsTableElement.appendChild(row);\n      });\n    }\n    \n    // Manipular logout\n    logoutButton.addEventListener(\'click\', async () => {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    });\n    \n    // Inicializar\n    document.addEventListener(\'DOMContentLoaded\', checkAuth);\n  </script>\n', PosixPath('client/public/dashboard.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 0238d1d753ddc131a7e0cba128f494dac3df736262016e1b7d755f5e88671f4e7c0e1cc6745bcb4bd134218852c4c5c39ba1030855f16ef22aac6f0faa97ce4f_0
2025-05-07 18:31:35,159 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('client/public/evolutions.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = b2b7b2e4462fc046c141e5b604b1c0e57ea0148316fc9371191d03ff4919ce7d1b06e964c7f5ac02ea7817b10a6005e47f83381870ec21346cd064c4378a1667_0
2025-05-07 18:31:35,166 - semgrep.rule_match - DEBUG - match_key = ('\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', () => {\n      checkAuth();\n      setupEventListeners();\n      \n      // Verificar se existe appointmentId na URL (redirecionamento do calendário)\n      const urlParams = new URLSearchParams(window.location.search);\n      const appointmentId = urlParams.get(\'appointmentId\');\n      \n      // Inicializar\n      loadPatients();\n      loadProfessionals();\n      loadEvolutions();\n      \n      // Se tiver appointmentId, abrir formulário para nova evolução\n      if (appointmentId) {\n        setTimeout(() => {\n          createNewEvolutionFromAppointment(appointmentId);\n        }, 1000); // Pequeno atraso para garantir que os dados foram carregados\n      }\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const patientFilter = document.getElementById(\'patientFilter\');\n    const professionalFilter = document.getElementById(\'professionalFilter\');\n    const statusFilter = document.getElementById(\'statusFilter\');\n    const startDateFilter = document.getElementById(\'startDateFilter\');\n    const endDateFilter = document.getElementById(\'endDateFilter\');\n    const filterButton = document.getElementById(\'filterButton\');\n    const evolutionsTableBody = document.getElementById(\'evolutionsTableBody\');\n    const paginationElement = document.getElementById(\'pagination\');\n    const addEvolutionBtn = document.getElementById(\'addEvolutionBtn\');\n    \n    const evolutionModal = document.getElementById(\'evolutionModal\');\n    const viewEvolutionModal = document.getElementById(\'viewEvolutionModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const evolutionForm = document.getElementById(\'evolutionForm\');\n    const evolutionIdInput = document.getElementById(\'evolutionId\');\n    const patientIdSelect = document.getElementById(\'patientId\');\n    const appointmentIdSelect = document.getElementById(\'appointmentId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    \n    const tabDetails = document.getElementById(\'tabDetails\');\n    const tabAttachments = document.getElementById(\'tabAttachments\');\n    const detailsTab = document.getElementById(\'detailsTab\');\n    const attachmentsTab = document.getElementById(\'attachmentsTab\');\n    const detailsTabButtons = document.getElementById(\'detailsTabButtons\');\n    const attachmentsTabButtons = document.getElementById(\'attachmentsTabButtons\');\n    \n    const closeViewButton = document.getElementById(\'closeViewButton\');\n    const closeAttachmentsButton = document.getElementById(\'closeAttachmentsButton\');\n    const editEvolutionButton = document.getElementById(\'editEvolutionButton\');\n    const approveButton = document.getElementById(\'approveButton\');\n    const rejectButton = document.getElementById(\'rejectButton\');\n    \n    // Variáveis para paginação\n    let currentPage = 1;\n    const pageSize = 10;\n    let totalPages = 1;\n    let evolutions = [];\n    let filteredEvolutions = [];\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        const userData = await response.json();\n        displayUserData(userData);\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n      \n      // Configurar permissões baseadas no papel do usuário\n      setupRoleBasedPermissions(user.role);\n    }\n    \n    // Configurar permissões baseadas no papel do usuário\n    function setupRoleBasedPermissions(role) {\n      // Mostrar ou esconder botões baseado no papel\n      if ([\'admin\', \'coordinator\'].includes(role)) {\n        approveButton.style.display = \'block\';\n        rejectButton.style.display = \'block\';\n      } else {\n        approveButton.style.display = \'none\';\n        rejectButton.style.display = \'none\';\n      }\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir status\n    function translateStatus(status) {\n      const translations = {\n        \'pending\': \'Pendente\',\n        \'completed\': \'Concluído\',\n        \'approved\': \'Aprovado\',\n        \'rejected\': \'Rejeitado\'\n      };\n      \n      return translations[status] || status;\n    }\n    \n    // Traduzir visibilidade\n    function translateVisibility(visibility) {\n      const translations = {\n        \'internal\': \'Interno (apenas equipe)\',\n        \'guardian\': \'Responsável (paciente/família)\',\n        \'public\': \'Público (compartilhável)\'\n      };\n      \n      return translations[visibility] || visibility;\n    }\n    \n    // Traduzir tipo de evolução\n    function translateEvolutionType(type) {\n      const translations = {\n        \'psychology_aba\': \'Psicologia - ABA\',\n        \'psychology_cbt\': \'Psicologia - TCC\',\n        \'speech_therapy\': \'Fonoaudiologia\',\n        \'physical_therapy\': \'Fisioterapia\',\n        \'occupational_therapy\': \'Terapia Ocupacional\',\n        \'evaluation\': \'Avaliação\',\n        \'other\': \'Outro\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Formatar data\n    function formatDate(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleDateString(\'pt-BR\');\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Filtros\n      filterButton.addEventListener(\'click\', filterEvolutions);\n      \n      // Adicionar evolução\n      addEvolutionBtn.addEventListener(\'click\', openAddEvolutionModal);\n      \n      // Fechar modal\n      closeModal.addEventListener(\'click\', closeEvolutionModal);\n      closeViewModal.addEventListener(\'click\', closeViewEvolutionModal);\n      cancelButton.addEventListener(\'click\', closeEvolutionModal);\n      closeViewButton.addEventListener(\'click\', closeViewEvolutionModal);\n      closeAttachmentsButton.addEventListener(\'click\', closeViewEvolutionModal);\n      \n      // Modal de background\n      evolutionModal.addEventListener(\'click\', function(e) {\n        if (e.target === evolutionModal) {\n          closeEvolutionModal();\n        }\n      });\n      \n      viewEvolutionModal.addEventListener(\'click\', function(e) {\n        if (e.target === viewEvolutionModal) {\n          closeViewEvolutionModal();\n        }\n      });\n      \n      // Tabs\n      tabDetails.addEventListener(\'click\', function() {\n        tabDetails.classList.add(\'active\');\n        tabAttachments.classList.remove(\'active\');\n        detailsTab.style.display = \'block\';\n        attachmentsTab.style.display = \'none\';\n        detailsTabButtons.style.display = \'flex\';\n        attachmentsTabButtons.style.display = \'none\';\n      });\n      \n      tabAttachments.addEventListener(\'click\', function() {\n        tabDetails.classList.remove(\'active\');\n        tabAttachments.classList.add(\'active\');\n        detailsTab.style.display = \'none\';\n        attachmentsTab.style.display = \'block\';\n        detailsTabButtons.style.display = \'none\';\n        attachmentsTabButtons.style.display = \'flex\';\n      });\n      \n      // Salvar evolução\n      saveButton.addEventListener(\'click\', saveEvolution);\n      \n      // Editar a partir da visualização\n      editEvolutionButton.addEventListener(\'click\', function() {\n        closeViewEvolutionModal();\n        editEvolution(this.dataset.evolutionId);\n      });\n      \n      // Aprovar evolução\n      approveButton.addEventListener(\'click\', function() {\n        changeEvolutionStatus(this.dataset.evolutionId, \'approved\');\n      });\n      \n      // Rejeitar evolução\n      rejectButton.addEventListener(\'click\', function() {\n        changeEvolutionStatus(this.dataset.evolutionId, \'rejected\');\n      });\n      \n      // Paciente selecionado - carregar consultas relacionadas\n      patientIdSelect.addEventListener(\'change\', function() {\n        const patientId = this.value;\n        if (patientId) {\n          loadPatientAppointments(patientId);\n        } else {\n          // Limpar select de consultas\n          appointmentIdSelect.innerHTML = \'<option value="">Selecione o atendimento (opcional)</option>\';\n        }\n      });\n    }\n    \n    // Carregar pacientes\n    async function loadPatients() {\n      try {\n        const response = await fetch(\'/api/patients\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar pacientes\');\n        }\n        \n        const patients = await response.json();\n        \n        // Preencher select de filtro\n        patientFilter.innerHTML = \'<option value="">Todos os pacientes</option>\';\n        patients.forEach(patient => {\n          const option = document.createElement(\'option\');\n          option.value = patient.id;\n          option.textContent = patient.fullName;\n          patientFilter.appendChild(option);\n        });\n        \n        // Preencher select do formulário\n        patientIdSelect.innerHTML = \'<option value="">Selecione o paciente</option>\';\n        patients.forEach(patient => {\n          const option = document.createElement(\'option\');\n          option.value = patient.id;\n          option.textContent = patient.fullName;\n          patientIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar pacientes:\', error);\n      }\n    }\n    \n    // Carregar profissionais\n    async function loadProfessionals() {\n      try {\n        const response = await fetch(\'/api/professionals\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar profissionais\');\n        }\n        \n        const professionals = await response.json();\n        \n        // Preencher select de filtro\n        professionalFilter.innerHTML = \'<option value="">Todos os profissionais</option>\';\n        professionals.forEach(professional => {\n          const option = document.createElement(\'option\');\n          option.value = professional.id;\n          option.textContent = professional.user.fullName;\n          professionalFilter.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar profissionais:\', error);\n      }\n    }\n    \n    // Carregar consultas do paciente\n    async function loadPatientAppointments(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/appointments?status=attended`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar consultas do paciente\');\n        }\n        \n        const appointments = await response.json();\n        \n        // Preencher select de consultas\n        appointmentIdSelect.innerHTML = \'<option value="">Selecione o atendimento (opcional)</option>\';\n        \n        // Ordenar por data (mais recente primeiro)\n        appointments.sort((a, b) => new Date(b.startTime) - new Date(a.startTime));\n        \n        appointments.forEach(appointment => {\n          const date = new Date(appointment.startTime);\n          const formattedDate = date.toLocaleDateString(\'pt-BR\');\n          \n          const option = document.createElement(\'option\');\n          option.value = appointment.id;\n          option.textContent = `${formattedDate} - ${translateEvolutionType(appointment.procedureType)}`;\n          appointmentIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar consultas do paciente:\', error);\n      }\n    }\n    \n    // Carregar evoluções\n    async function loadEvolutions() {\n      try {\n        const url = new URL(\'/api/evolutions\', window.location.origin);\n        \n        // Adicionar parâmetros de filtro, se houver\n        if (patientFilter.value) {\n          url.searchParams.append(\'patientId\', patientFilter.value);\n        }\n        \n        if (professionalFilter.value) {\n          url.searchParams.append(\'professionalId\', professionalFilter.value);\n        }\n        \n        if (statusFilter.value) {\n          url.searchParams.append(\'status\', statusFilter.value);\n        }\n        \n        if (startDateFilter.value) {\n          url.searchParams.append(\'startDate\', startDateFilter.value);\n        }\n        \n        if (endDateFilter.value) {\n          url.searchParams.append(\'endDate\', endDateFilter.value);\n        }\n        \n        const response = await fetch(url, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar evoluções\');\n        }\n        \n        evolutions = await response.json();\n        filteredEvolutions = [...evolutions];\n        \n        // Calcular número total de páginas\n        totalPages = Math.ceil(filteredEvolutions.length / pageSize);\n        \n        // Renderizar tabela e paginação\n        renderEvolutionsTable();\n        renderPagination();\n      } catch (error) {\n        console.error(\'Erro ao carregar evoluções:\', error);\n        evolutionsTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">\n              <div class="empty-state">\n                <div class="empty-icon">❌</div>\n                <div class="empty-text">Erro ao carregar evoluções. Tente novamente.</div>\n                <button class="button button-primary" onclick="loadEvolutions()">Tentar novamente</button>\n              </div>\n            </td>\n          </tr>\n        `;\n      }\n    }\n    \n    // Filtrar evoluções\n    function filterEvolutions() {\n      loadEvolutions();\n    }\n    \n    // Renderizar tabela de evoluções\n    function renderEvolutionsTable() {\n      // Se não há evoluções\n      if (filteredEvolutions.length === 0) {\n        evolutionsTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">\n              <div class="empty-state">\n                <div class="empty-icon">📝</div>\n                <div class="empty-text">Nenhuma evolução encontrada.</div>\n                <button class="button button-primary" id="emptyAddEvolutionBtn">Nova Evolução</button>\n              </div>\n            </td>\n          </tr>\n        `;\n        \n        document.getElementById(\'emptyAddEvolutionBtn\')?.addEventListener(\'click\', openAddEvolutionModal);\n        return;\n      }\n      \n      // Calcular índices para paginação\n      const startIndex = (currentPage - 1) * pageSize;\n      const endIndex = Math.min(startIndex + pageSize, filteredEvolutions.length);\n      const evolutionsToShow = filteredEvolutions.slice(startIndex, endIndex);\n      \n      // Limpar tabela\n      evolutionsTableBody.innerHTML = \'\';\n      \n      // Adicionar linhas\n      evolutionsToShow.forEach(evolution => {\n        const row = document.createElement(\'tr\');\n        \n        // Dados da linha\n        row.innerHTML = `\n          <td>${formatDate(evolution.date)}</td>\n          <td>${evolution.patient?.fullName || \'N/A\'}</td>\n          <td>${evolution.professional?.user?.fullName || \'N/A\'}</td>\n          <td>${translateEvolutionType(evolution.type)}</td>\n          <td><span class="status status-${evolution.status}">${translateStatus(evolution.status)}</span></td>\n          <td>\n            <button class="action-button view-evolution" data-id="${evolution.id}">Visualizar</button>\n            <button class="action-button edit-evolution" data-id="${evolution.id}">Editar</button>\n          </td>\n        `;\n        \n        evolutionsTableBody.appendChild(row);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-evolution\').forEach(button => {\n        button.addEventListener(\'click\', () => viewEvolution(button.dataset.id));\n      });\n      \n      document.querySelectorAll(\'.edit-evolution\').forEach(button => {\n        button.addEventListener(\'click\', () => editEvolution(button.dataset.id));\n      });\n    }\n    \n    // Renderizar paginação\n    function renderPagination() {\n      if (totalPages <= 1) {\n        paginationElement.innerHTML = \'\';\n        return;\n      }\n      \n      let paginationHTML = \'\';\n      \n      // Botão anterior\n      paginationHTML += `\n        <li>\n          <a href="#" class="${currentPage === 1 ? \'disabled\' : \'\'}" \n             onclick="${currentPage > 1 ? \'changePage(\' + (currentPage - 1) + \')\' : \'return false\'}">\n            &laquo;\n          </a>\n        </li>\n      `;\n      \n      // Páginas numéricas\n      for (let i = 1; i <= totalPages; i++) {\n        paginationHTML += `\n          <li>\n            <a href="#" class="${i === currentPage ? \'active\' : \'\'}" \n               onclick="changePage(${i})">\n              ${i}\n            </a>\n          </li>\n        `;\n      }\n      \n      // Botão próximo\n      paginationHTML += `\n        <li>\n          <a href="#" class="${currentPage === totalPages ? \'disabled\' : \'\'}" \n             onclick="${currentPage < totalPages ? \'changePage(\' + (currentPage + 1) + \')\' : \'return false\'}">\n            &raquo;\n          </a>\n        </li>\n      `;\n      \n      paginationElement.innerHTML = paginationHTML;\n    }\n    \n    // Mudar página\n    function changePage(page) {\n      currentPage = page;\n      renderEvolutionsTable();\n      renderPagination();\n      return false; // Prevenir comportamento padrão do link\n    }\n    \n    // Abrir modal para adicionar evolução\n    function openAddEvolutionModal() {\n      modalTitle.textContent = \'Nova Evolução\';\n      evolutionForm.reset();\n      evolutionIdInput.value = \'\';\n      \n      // Definir data padrão como hoje\n      const today = new Date();\n      const dateString = today.toISOString().split(\'T\')[0];\n      document.getElementById(\'date\').value = dateString;\n      \n      // Definir status padrão como "Pendente"\n      document.getElementById(\'status\').value = \'pending\';\n      \n      evolutionModal.classList.add(\'active\');\n    }\n    \n    // Criar nova evolução a partir de um agendamento\n    async function createNewEvolutionFromAppointment(appointmentId) {\n      try {\n        // Buscar dados do agendamento\n        const response = await fetch(`/api/appointments/${appointmentId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar dados do agendamento\');\n        }\n        \n        const appointment = await response.json();\n        \n        // Abrir modal de nova evolução\n        openAddEvolutionModal();\n        \n        // Selecionar o paciente\n        patientIdSelect.value = appointment.patientId;\n        \n        // Carregar consultas do paciente e selecionar o agendamento\n        await loadPatientAppointments(appointment.patientId);\n        appointmentIdSelect.value = appointmentId;\n        \n        // Preencher tipo de evolução baseado no tipo de procedimento\n        document.getElementById(\'type\').value = appointment.procedureType;\n        \n        // Preencher título padrão\n        document.getElementById(\'title\').value = `Evolução - ${new Date(appointment.startTime).toLocaleDateString(\'pt-BR\')}`;\n        \n        // Definir o foco no campo de conteúdo\n        setTimeout(() => {\n          document.getElementById(\'content\').focus();\n        }, 300);\n      } catch (error) {\n        console.error(\'Erro ao criar evolução a partir do agendamento:\', error);\n        alert(\'Erro ao carregar dados do agendamento. Tente novamente.\');\n      }\n    }\n    \n    // Fechar modal\n    function closeEvolutionModal() {\n      evolutionModal.classList.remove(\'active\');\n    }\n    \n    // Fechar modal de visualização\n    function closeViewEvolutionModal() {\n      viewEvolutionModal.classList.remove(\'active\');\n    }\n    \n    // Editar evolução\n    async function editEvolution(evolutionId) {\n      try {\n        modalTitle.textContent = \'Editar Evolução\';\n        \n        const evolution = evolutions.find(e => e.id == evolutionId);\n        \n        if (!evolution) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/evolutions/${evolutionId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados da evolução\');\n          }\n          \n          const evolutionData = await response.json();\n          fillEvolutionForm(evolutionData);\n        } else {\n          fillEvolutionForm(evolution);\n        }\n        \n        evolutionModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar evolução:\', error);\n        alert(\'Erro ao carregar dados da evolução. Tente novamente.\');\n      }\n    }\n    \n    // Preencher formulário com dados da evolução\n    function fillEvolutionForm(evolution) {\n      evolutionIdInput.value = evolution.id;\n      document.getElementById(\'patientId\').value = evolution.patientId || \'\';\n      document.getElementById(\'date\').value = evolution.date ? new Date(evolution.date).toISOString().split(\'T\')[0] : \'\';\n      document.getElementById(\'type\').value = evolution.type || \'\';\n      document.getElementById(\'title\').value = evolution.title || \'\';\n      document.getElementById(\'content\').value = evolution.content || \'\';\n      document.getElementById(\'goals\').value = evolution.goals || \'\';\n      document.getElementById(\'nextSteps\').value = evolution.nextSteps || \'\';\n      document.getElementById(\'status\').value = evolution.status || \'pending\';\n      document.getElementById(\'visibility\').value = evolution.visibility || \'internal\';\n      \n      // Carregar consultas do paciente e selecionar a consulta relacionada\n      if (evolution.patientId) {\n        loadPatientAppointments(evolution.patientId).then(() => {\n          document.getElementById(\'appointmentId\').value = evolution.appointmentId || \'\';\n        });\n      }\n    }\n    \n    // Visualizar evolução\n    async function viewEvolution(evolutionId) {\n      try {\n        const evolution = evolutions.find(e => e.id == evolutionId);\n        \n        if (!evolution) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/evolutions/${evolutionId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados da evolução\');\n          }\n          \n          const evolutionData = await response.json();\n          displayEvolutionDetails(evolutionData);\n        } else {\n          displayEvolutionDetails(evolution);\n        }\n        \n        // Configurar botões\n        editEvolutionButton.dataset.evolutionId = evolutionId;\n        approveButton.dataset.evolutionId = evolutionId;\n        rejectButton.dataset.evolutionId = evolutionId;\n        \n        // Mostrar ou esconder botões baseado no status\n        if (evolution.status === \'approved\' || evolution.status === \'rejected\') {\n          approveButton.style.display = \'none\';\n          rejectButton.style.display = \'none\';\n        } else {\n          approveButton.style.display = \'block\';\n          rejectButton.style.display = \'block\';\n        }\n        \n        // Carregar anexos\n        loadEvolutionAttachments(evolutionId);\n        \n        // Exibir modal\n        viewEvolutionModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar evolução:\', error);\n        alert(\'Erro ao carregar dados da evolução. Tente novamente.\');\n      }\n    }\n    \n    // Exibir detalhes da evolução\n    function displayEvolutionDetails(evolution) {\n      // Informações do paciente\n      document.getElementById(\'viewPatientName\').textContent = evolution.patient?.fullName || \'N/A\';\n      \n      // Informações do atendimento\n      const appointmentInfo = evolution.appointment \n        ? `Atendimento: ${formatDate(evolution.appointment.startTime)}`\n        : \'\';\n      document.getElementById(\'viewAppointmentInfo\').textContent = appointmentInfo;\n      \n      // Status\n      const statusBadge = document.getElementById(\'viewStatusBadge\');\n      statusBadge.textContent = translateStatus(evolution.status);\n      statusBadge.className = `evolution-status-badge ${evolution.status}`;\n      \n      // Conteúdo da evolução\n      document.getElementById(\'viewTitle\').textContent = evolution.title || \'\';\n      document.getElementById(\'viewContent\').textContent = evolution.content || \'\';\n      \n      // Objetivos alcançados (esconder se vazio)\n      const goalsSection = document.getElementById(\'viewGoalsSection\');\n      if (evolution.goals) {\n        document.getElementById(\'viewGoals\').textContent = evolution.goals;\n        goalsSection.style.display = \'block\';\n      } else {\n        goalsSection.style.display = \'none\';\n      }\n      \n      // Próximos passos (esconder se vazio)\n      const nextStepsSection = document.getElementById(\'viewNextStepsSection\');\n      if (evolution.nextSteps) {\n        document.getElementById(\'viewNextSteps\').textContent = evolution.nextSteps;\n        nextStepsSection.style.display = \'block\';\n      } else {\n        nextStepsSection.style.display = \'none\';\n      }\n      \n      // Metadados\n      document.getElementById(\'viewProfessionalName\').textContent = `Profissional: ${evolution.professional?.user?.fullName || \'N/A\'}`;\n      document.getElementById(\'viewDate\').textContent = `Data: ${formatDate(evolution.date)}`;\n      document.getElementById(\'viewVisibility\').textContent = `Visibilidade: ${translateVisibility(evolution.visibility)}`;\n    }\n    \n    // Carregar anexos da evolução\n    async function loadEvolutionAttachments(evolutionId) {\n      try {\n        const response = await fetch(`/api/evolutions/${evolutionId}/attachments`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar anexos\');\n        }\n        \n        const attachments = await response.json();\n        const fileList = document.getElementById(\'fileList\');\n        \n        if (attachments.length === 0) {\n          fileList.innerHTML = \'<div class="empty-text">Nenhum anexo disponível</div>\';\n          return;\n        }\n        \n        fileList.innerHTML = \'\';\n        \n        attachments.forEach(attachment => {\n          const fileItem = document.createElement(\'div\');\n          fileItem.className = \'file-item\';\n          \n          const fileName = attachment.fileName || \'Arquivo\';\n          const fileUrl = attachment.fileUrl || \'#\';\n          \n          fileItem.innerHTML = `\n            <div class="file-name">\n              <span class="file-icon">📄</span>\n              ${fileName}\n            </div>\n            <div>\n              <a href="${fileUrl}" target="_blank" class="action-button">Visualizar</a>\n              <button class="action-button delete" data-id="${attachment.id}">Excluir</button>\n            </div>\n          `;\n          \n          fileList.appendChild(fileItem);\n        });\n        \n        // Adicionar event listeners para excluir\n        document.querySelectorAll(\'.file-item .delete\').forEach(button => {\n          button.addEventListener(\'click\', () => deleteAttachment(button.dataset.id));\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar anexos:\', error);\n        document.getElementById(\'fileList\').innerHTML = \'<div class="empty-text">Erro ao carregar anexos</div>\';\n      }\n    }\n    \n    // Excluir anexo\n    async function deleteAttachment(attachmentId) {\n      if (!confirm(\'Tem certeza que deseja excluir este anexo?\')) {\n        return;\n      }\n      \n      try {\n        const response = await fetch(`/api/attachments/${attachmentId}`, {\n          method: \'DELETE\',\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao excluir anexo\');\n        }\n        \n        // Recarregar anexos\n        loadEvolutionAttachments(editEvolutionButton.dataset.evolutionId);\n      } catch (error) {\n        console.error(\'Erro ao excluir anexo:\', error);\n        alert(\'Erro ao excluir anexo. Tente novamente.\');\n      }\n    }\n    \n    // Salvar evolução\n    async function saveEvolution() {\n      try {\n        // Validação básica\n        const patientId = document.getElementById(\'patientId\').value;\n        const date = document.getElementById(\'date\').value;\n        const type = document.getElementById(\'type\').value;\n        const title = document.getElementById(\'title\').value;\n        const content = document.getElementById(\'content\').value;\n        \n        if (!patientId || !date || !type || !title || !content) {\n          alert(\'Por favor, preencha todos os campos obrigatórios.\');\n          return;\n        }\n        \n        // Preparar dados da evolução\n        const evolutionData = {\n          patientId: parseInt(patientId),\n          appointmentId: document.getElementById(\'appointmentId\').value ? parseInt(document.getElementById(\'appointmentId\').value) : null,\n          date,\n          type,\n          title,\n          content,\n          goals: document.getElementById(\'goals\').value,\n          nextSteps: document.getElementById(\'nextSteps\').value,\n          status: document.getElementById(\'status\').value,\n          visibility: document.getElementById(\'visibility\').value\n        };\n        \n        const evolutionId = evolutionIdInput.value;\n        let response;\n        \n        if (evolutionId) {\n          // Editar evolução existente\n          response = await fetch(`/api/evolutions/${evolutionId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(evolutionData)\n          });\n        } else {\n          // Adicionar nova evolução\n          response = await fetch(\'/api/evolutions\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(evolutionData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || \'Erro ao salvar evolução\');\n        }\n        \n        // Fechar modal e recarregar lista\n        closeEvolutionModal();\n        loadEvolutions();\n        \n        alert(evolutionId ? \'Evolução atualizada com sucesso!\' : \'Evolução adicionada com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar evolução:\', error);\n        alert(`Erro ao salvar evolução: ${error.message}`);\n      }\n    }\n    \n    // Alterar status da evolução\n    async function changeEvolutionStatus(evolutionId, newStatus) {\n      try {\n        const response = await fetch(`/api/evolutions/${evolutionId}/status`, {\n          method: \'PUT\',\n          headers: {\n            \'Content-Type\': \'application/json\'\n          },\n          credentials: \'include\',\n          body: JSON.stringify({ status: newStatus })\n        });\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || `Erro ao alterar status para ${translateStatus(newStatus)}`);\n        }\n        \n        // Fechar modal e recarregar lista\n        closeViewEvolutionModal();\n        loadEvolutions();\n        \n        alert(`Status alterado para ${translateStatus(newStatus)} com sucesso!`);\n      } catch (error) {\n        console.error(\'Erro ao alterar status:\', error);\n        alert(`Erro ao alterar status: ${error.message}`);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n   $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', () => {\n      checkAuth();\n      setupEventListeners();\n      \n      // Verificar se existe appointmentId na URL (redirecionamento do calendário)\n      const urlParams = new URLSearchParams(window.location.search);\n      const appointmentId = urlParams.get(\'appointmentId\');\n      \n      // Inicializar\n      loadPatients();\n      loadProfessionals();\n      loadEvolutions();\n      \n      // Se tiver appointmentId, abrir formulário para nova evolução\n      if (appointmentId) {\n        setTimeout(() => {\n          createNewEvolutionFromAppointment(appointmentId);\n        }, 1000); // Pequeno atraso para garantir que os dados foram carregados\n      }\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const patientFilter = document.getElementById(\'patientFilter\');\n    const professionalFilter = document.getElementById(\'professionalFilter\');\n    const statusFilter = document.getElementById(\'statusFilter\');\n    const startDateFilter = document.getElementById(\'startDateFilter\');\n    const endDateFilter = document.getElementById(\'endDateFilter\');\n    const filterButton = document.getElementById(\'filterButton\');\n    const evolutionsTableBody = document.getElementById(\'evolutionsTableBody\');\n    const paginationElement = document.getElementById(\'pagination\');\n    const addEvolutionBtn = document.getElementById(\'addEvolutionBtn\');\n    \n    const evolutionModal = document.getElementById(\'evolutionModal\');\n    const viewEvolutionModal = document.getElementById(\'viewEvolutionModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const evolutionForm = document.getElementById(\'evolutionForm\');\n    const evolutionIdInput = document.getElementById(\'evolutionId\');\n    const patientIdSelect = document.getElementById(\'patientId\');\n    const appointmentIdSelect = document.getElementById(\'appointmentId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    \n    const tabDetails = document.getElementById(\'tabDetails\');\n    const tabAttachments = document.getElementById(\'tabAttachments\');\n    const detailsTab = document.getElementById(\'detailsTab\');\n    const attachmentsTab = document.getElementById(\'attachmentsTab\');\n    const detailsTabButtons = document.getElementById(\'detailsTabButtons\');\n    const attachmentsTabButtons = document.getElementById(\'attachmentsTabButtons\');\n    \n    const closeViewButton = document.getElementById(\'closeViewButton\');\n    const closeAttachmentsButton = document.getElementById(\'closeAttachmentsButton\');\n    const editEvolutionButton = document.getElementById(\'editEvolutionButton\');\n    const approveButton = document.getElementById(\'approveButton\');\n    const rejectButton = document.getElementById(\'rejectButton\');\n    \n    // Variáveis para paginação\n    let currentPage = 1;\n    const pageSize = 10;\n    let totalPages = 1;\n    let evolutions = [];\n    let filteredEvolutions = [];\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        const userData = await response.json();\n        displayUserData(userData);\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n      \n      // Configurar permissões baseadas no papel do usuário\n      setupRoleBasedPermissions(user.role);\n    }\n    \n    // Configurar permissões baseadas no papel do usuário\n    function setupRoleBasedPermissions(role) {\n      // Mostrar ou esconder botões baseado no papel\n      if ([\'admin\', \'coordinator\'].includes(role)) {\n        approveButton.style.display = \'block\';\n        rejectButton.style.display = \'block\';\n      } else {\n        approveButton.style.display = \'none\';\n        rejectButton.style.display = \'none\';\n      }\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir status\n    function translateStatus(status) {\n      const translations = {\n        \'pending\': \'Pendente\',\n        \'completed\': \'Concluído\',\n        \'approved\': \'Aprovado\',\n        \'rejected\': \'Rejeitado\'\n      };\n      \n      return translations[status] || status;\n    }\n    \n    // Traduzir visibilidade\n    function translateVisibility(visibility) {\n      const translations = {\n        \'internal\': \'Interno (apenas equipe)\',\n        \'guardian\': \'Responsável (paciente/família)\',\n        \'public\': \'Público (compartilhável)\'\n      };\n      \n      return translations[visibility] || visibility;\n    }\n    \n    // Traduzir tipo de evolução\n    function translateEvolutionType(type) {\n      const translations = {\n        \'psychology_aba\': \'Psicologia - ABA\',\n        \'psychology_cbt\': \'Psicologia - TCC\',\n        \'speech_therapy\': \'Fonoaudiologia\',\n        \'physical_therapy\': \'Fisioterapia\',\n        \'occupational_therapy\': \'Terapia Ocupacional\',\n        \'evaluation\': \'Avaliação\',\n        \'other\': \'Outro\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Formatar data\n    function formatDate(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleDateString(\'pt-BR\');\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Filtros\n      filterButton.addEventListener(\'click\', filterEvolutions);\n      \n      // Adicionar evolução\n      addEvolutionBtn.addEventListener(\'click\', openAddEvolutionModal);\n      \n      // Fechar modal\n      closeModal.addEventListener(\'click\', closeEvolutionModal);\n      closeViewModal.addEventListener(\'click\', closeViewEvolutionModal);\n      cancelButton.addEventListener(\'click\', closeEvolutionModal);\n      closeViewButton.addEventListener(\'click\', closeViewEvolutionModal);\n      closeAttachmentsButton.addEventListener(\'click\', closeViewEvolutionModal);\n      \n      // Modal de background\n      evolutionModal.addEventListener(\'click\', function(e) {\n        if (e.target === evolutionModal) {\n          closeEvolutionModal();\n        }\n      });\n      \n      viewEvolutionModal.addEventListener(\'click\', function(e) {\n        if (e.target === viewEvolutionModal) {\n          closeViewEvolutionModal();\n        }\n      });\n      \n      // Tabs\n      tabDetails.addEventListener(\'click\', function() {\n        tabDetails.classList.add(\'active\');\n        tabAttachments.classList.remove(\'active\');\n        detailsTab.style.display = \'block\';\n        attachmentsTab.style.display = \'none\';\n        detailsTabButtons.style.display = \'flex\';\n        attachmentsTabButtons.style.display = \'none\';\n      });\n      \n      tabAttachments.addEventListener(\'click\', function() {\n        tabDetails.classList.remove(\'active\');\n        tabAttachments.classList.add(\'active\');\n        detailsTab.style.display = \'none\';\n        attachmentsTab.style.display = \'block\';\n        detailsTabButtons.style.display = \'none\';\n        attachmentsTabButtons.style.display = \'flex\';\n      });\n      \n      // Salvar evolução\n      saveButton.addEventListener(\'click\', saveEvolution);\n      \n      // Editar a partir da visualização\n      editEvolutionButton.addEventListener(\'click\', function() {\n        closeViewEvolutionModal();\n        editEvolution(this.dataset.evolutionId);\n      });\n      \n      // Aprovar evolução\n      approveButton.addEventListener(\'click\', function() {\n        changeEvolutionStatus(this.dataset.evolutionId, \'approved\');\n      });\n      \n      // Rejeitar evolução\n      rejectButton.addEventListener(\'click\', function() {\n        changeEvolutionStatus(this.dataset.evolutionId, \'rejected\');\n      });\n      \n      // Paciente selecionado - carregar consultas relacionadas\n      patientIdSelect.addEventListener(\'change\', function() {\n        const patientId = this.value;\n        if (patientId) {\n          loadPatientAppointments(patientId);\n        } else {\n          // Limpar select de consultas\n          appointmentIdSelect.innerHTML = \'<option value="">Selecione o atendimento (opcional)</option>\';\n        }\n      });\n    }\n    \n    // Carregar pacientes\n    async function loadPatients() {\n      try {\n        const response = await fetch(\'/api/patients\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar pacientes\');\n        }\n        \n        const patients = await response.json();\n        \n        // Preencher select de filtro\n        patientFilter.innerHTML = \'<option value="">Todos os pacientes</option>\';\n        patients.forEach(patient => {\n          const option = document.createElement(\'option\');\n          option.value = patient.id;\n          option.textContent = patient.fullName;\n          patientFilter.appendChild(option);\n        });\n        \n        // Preencher select do formulário\n        patientIdSelect.innerHTML = \'<option value="">Selecione o paciente</option>\';\n        patients.forEach(patient => {\n          const option = document.createElement(\'option\');\n          option.value = patient.id;\n          option.textContent = patient.fullName;\n          patientIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar pacientes:\', error);\n      }\n    }\n    \n    // Carregar profissionais\n    async function loadProfessionals() {\n      try {\n        const response = await fetch(\'/api/professionals\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar profissionais\');\n        }\n        \n        const professionals = await response.json();\n        \n        // Preencher select de filtro\n        professionalFilter.innerHTML = \'<option value="">Todos os profissionais</option>\';\n        professionals.forEach(professional => {\n          const option = document.createElement(\'option\');\n          option.value = professional.id;\n          option.textContent = professional.user.fullName;\n          professionalFilter.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar profissionais:\', error);\n      }\n    }\n    \n    // Carregar consultas do paciente\n    async function loadPatientAppointments(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/appointments?status=attended`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar consultas do paciente\');\n        }\n        \n        const appointments = await response.json();\n        \n        // Preencher select de consultas\n        appointmentIdSelect.innerHTML = \'<option value="">Selecione o atendimento (opcional)</option>\';\n        \n        // Ordenar por data (mais recente primeiro)\n        appointments.sort((a, b) => new Date(b.startTime) - new Date(a.startTime));\n        \n        appointments.forEach(appointment => {\n          const date = new Date(appointment.startTime);\n          const formattedDate = date.toLocaleDateString(\'pt-BR\');\n          \n          const option = document.createElement(\'option\');\n          option.value = appointment.id;\n          option.textContent = `${formattedDate} - ${translateEvolutionType(appointment.procedureType)}`;\n          appointmentIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar consultas do paciente:\', error);\n      }\n    }\n    \n    // Carregar evoluções\n    async function loadEvolutions() {\n      try {\n        const url = new URL(\'/api/evolutions\', window.location.origin);\n        \n        // Adicionar parâmetros de filtro, se houver\n        if (patientFilter.value) {\n          url.searchParams.append(\'patientId\', patientFilter.value);\n        }\n        \n        if (professionalFilter.value) {\n          url.searchParams.append(\'professionalId\', professionalFilter.value);\n        }\n        \n        if (statusFilter.value) {\n          url.searchParams.append(\'status\', statusFilter.value);\n        }\n        \n        if (startDateFilter.value) {\n          url.searchParams.append(\'startDate\', startDateFilter.value);\n        }\n        \n        if (endDateFilter.value) {\n          url.searchParams.append(\'endDate\', endDateFilter.value);\n        }\n        \n        const response = await fetch(url, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar evoluções\');\n        }\n        \n        evolutions = await response.json();\n        filteredEvolutions = [...evolutions];\n        \n        // Calcular número total de páginas\n        totalPages = Math.ceil(filteredEvolutions.length / pageSize);\n        \n        // Renderizar tabela e paginação\n        renderEvolutionsTable();\n        renderPagination();\n      } catch (error) {\n        console.error(\'Erro ao carregar evoluções:\', error);\n        evolutionsTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">\n              <div class="empty-state">\n                <div class="empty-icon">❌</div>\n                <div class="empty-text">Erro ao carregar evoluções. Tente novamente.</div>\n                <button class="button button-primary" onclick="loadEvolutions()">Tentar novamente</button>\n              </div>\n            </td>\n          </tr>\n        `;\n      }\n    }\n    \n    // Filtrar evoluções\n    function filterEvolutions() {\n      loadEvolutions();\n    }\n    \n    // Renderizar tabela de evoluções\n    function renderEvolutionsTable() {\n      // Se não há evoluções\n      if (filteredEvolutions.length === 0) {\n        evolutionsTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">\n              <div class="empty-state">\n                <div class="empty-icon">📝</div>\n                <div class="empty-text">Nenhuma evolução encontrada.</div>\n                <button class="button button-primary" id="emptyAddEvolutionBtn">Nova Evolução</button>\n              </div>\n            </td>\n          </tr>\n        `;\n        \n        document.getElementById(\'emptyAddEvolutionBtn\')?.addEventListener(\'click\', openAddEvolutionModal);\n        return;\n      }\n      \n      // Calcular índices para paginação\n      const startIndex = (currentPage - 1) * pageSize;\n      const endIndex = Math.min(startIndex + pageSize, filteredEvolutions.length);\n      const evolutionsToShow = filteredEvolutions.slice(startIndex, endIndex);\n      \n      // Limpar tabela\n      evolutionsTableBody.innerHTML = \'\';\n      \n      // Adicionar linhas\n      evolutionsToShow.forEach(evolution => {\n        const row = document.createElement(\'tr\');\n        \n        // Dados da linha\n        row.innerHTML = `\n          <td>${formatDate(evolution.date)}</td>\n          <td>${evolution.patient?.fullName || \'N/A\'}</td>\n          <td>${evolution.professional?.user?.fullName || \'N/A\'}</td>\n          <td>${translateEvolutionType(evolution.type)}</td>\n          <td><span class="status status-${evolution.status}">${translateStatus(evolution.status)}</span></td>\n          <td>\n            <button class="action-button view-evolution" data-id="${evolution.id}">Visualizar</button>\n            <button class="action-button edit-evolution" data-id="${evolution.id}">Editar</button>\n          </td>\n        `;\n        \n        evolutionsTableBody.appendChild(row);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-evolution\').forEach(button => {\n        button.addEventListener(\'click\', () => viewEvolution(button.dataset.id));\n      });\n      \n      document.querySelectorAll(\'.edit-evolution\').forEach(button => {\n        button.addEventListener(\'click\', () => editEvolution(button.dataset.id));\n      });\n    }\n    \n    // Renderizar paginação\n    function renderPagination() {\n      if (totalPages <= 1) {\n        paginationElement.innerHTML = \'\';\n        return;\n      }\n      \n      let paginationHTML = \'\';\n      \n      // Botão anterior\n      paginationHTML += `\n        <li>\n          <a href="#" class="${currentPage === 1 ? \'disabled\' : \'\'}" \n             onclick="${currentPage > 1 ? \'changePage(\' + (currentPage - 1) + \')\' : \'return false\'}">\n            &laquo;\n          </a>\n        </li>\n      `;\n      \n      // Páginas numéricas\n      for (let i = 1; i <= totalPages; i++) {\n        paginationHTML += `\n          <li>\n            <a href="#" class="${i === currentPage ? \'active\' : \'\'}" \n               onclick="changePage(${i})">\n              ${i}\n            </a>\n          </li>\n        `;\n      }\n      \n      // Botão próximo\n      paginationHTML += `\n        <li>\n          <a href="#" class="${currentPage === totalPages ? \'disabled\' : \'\'}" \n             onclick="${currentPage < totalPages ? \'changePage(\' + (currentPage + 1) + \')\' : \'return false\'}">\n            &raquo;\n          </a>\n        </li>\n      `;\n      \n      paginationElement.innerHTML = paginationHTML;\n    }\n    \n    // Mudar página\n    function changePage(page) {\n      currentPage = page;\n      renderEvolutionsTable();\n      renderPagination();\n      return false; // Prevenir comportamento padrão do link\n    }\n    \n    // Abrir modal para adicionar evolução\n    function openAddEvolutionModal() {\n      modalTitle.textContent = \'Nova Evolução\';\n      evolutionForm.reset();\n      evolutionIdInput.value = \'\';\n      \n      // Definir data padrão como hoje\n      const today = new Date();\n      const dateString = today.toISOString().split(\'T\')[0];\n      document.getElementById(\'date\').value = dateString;\n      \n      // Definir status padrão como "Pendente"\n      document.getElementById(\'status\').value = \'pending\';\n      \n      evolutionModal.classList.add(\'active\');\n    }\n    \n    // Criar nova evolução a partir de um agendamento\n    async function createNewEvolutionFromAppointment(appointmentId) {\n      try {\n        // Buscar dados do agendamento\n        const response = await fetch(`/api/appointments/${appointmentId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar dados do agendamento\');\n        }\n        \n        const appointment = await response.json();\n        \n        // Abrir modal de nova evolução\n        openAddEvolutionModal();\n        \n        // Selecionar o paciente\n        patientIdSelect.value = appointment.patientId;\n        \n        // Carregar consultas do paciente e selecionar o agendamento\n        await loadPatientAppointments(appointment.patientId);\n        appointmentIdSelect.value = appointmentId;\n        \n        // Preencher tipo de evolução baseado no tipo de procedimento\n        document.getElementById(\'type\').value = appointment.procedureType;\n        \n        // Preencher título padrão\n        document.getElementById(\'title\').value = `Evolução - ${new Date(appointment.startTime).toLocaleDateString(\'pt-BR\')}`;\n        \n        // Definir o foco no campo de conteúdo\n        setTimeout(() => {\n          document.getElementById(\'content\').focus();\n        }, 300);\n      } catch (error) {\n        console.error(\'Erro ao criar evolução a partir do agendamento:\', error);\n        alert(\'Erro ao carregar dados do agendamento. Tente novamente.\');\n      }\n    }\n    \n    // Fechar modal\n    function closeEvolutionModal() {\n      evolutionModal.classList.remove(\'active\');\n    }\n    \n    // Fechar modal de visualização\n    function closeViewEvolutionModal() {\n      viewEvolutionModal.classList.remove(\'active\');\n    }\n    \n    // Editar evolução\n    async function editEvolution(evolutionId) {\n      try {\n        modalTitle.textContent = \'Editar Evolução\';\n        \n        const evolution = evolutions.find(e => e.id == evolutionId);\n        \n        if (!evolution) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/evolutions/${evolutionId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados da evolução\');\n          }\n          \n          const evolutionData = await response.json();\n          fillEvolutionForm(evolutionData);\n        } else {\n          fillEvolutionForm(evolution);\n        }\n        \n        evolutionModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar evolução:\', error);\n        alert(\'Erro ao carregar dados da evolução. Tente novamente.\');\n      }\n    }\n    \n    // Preencher formulário com dados da evolução\n    function fillEvolutionForm(evolution) {\n      evolutionIdInput.value = evolution.id;\n      document.getElementById(\'patientId\').value = evolution.patientId || \'\';\n      document.getElementById(\'date\').value = evolution.date ? new Date(evolution.date).toISOString().split(\'T\')[0] : \'\';\n      document.getElementById(\'type\').value = evolution.type || \'\';\n      document.getElementById(\'title\').value = evolution.title || \'\';\n      document.getElementById(\'content\').value = evolution.content || \'\';\n      document.getElementById(\'goals\').value = evolution.goals || \'\';\n      document.getElementById(\'nextSteps\').value = evolution.nextSteps || \'\';\n      document.getElementById(\'status\').value = evolution.status || \'pending\';\n      document.getElementById(\'visibility\').value = evolution.visibility || \'internal\';\n      \n      // Carregar consultas do paciente e selecionar a consulta relacionada\n      if (evolution.patientId) {\n        loadPatientAppointments(evolution.patientId).then(() => {\n          document.getElementById(\'appointmentId\').value = evolution.appointmentId || \'\';\n        });\n      }\n    }\n    \n    // Visualizar evolução\n    async function viewEvolution(evolutionId) {\n      try {\n        const evolution = evolutions.find(e => e.id == evolutionId);\n        \n        if (!evolution) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/evolutions/${evolutionId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados da evolução\');\n          }\n          \n          const evolutionData = await response.json();\n          displayEvolutionDetails(evolutionData);\n        } else {\n          displayEvolutionDetails(evolution);\n        }\n        \n        // Configurar botões\n        editEvolutionButton.dataset.evolutionId = evolutionId;\n        approveButton.dataset.evolutionId = evolutionId;\n        rejectButton.dataset.evolutionId = evolutionId;\n        \n        // Mostrar ou esconder botões baseado no status\n        if (evolution.status === \'approved\' || evolution.status === \'rejected\') {\n          approveButton.style.display = \'none\';\n          rejectButton.style.display = \'none\';\n        } else {\n          approveButton.style.display = \'block\';\n          rejectButton.style.display = \'block\';\n        }\n        \n        // Carregar anexos\n        loadEvolutionAttachments(evolutionId);\n        \n        // Exibir modal\n        viewEvolutionModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar evolução:\', error);\n        alert(\'Erro ao carregar dados da evolução. Tente novamente.\');\n      }\n    }\n    \n    // Exibir detalhes da evolução\n    function displayEvolutionDetails(evolution) {\n      // Informações do paciente\n      document.getElementById(\'viewPatientName\').textContent = evolution.patient?.fullName || \'N/A\';\n      \n      // Informações do atendimento\n      const appointmentInfo = evolution.appointment \n        ? `Atendimento: ${formatDate(evolution.appointment.startTime)}`\n        : \'\';\n      document.getElementById(\'viewAppointmentInfo\').textContent = appointmentInfo;\n      \n      // Status\n      const statusBadge = document.getElementById(\'viewStatusBadge\');\n      statusBadge.textContent = translateStatus(evolution.status);\n      statusBadge.className = `evolution-status-badge ${evolution.status}`;\n      \n      // Conteúdo da evolução\n      document.getElementById(\'viewTitle\').textContent = evolution.title || \'\';\n      document.getElementById(\'viewContent\').textContent = evolution.content || \'\';\n      \n      // Objetivos alcançados (esconder se vazio)\n      const goalsSection = document.getElementById(\'viewGoalsSection\');\n      if (evolution.goals) {\n        document.getElementById(\'viewGoals\').textContent = evolution.goals;\n        goalsSection.style.display = \'block\';\n      } else {\n        goalsSection.style.display = \'none\';\n      }\n      \n      // Próximos passos (esconder se vazio)\n      const nextStepsSection = document.getElementById(\'viewNextStepsSection\');\n      if (evolution.nextSteps) {\n        document.getElementById(\'viewNextSteps\').textContent = evolution.nextSteps;\n        nextStepsSection.style.display = \'block\';\n      } else {\n        nextStepsSection.style.display = \'none\';\n      }\n      \n      // Metadados\n      document.getElementById(\'viewProfessionalName\').textContent = `Profissional: ${evolution.professional?.user?.fullName || \'N/A\'}`;\n      document.getElementById(\'viewDate\').textContent = `Data: ${formatDate(evolution.date)}`;\n      document.getElementById(\'viewVisibility\').textContent = `Visibilidade: ${translateVisibility(evolution.visibility)}`;\n    }\n    \n    // Carregar anexos da evolução\n    async function loadEvolutionAttachments(evolutionId) {\n      try {\n        const response = await fetch(`/api/evolutions/${evolutionId}/attachments`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar anexos\');\n        }\n        \n        const attachments = await response.json();\n        const fileList = document.getElementById(\'fileList\');\n        \n        if (attachments.length === 0) {\n          fileList.innerHTML = \'<div class="empty-text">Nenhum anexo disponível</div>\';\n          return;\n        }\n        \n        fileList.innerHTML = \'\';\n        \n        attachments.forEach(attachment => {\n          const fileItem = document.createElement(\'div\');\n          fileItem.className = \'file-item\';\n          \n          const fileName = attachment.fileName || \'Arquivo\';\n          const fileUrl = attachment.fileUrl || \'#\';\n          \n          fileItem.innerHTML = `\n            <div class="file-name">\n              <span class="file-icon">📄</span>\n              ${fileName}\n            </div>\n            <div>\n              <a href="${fileUrl}" target="_blank" class="action-button">Visualizar</a>\n              <button class="action-button delete" data-id="${attachment.id}">Excluir</button>\n            </div>\n          `;\n          \n          fileList.appendChild(fileItem);\n        });\n        \n        // Adicionar event listeners para excluir\n        document.querySelectorAll(\'.file-item .delete\').forEach(button => {\n          button.addEventListener(\'click\', () => deleteAttachment(button.dataset.id));\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar anexos:\', error);\n        document.getElementById(\'fileList\').innerHTML = \'<div class="empty-text">Erro ao carregar anexos</div>\';\n      }\n    }\n    \n    // Excluir anexo\n    async function deleteAttachment(attachmentId) {\n      if (!confirm(\'Tem certeza que deseja excluir este anexo?\')) {\n        return;\n      }\n      \n      try {\n        const response = await fetch(`/api/attachments/${attachmentId}`, {\n          method: \'DELETE\',\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao excluir anexo\');\n        }\n        \n        // Recarregar anexos\n        loadEvolutionAttachments(editEvolutionButton.dataset.evolutionId);\n      } catch (error) {\n        console.error(\'Erro ao excluir anexo:\', error);\n        alert(\'Erro ao excluir anexo. Tente novamente.\');\n      }\n    }\n    \n    // Salvar evolução\n    async function saveEvolution() {\n      try {\n        // Validação básica\n        const patientId = document.getElementById(\'patientId\').value;\n        const date = document.getElementById(\'date\').value;\n        const type = document.getElementById(\'type\').value;\n        const title = document.getElementById(\'title\').value;\n        const content = document.getElementById(\'content\').value;\n        \n        if (!patientId || !date || !type || !title || !content) {\n          alert(\'Por favor, preencha todos os campos obrigatórios.\');\n          return;\n        }\n        \n        // Preparar dados da evolução\n        const evolutionData = {\n          patientId: parseInt(patientId),\n          appointmentId: document.getElementById(\'appointmentId\').value ? parseInt(document.getElementById(\'appointmentId\').value) : null,\n          date,\n          type,\n          title,\n          content,\n          goals: document.getElementById(\'goals\').value,\n          nextSteps: document.getElementById(\'nextSteps\').value,\n          status: document.getElementById(\'status\').value,\n          visibility: document.getElementById(\'visibility\').value\n        };\n        \n        const evolutionId = evolutionIdInput.value;\n        let response;\n        \n        if (evolutionId) {\n          // Editar evolução existente\n          response = await fetch(`/api/evolutions/${evolutionId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(evolutionData)\n          });\n        } else {\n          // Adicionar nova evolução\n          response = await fetch(\'/api/evolutions\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(evolutionData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || \'Erro ao salvar evolução\');\n        }\n        \n        // Fechar modal e recarregar lista\n        closeEvolutionModal();\n        loadEvolutions();\n        \n        alert(evolutionId ? \'Evolução atualizada com sucesso!\' : \'Evolução adicionada com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar evolução:\', error);\n        alert(`Erro ao salvar evolução: ${error.message}`);\n      }\n    }\n    \n    // Alterar status da evolução\n    async function changeEvolutionStatus(evolutionId, newStatus) {\n      try {\n        const response = await fetch(`/api/evolutions/${evolutionId}/status`, {\n          method: \'PUT\',\n          headers: {\n            \'Content-Type\': \'application/json\'\n          },\n          credentials: \'include\',\n          body: JSON.stringify({ status: newStatus })\n        });\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || `Erro ao alterar status para ${translateStatus(newStatus)}`);\n        }\n        \n        // Fechar modal e recarregar lista\n        closeViewEvolutionModal();\n        loadEvolutions();\n        \n        alert(`Status alterado para ${translateStatus(newStatus)} com sucesso!`);\n      } catch (error) {\n        console.error(\'Erro ao alterar status:\', error);\n        alert(`Erro ao alterar status: ${error.message}`);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n  </script>\n', PosixPath('client/public/evolutions.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = d656932dbdfe98594838a6b6968656a35ba1fe661bf89fd42b5d644c4b3f425c1f8d309584f072d44f3c01f4fddf4652e2120b762b8622d09561f77936f22b0d_0
2025-05-07 18:31:35,177 - semgrep.rule_match - DEBUG - match_key = ('\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', () => {\n      checkAuth();\n      setupEventListeners();\n      \n      // Verificar se existe appointmentId na URL (redirecionamento do calendário)\n      const urlParams = new URLSearchParams(window.location.search);\n      const appointmentId = urlParams.get(\'appointmentId\');\n      \n      // Inicializar\n      loadPatients();\n      loadProfessionals();\n      loadEvolutions();\n      \n      // Se tiver appointmentId, abrir formulário para nova evolução\n      if (appointmentId) {\n        setTimeout(() => {\n          createNewEvolutionFromAppointment(appointmentId);\n        }, 1000); // Pequeno atraso para garantir que os dados foram carregados\n      }\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const patientFilter = document.getElementById(\'patientFilter\');\n    const professionalFilter = document.getElementById(\'professionalFilter\');\n    const statusFilter = document.getElementById(\'statusFilter\');\n    const startDateFilter = document.getElementById(\'startDateFilter\');\n    const endDateFilter = document.getElementById(\'endDateFilter\');\n    const filterButton = document.getElementById(\'filterButton\');\n    const evolutionsTableBody = document.getElementById(\'evolutionsTableBody\');\n    const paginationElement = document.getElementById(\'pagination\');\n    const addEvolutionBtn = document.getElementById(\'addEvolutionBtn\');\n    \n    const evolutionModal = document.getElementById(\'evolutionModal\');\n    const viewEvolutionModal = document.getElementById(\'viewEvolutionModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const evolutionForm = document.getElementById(\'evolutionForm\');\n    const evolutionIdInput = document.getElementById(\'evolutionId\');\n    const patientIdSelect = document.getElementById(\'patientId\');\n    const appointmentIdSelect = document.getElementById(\'appointmentId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    \n    const tabDetails = document.getElementById(\'tabDetails\');\n    const tabAttachments = document.getElementById(\'tabAttachments\');\n    const detailsTab = document.getElementById(\'detailsTab\');\n    const attachmentsTab = document.getElementById(\'attachmentsTab\');\n    const detailsTabButtons = document.getElementById(\'detailsTabButtons\');\n    const attachmentsTabButtons = document.getElementById(\'attachmentsTabButtons\');\n    \n    const closeViewButton = document.getElementById(\'closeViewButton\');\n    const closeAttachmentsButton = document.getElementById(\'closeAttachmentsButton\');\n    const editEvolutionButton = document.getElementById(\'editEvolutionButton\');\n    const approveButton = document.getElementById(\'approveButton\');\n    const rejectButton = document.getElementById(\'rejectButton\');\n    \n    // Variáveis para paginação\n    let currentPage = 1;\n    const pageSize = 10;\n    let totalPages = 1;\n    let evolutions = [];\n    let filteredEvolutions = [];\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        const userData = await response.json();\n        displayUserData(userData);\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n      \n      // Configurar permissões baseadas no papel do usuário\n      setupRoleBasedPermissions(user.role);\n    }\n    \n    // Configurar permissões baseadas no papel do usuário\n    function setupRoleBasedPermissions(role) {\n      // Mostrar ou esconder botões baseado no papel\n      if ([\'admin\', \'coordinator\'].includes(role)) {\n        approveButton.style.display = \'block\';\n        rejectButton.style.display = \'block\';\n      } else {\n        approveButton.style.display = \'none\';\n        rejectButton.style.display = \'none\';\n      }\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir status\n    function translateStatus(status) {\n      const translations = {\n        \'pending\': \'Pendente\',\n        \'completed\': \'Concluído\',\n        \'approved\': \'Aprovado\',\n        \'rejected\': \'Rejeitado\'\n      };\n      \n      return translations[status] || status;\n    }\n    \n    // Traduzir visibilidade\n    function translateVisibility(visibility) {\n      const translations = {\n        \'internal\': \'Interno (apenas equipe)\',\n        \'guardian\': \'Responsável (paciente/família)\',\n        \'public\': \'Público (compartilhável)\'\n      };\n      \n      return translations[visibility] || visibility;\n    }\n    \n    // Traduzir tipo de evolução\n    function translateEvolutionType(type) {\n      const translations = {\n        \'psychology_aba\': \'Psicologia - ABA\',\n        \'psychology_cbt\': \'Psicologia - TCC\',\n        \'speech_therapy\': \'Fonoaudiologia\',\n        \'physical_therapy\': \'Fisioterapia\',\n        \'occupational_therapy\': \'Terapia Ocupacional\',\n        \'evaluation\': \'Avaliação\',\n        \'other\': \'Outro\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Formatar data\n    function formatDate(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleDateString(\'pt-BR\');\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Filtros\n      filterButton.addEventListener(\'click\', filterEvolutions);\n      \n      // Adicionar evolução\n      addEvolutionBtn.addEventListener(\'click\', openAddEvolutionModal);\n      \n      // Fechar modal\n      closeModal.addEventListener(\'click\', closeEvolutionModal);\n      closeViewModal.addEventListener(\'click\', closeViewEvolutionModal);\n      cancelButton.addEventListener(\'click\', closeEvolutionModal);\n      closeViewButton.addEventListener(\'click\', closeViewEvolutionModal);\n      closeAttachmentsButton.addEventListener(\'click\', closeViewEvolutionModal);\n      \n      // Modal de background\n      evolutionModal.addEventListener(\'click\', function(e) {\n        if (e.target === evolutionModal) {\n          closeEvolutionModal();\n        }\n      });\n      \n      viewEvolutionModal.addEventListener(\'click\', function(e) {\n        if (e.target === viewEvolutionModal) {\n          closeViewEvolutionModal();\n        }\n      });\n      \n      // Tabs\n      tabDetails.addEventListener(\'click\', function() {\n        tabDetails.classList.add(\'active\');\n        tabAttachments.classList.remove(\'active\');\n        detailsTab.style.display = \'block\';\n        attachmentsTab.style.display = \'none\';\n        detailsTabButtons.style.display = \'flex\';\n        attachmentsTabButtons.style.display = \'none\';\n      });\n      \n      tabAttachments.addEventListener(\'click\', function() {\n        tabDetails.classList.remove(\'active\');\n        tabAttachments.classList.add(\'active\');\n        detailsTab.style.display = \'none\';\n        attachmentsTab.style.display = \'block\';\n        detailsTabButtons.style.display = \'none\';\n        attachmentsTabButtons.style.display = \'flex\';\n      });\n      \n      // Salvar evolução\n      saveButton.addEventListener(\'click\', saveEvolution);\n      \n      // Editar a partir da visualização\n      editEvolutionButton.addEventListener(\'click\', function() {\n        closeViewEvolutionModal();\n        editEvolution(this.dataset.evolutionId);\n      });\n      \n      // Aprovar evolução\n      approveButton.addEventListener(\'click\', function() {\n        changeEvolutionStatus(this.dataset.evolutionId, \'approved\');\n      });\n      \n      // Rejeitar evolução\n      rejectButton.addEventListener(\'click\', function() {\n        changeEvolutionStatus(this.dataset.evolutionId, \'rejected\');\n      });\n      \n      // Paciente selecionado - carregar consultas relacionadas\n      patientIdSelect.addEventListener(\'change\', function() {\n        const patientId = this.value;\n        if (patientId) {\n          loadPatientAppointments(patientId);\n        } else {\n          // Limpar select de consultas\n          appointmentIdSelect.innerHTML = \'<option value="">Selecione o atendimento (opcional)</option>\';\n        }\n      });\n    }\n    \n    // Carregar pacientes\n    async function loadPatients() {\n      try {\n        const response = await fetch(\'/api/patients\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar pacientes\');\n        }\n        \n        const patients = await response.json();\n        \n        // Preencher select de filtro\n        patientFilter.innerHTML = \'<option value="">Todos os pacientes</option>\';\n        patients.forEach(patient => {\n          const option = document.createElement(\'option\');\n          option.value = patient.id;\n          option.textContent = patient.fullName;\n          patientFilter.appendChild(option);\n        });\n        \n        // Preencher select do formulário\n        patientIdSelect.innerHTML = \'<option value="">Selecione o paciente</option>\';\n        patients.forEach(patient => {\n          const option = document.createElement(\'option\');\n          option.value = patient.id;\n          option.textContent = patient.fullName;\n          patientIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar pacientes:\', error);\n      }\n    }\n    \n    // Carregar profissionais\n    async function loadProfessionals() {\n      try {\n        const response = await fetch(\'/api/professionals\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar profissionais\');\n        }\n        \n        const professionals = await response.json();\n        \n        // Preencher select de filtro\n        professionalFilter.innerHTML = \'<option value="">Todos os profissionais</option>\';\n        professionals.forEach(professional => {\n          const option = document.createElement(\'option\');\n          option.value = professional.id;\n          option.textContent = professional.user.fullName;\n          professionalFilter.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar profissionais:\', error);\n      }\n    }\n    \n    // Carregar consultas do paciente\n    async function loadPatientAppointments(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/appointments?status=attended`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar consultas do paciente\');\n        }\n        \n        const appointments = await response.json();\n        \n        // Preencher select de consultas\n        appointmentIdSelect.innerHTML = \'<option value="">Selecione o atendimento (opcional)</option>\';\n        \n        // Ordenar por data (mais recente primeiro)\n        appointments.sort((a, b) => new Date(b.startTime) - new Date(a.startTime));\n        \n        appointments.forEach(appointment => {\n          const date = new Date(appointment.startTime);\n          const formattedDate = date.toLocaleDateString(\'pt-BR\');\n          \n          const option = document.createElement(\'option\');\n          option.value = appointment.id;\n          option.textContent = `${formattedDate} - ${translateEvolutionType(appointment.procedureType)}`;\n          appointmentIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar consultas do paciente:\', error);\n      }\n    }\n    \n    // Carregar evoluções\n    async function loadEvolutions() {\n      try {\n        const url = new URL(\'/api/evolutions\', window.location.origin);\n        \n        // Adicionar parâmetros de filtro, se houver\n        if (patientFilter.value) {\n          url.searchParams.append(\'patientId\', patientFilter.value);\n        }\n        \n        if (professionalFilter.value) {\n          url.searchParams.append(\'professionalId\', professionalFilter.value);\n        }\n        \n        if (statusFilter.value) {\n          url.searchParams.append(\'status\', statusFilter.value);\n        }\n        \n        if (startDateFilter.value) {\n          url.searchParams.append(\'startDate\', startDateFilter.value);\n        }\n        \n        if (endDateFilter.value) {\n          url.searchParams.append(\'endDate\', endDateFilter.value);\n        }\n        \n        const response = await fetch(url, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar evoluções\');\n        }\n        \n        evolutions = await response.json();\n        filteredEvolutions = [...evolutions];\n        \n        // Calcular número total de páginas\n        totalPages = Math.ceil(filteredEvolutions.length / pageSize);\n        \n        // Renderizar tabela e paginação\n        renderEvolutionsTable();\n        renderPagination();\n      } catch (error) {\n        console.error(\'Erro ao carregar evoluções:\', error);\n        evolutionsTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">\n              <div class="empty-state">\n                <div class="empty-icon">❌</div>\n                <div class="empty-text">Erro ao carregar evoluções. Tente novamente.</div>\n                <button class="button button-primary" onclick="loadEvolutions()">Tentar novamente</button>\n              </div>\n            </td>\n          </tr>\n        `;\n      }\n    }\n    \n    // Filtrar evoluções\n    function filterEvolutions() {\n      loadEvolutions();\n    }\n    \n    // Renderizar tabela de evoluções\n    function renderEvolutionsTable() {\n      // Se não há evoluções\n      if (filteredEvolutions.length === 0) {\n        evolutionsTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">\n              <div class="empty-state">\n                <div class="empty-icon">📝</div>\n                <div class="empty-text">Nenhuma evolução encontrada.</div>\n                <button class="button button-primary" id="emptyAddEvolutionBtn">Nova Evolução</button>\n              </div>\n            </td>\n          </tr>\n        `;\n        \n        document.getElementById(\'emptyAddEvolutionBtn\')?.addEventListener(\'click\', openAddEvolutionModal);\n        return;\n      }\n      \n      // Calcular índices para paginação\n      const startIndex = (currentPage - 1) * pageSize;\n      const endIndex = Math.min(startIndex + pageSize, filteredEvolutions.length);\n      const evolutionsToShow = filteredEvolutions.slice(startIndex, endIndex);\n      \n      // Limpar tabela\n      evolutionsTableBody.innerHTML = \'\';\n      \n      // Adicionar linhas\n      evolutionsToShow.forEach(evolution => {\n        const row = document.createElement(\'tr\');\n        \n        // Dados da linha\n        row.innerHTML = `\n          <td>${formatDate(evolution.date)}</td>\n          <td>${evolution.patient?.fullName || \'N/A\'}</td>\n          <td>${evolution.professional?.user?.fullName || \'N/A\'}</td>\n          <td>${translateEvolutionType(evolution.type)}</td>\n          <td><span class="status status-${evolution.status}">${translateStatus(evolution.status)}</span></td>\n          <td>\n            <button class="action-button view-evolution" data-id="${evolution.id}">Visualizar</button>\n            <button class="action-button edit-evolution" data-id="${evolution.id}">Editar</button>\n          </td>\n        `;\n        \n        evolutionsTableBody.appendChild(row);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-evolution\').forEach(button => {\n        button.addEventListener(\'click\', () => viewEvolution(button.dataset.id));\n      });\n      \n      document.querySelectorAll(\'.edit-evolution\').forEach(button => {\n        button.addEventListener(\'click\', () => editEvolution(button.dataset.id));\n      });\n    }\n    \n    // Renderizar paginação\n    function renderPagination() {\n      if (totalPages <= 1) {\n        paginationElement.innerHTML = \'\';\n        return;\n      }\n      \n      let paginationHTML = \'\';\n      \n      // Botão anterior\n      paginationHTML += `\n        <li>\n          <a href="#" class="${currentPage === 1 ? \'disabled\' : \'\'}" \n             onclick="${currentPage > 1 ? \'changePage(\' + (currentPage - 1) + \')\' : \'return false\'}">\n            &laquo;\n          </a>\n        </li>\n      `;\n      \n      // Páginas numéricas\n      for (let i = 1; i <= totalPages; i++) {\n        paginationHTML += `\n          <li>\n            <a href="#" class="${i === currentPage ? \'active\' : \'\'}" \n               onclick="changePage(${i})">\n              ${i}\n            </a>\n          </li>\n        `;\n      }\n      \n      // Botão próximo\n      paginationHTML += `\n        <li>\n          <a href="#" class="${currentPage === totalPages ? \'disabled\' : \'\'}" \n             onclick="${currentPage < totalPages ? \'changePage(\' + (currentPage + 1) + \')\' : \'return false\'}">\n            &raquo;\n          </a>\n        </li>\n      `;\n      \n      paginationElement.innerHTML = paginationHTML;\n    }\n    \n    // Mudar página\n    function changePage(page) {\n      currentPage = page;\n      renderEvolutionsTable();\n      renderPagination();\n      return false; // Prevenir comportamento padrão do link\n    }\n    \n    // Abrir modal para adicionar evolução\n    function openAddEvolutionModal() {\n      modalTitle.textContent = \'Nova Evolução\';\n      evolutionForm.reset();\n      evolutionIdInput.value = \'\';\n      \n      // Definir data padrão como hoje\n      const today = new Date();\n      const dateString = today.toISOString().split(\'T\')[0];\n      document.getElementById(\'date\').value = dateString;\n      \n      // Definir status padrão como "Pendente"\n      document.getElementById(\'status\').value = \'pending\';\n      \n      evolutionModal.classList.add(\'active\');\n    }\n    \n    // Criar nova evolução a partir de um agendamento\n    async function createNewEvolutionFromAppointment(appointmentId) {\n      try {\n        // Buscar dados do agendamento\n        const response = await fetch(`/api/appointments/${appointmentId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar dados do agendamento\');\n        }\n        \n        const appointment = await response.json();\n        \n        // Abrir modal de nova evolução\n        openAddEvolutionModal();\n        \n        // Selecionar o paciente\n        patientIdSelect.value = appointment.patientId;\n        \n        // Carregar consultas do paciente e selecionar o agendamento\n        await loadPatientAppointments(appointment.patientId);\n        appointmentIdSelect.value = appointmentId;\n        \n        // Preencher tipo de evolução baseado no tipo de procedimento\n        document.getElementById(\'type\').value = appointment.procedureType;\n        \n        // Preencher título padrão\n        document.getElementById(\'title\').value = `Evolução - ${new Date(appointment.startTime).toLocaleDateString(\'pt-BR\')}`;\n        \n        // Definir o foco no campo de conteúdo\n        setTimeout(() => {\n          document.getElementById(\'content\').focus();\n        }, 300);\n      } catch (error) {\n        console.error(\'Erro ao criar evolução a partir do agendamento:\', error);\n        alert(\'Erro ao carregar dados do agendamento. Tente novamente.\');\n      }\n    }\n    \n    // Fechar modal\n    function closeEvolutionModal() {\n      evolutionModal.classList.remove(\'active\');\n    }\n    \n    // Fechar modal de visualização\n    function closeViewEvolutionModal() {\n      viewEvolutionModal.classList.remove(\'active\');\n    }\n    \n    // Editar evolução\n    async function editEvolution(evolutionId) {\n      try {\n        modalTitle.textContent = \'Editar Evolução\';\n        \n        const evolution = evolutions.find(e => e.id == evolutionId);\n        \n        if (!evolution) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/evolutions/${evolutionId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados da evolução\');\n          }\n          \n          const evolutionData = await response.json();\n          fillEvolutionForm(evolutionData);\n        } else {\n          fillEvolutionForm(evolution);\n        }\n        \n        evolutionModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar evolução:\', error);\n        alert(\'Erro ao carregar dados da evolução. Tente novamente.\');\n      }\n    }\n    \n    // Preencher formulário com dados da evolução\n    function fillEvolutionForm(evolution) {\n      evolutionIdInput.value = evolution.id;\n      document.getElementById(\'patientId\').value = evolution.patientId || \'\';\n      document.getElementById(\'date\').value = evolution.date ? new Date(evolution.date).toISOString().split(\'T\')[0] : \'\';\n      document.getElementById(\'type\').value = evolution.type || \'\';\n      document.getElementById(\'title\').value = evolution.title || \'\';\n      document.getElementById(\'content\').value = evolution.content || \'\';\n      document.getElementById(\'goals\').value = evolution.goals || \'\';\n      document.getElementById(\'nextSteps\').value = evolution.nextSteps || \'\';\n      document.getElementById(\'status\').value = evolution.status || \'pending\';\n      document.getElementById(\'visibility\').value = evolution.visibility || \'internal\';\n      \n      // Carregar consultas do paciente e selecionar a consulta relacionada\n      if (evolution.patientId) {\n        loadPatientAppointments(evolution.patientId).then(() => {\n          document.getElementById(\'appointmentId\').value = evolution.appointmentId || \'\';\n        });\n      }\n    }\n    \n    // Visualizar evolução\n    async function viewEvolution(evolutionId) {\n      try {\n        const evolution = evolutions.find(e => e.id == evolutionId);\n        \n        if (!evolution) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/evolutions/${evolutionId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados da evolução\');\n          }\n          \n          const evolutionData = await response.json();\n          displayEvolutionDetails(evolutionData);\n        } else {\n          displayEvolutionDetails(evolution);\n        }\n        \n        // Configurar botões\n        editEvolutionButton.dataset.evolutionId = evolutionId;\n        approveButton.dataset.evolutionId = evolutionId;\n        rejectButton.dataset.evolutionId = evolutionId;\n        \n        // Mostrar ou esconder botões baseado no status\n        if (evolution.status === \'approved\' || evolution.status === \'rejected\') {\n          approveButton.style.display = \'none\';\n          rejectButton.style.display = \'none\';\n        } else {\n          approveButton.style.display = \'block\';\n          rejectButton.style.display = \'block\';\n        }\n        \n        // Carregar anexos\n        loadEvolutionAttachments(evolutionId);\n        \n        // Exibir modal\n        viewEvolutionModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar evolução:\', error);\n        alert(\'Erro ao carregar dados da evolução. Tente novamente.\');\n      }\n    }\n    \n    // Exibir detalhes da evolução\n    function displayEvolutionDetails(evolution) {\n      // Informações do paciente\n      document.getElementById(\'viewPatientName\').textContent = evolution.patient?.fullName || \'N/A\';\n      \n      // Informações do atendimento\n      const appointmentInfo = evolution.appointment \n        ? `Atendimento: ${formatDate(evolution.appointment.startTime)}`\n        : \'\';\n      document.getElementById(\'viewAppointmentInfo\').textContent = appointmentInfo;\n      \n      // Status\n      const statusBadge = document.getElementById(\'viewStatusBadge\');\n      statusBadge.textContent = translateStatus(evolution.status);\n      statusBadge.className = `evolution-status-badge ${evolution.status}`;\n      \n      // Conteúdo da evolução\n      document.getElementById(\'viewTitle\').textContent = evolution.title || \'\';\n      document.getElementById(\'viewContent\').textContent = evolution.content || \'\';\n      \n      // Objetivos alcançados (esconder se vazio)\n      const goalsSection = document.getElementById(\'viewGoalsSection\');\n      if (evolution.goals) {\n        document.getElementById(\'viewGoals\').textContent = evolution.goals;\n        goalsSection.style.display = \'block\';\n      } else {\n        goalsSection.style.display = \'none\';\n      }\n      \n      // Próximos passos (esconder se vazio)\n      const nextStepsSection = document.getElementById(\'viewNextStepsSection\');\n      if (evolution.nextSteps) {\n        document.getElementById(\'viewNextSteps\').textContent = evolution.nextSteps;\n        nextStepsSection.style.display = \'block\';\n      } else {\n        nextStepsSection.style.display = \'none\';\n      }\n      \n      // Metadados\n      document.getElementById(\'viewProfessionalName\').textContent = `Profissional: ${evolution.professional?.user?.fullName || \'N/A\'}`;\n      document.getElementById(\'viewDate\').textContent = `Data: ${formatDate(evolution.date)}`;\n      document.getElementById(\'viewVisibility\').textContent = `Visibilidade: ${translateVisibility(evolution.visibility)}`;\n    }\n    \n    // Carregar anexos da evolução\n    async function loadEvolutionAttachments(evolutionId) {\n      try {\n        const response = await fetch(`/api/evolutions/${evolutionId}/attachments`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar anexos\');\n        }\n        \n        const attachments = await response.json();\n        const fileList = document.getElementById(\'fileList\');\n        \n        if (attachments.length === 0) {\n          fileList.innerHTML = \'<div class="empty-text">Nenhum anexo disponível</div>\';\n          return;\n        }\n        \n        fileList.innerHTML = \'\';\n        \n        attachments.forEach(attachment => {\n          const fileItem = document.createElement(\'div\');\n          fileItem.className = \'file-item\';\n          \n          const fileName = attachment.fileName || \'Arquivo\';\n          const fileUrl = attachment.fileUrl || \'#\';\n          \n          fileItem.innerHTML = `\n            <div class="file-name">\n              <span class="file-icon">📄</span>\n              ${fileName}\n            </div>\n            <div>\n              <a href="${fileUrl}" target="_blank" class="action-button">Visualizar</a>\n              <button class="action-button delete" data-id="${attachment.id}">Excluir</button>\n            </div>\n          `;\n          \n          fileList.appendChild(fileItem);\n        });\n        \n        // Adicionar event listeners para excluir\n        document.querySelectorAll(\'.file-item .delete\').forEach(button => {\n          button.addEventListener(\'click\', () => deleteAttachment(button.dataset.id));\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar anexos:\', error);\n        document.getElementById(\'fileList\').innerHTML = \'<div class="empty-text">Erro ao carregar anexos</div>\';\n      }\n    }\n    \n    // Excluir anexo\n    async function deleteAttachment(attachmentId) {\n      if (!confirm(\'Tem certeza que deseja excluir este anexo?\')) {\n        return;\n      }\n      \n      try {\n        const response = await fetch(`/api/attachments/${attachmentId}`, {\n          method: \'DELETE\',\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao excluir anexo\');\n        }\n        \n        // Recarregar anexos\n        loadEvolutionAttachments(editEvolutionButton.dataset.evolutionId);\n      } catch (error) {\n        console.error(\'Erro ao excluir anexo:\', error);\n        alert(\'Erro ao excluir anexo. Tente novamente.\');\n      }\n    }\n    \n    // Salvar evolução\n    async function saveEvolution() {\n      try {\n        // Validação básica\n        const patientId = document.getElementById(\'patientId\').value;\n        const date = document.getElementById(\'date\').value;\n        const type = document.getElementById(\'type\').value;\n        const title = document.getElementById(\'title\').value;\n        const content = document.getElementById(\'content\').value;\n        \n        if (!patientId || !date || !type || !title || !content) {\n          alert(\'Por favor, preencha todos os campos obrigatórios.\');\n          return;\n        }\n        \n        // Preparar dados da evolução\n        const evolutionData = {\n          patientId: parseInt(patientId),\n          appointmentId: document.getElementById(\'appointmentId\').value ? parseInt(document.getElementById(\'appointmentId\').value) : null,\n          date,\n          type,\n          title,\n          content,\n          goals: document.getElementById(\'goals\').value,\n          nextSteps: document.getElementById(\'nextSteps\').value,\n          status: document.getElementById(\'status\').value,\n          visibility: document.getElementById(\'visibility\').value\n        };\n        \n        const evolutionId = evolutionIdInput.value;\n        let response;\n        \n        if (evolutionId) {\n          // Editar evolução existente\n          response = await fetch(`/api/evolutions/${evolutionId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(evolutionData)\n          });\n        } else {\n          // Adicionar nova evolução\n          response = await fetch(\'/api/evolutions\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(evolutionData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || \'Erro ao salvar evolução\');\n        }\n        \n        // Fechar modal e recarregar lista\n        closeEvolutionModal();\n        loadEvolutions();\n        \n        alert(evolutionId ? \'Evolução atualizada com sucesso!\' : \'Evolução adicionada com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar evolução:\', error);\n        alert(`Erro ao salvar evolução: ${error.message}`);\n      }\n    }\n    \n    // Alterar status da evolução\n    async function changeEvolutionStatus(evolutionId, newStatus) {\n      try {\n        const response = await fetch(`/api/evolutions/${evolutionId}/status`, {\n          method: \'PUT\',\n          headers: {\n            \'Content-Type\': \'application/json\'\n          },\n          credentials: \'include\',\n          body: JSON.stringify({ status: newStatus })\n        });\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || `Erro ao alterar status para ${translateStatus(newStatus)}`);\n        }\n        \n        // Fechar modal e recarregar lista\n        closeViewEvolutionModal();\n        loadEvolutions();\n        \n        alert(`Status alterado para ${translateStatus(newStatus)} com sucesso!`);\n      } catch (error) {\n        console.error(\'Erro ao alterar status:\', error);\n        alert(`Erro ao alterar status: ${error.message}`);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n   $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', () => {\n      checkAuth();\n      setupEventListeners();\n      \n      // Verificar se existe appointmentId na URL (redirecionamento do calendário)\n      const urlParams = new URLSearchParams(window.location.search);\n      const appointmentId = urlParams.get(\'appointmentId\');\n      \n      // Inicializar\n      loadPatients();\n      loadProfessionals();\n      loadEvolutions();\n      \n      // Se tiver appointmentId, abrir formulário para nova evolução\n      if (appointmentId) {\n        setTimeout(() => {\n          createNewEvolutionFromAppointment(appointmentId);\n        }, 1000); // Pequeno atraso para garantir que os dados foram carregados\n      }\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const patientFilter = document.getElementById(\'patientFilter\');\n    const professionalFilter = document.getElementById(\'professionalFilter\');\n    const statusFilter = document.getElementById(\'statusFilter\');\n    const startDateFilter = document.getElementById(\'startDateFilter\');\n    const endDateFilter = document.getElementById(\'endDateFilter\');\n    const filterButton = document.getElementById(\'filterButton\');\n    const evolutionsTableBody = document.getElementById(\'evolutionsTableBody\');\n    const paginationElement = document.getElementById(\'pagination\');\n    const addEvolutionBtn = document.getElementById(\'addEvolutionBtn\');\n    \n    const evolutionModal = document.getElementById(\'evolutionModal\');\n    const viewEvolutionModal = document.getElementById(\'viewEvolutionModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const evolutionForm = document.getElementById(\'evolutionForm\');\n    const evolutionIdInput = document.getElementById(\'evolutionId\');\n    const patientIdSelect = document.getElementById(\'patientId\');\n    const appointmentIdSelect = document.getElementById(\'appointmentId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    \n    const tabDetails = document.getElementById(\'tabDetails\');\n    const tabAttachments = document.getElementById(\'tabAttachments\');\n    const detailsTab = document.getElementById(\'detailsTab\');\n    const attachmentsTab = document.getElementById(\'attachmentsTab\');\n    const detailsTabButtons = document.getElementById(\'detailsTabButtons\');\n    const attachmentsTabButtons = document.getElementById(\'attachmentsTabButtons\');\n    \n    const closeViewButton = document.getElementById(\'closeViewButton\');\n    const closeAttachmentsButton = document.getElementById(\'closeAttachmentsButton\');\n    const editEvolutionButton = document.getElementById(\'editEvolutionButton\');\n    const approveButton = document.getElementById(\'approveButton\');\n    const rejectButton = document.getElementById(\'rejectButton\');\n    \n    // Variáveis para paginação\n    let currentPage = 1;\n    const pageSize = 10;\n    let totalPages = 1;\n    let evolutions = [];\n    let filteredEvolutions = [];\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        const userData = await response.json();\n        displayUserData(userData);\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n      \n      // Configurar permissões baseadas no papel do usuário\n      setupRoleBasedPermissions(user.role);\n    }\n    \n    // Configurar permissões baseadas no papel do usuário\n    function setupRoleBasedPermissions(role) {\n      // Mostrar ou esconder botões baseado no papel\n      if ([\'admin\', \'coordinator\'].includes(role)) {\n        approveButton.style.display = \'block\';\n        rejectButton.style.display = \'block\';\n      } else {\n        approveButton.style.display = \'none\';\n        rejectButton.style.display = \'none\';\n      }\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir status\n    function translateStatus(status) {\n      const translations = {\n        \'pending\': \'Pendente\',\n        \'completed\': \'Concluído\',\n        \'approved\': \'Aprovado\',\n        \'rejected\': \'Rejeitado\'\n      };\n      \n      return translations[status] || status;\n    }\n    \n    // Traduzir visibilidade\n    function translateVisibility(visibility) {\n      const translations = {\n        \'internal\': \'Interno (apenas equipe)\',\n        \'guardian\': \'Responsável (paciente/família)\',\n        \'public\': \'Público (compartilhável)\'\n      };\n      \n      return translations[visibility] || visibility;\n    }\n    \n    // Traduzir tipo de evolução\n    function translateEvolutionType(type) {\n      const translations = {\n        \'psychology_aba\': \'Psicologia - ABA\',\n        \'psychology_cbt\': \'Psicologia - TCC\',\n        \'speech_therapy\': \'Fonoaudiologia\',\n        \'physical_therapy\': \'Fisioterapia\',\n        \'occupational_therapy\': \'Terapia Ocupacional\',\n        \'evaluation\': \'Avaliação\',\n        \'other\': \'Outro\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Formatar data\n    function formatDate(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleDateString(\'pt-BR\');\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Filtros\n      filterButton.addEventListener(\'click\', filterEvolutions);\n      \n      // Adicionar evolução\n      addEvolutionBtn.addEventListener(\'click\', openAddEvolutionModal);\n      \n      // Fechar modal\n      closeModal.addEventListener(\'click\', closeEvolutionModal);\n      closeViewModal.addEventListener(\'click\', closeViewEvolutionModal);\n      cancelButton.addEventListener(\'click\', closeEvolutionModal);\n      closeViewButton.addEventListener(\'click\', closeViewEvolutionModal);\n      closeAttachmentsButton.addEventListener(\'click\', closeViewEvolutionModal);\n      \n      // Modal de background\n      evolutionModal.addEventListener(\'click\', function(e) {\n        if (e.target === evolutionModal) {\n          closeEvolutionModal();\n        }\n      });\n      \n      viewEvolutionModal.addEventListener(\'click\', function(e) {\n        if (e.target === viewEvolutionModal) {\n          closeViewEvolutionModal();\n        }\n      });\n      \n      // Tabs\n      tabDetails.addEventListener(\'click\', function() {\n        tabDetails.classList.add(\'active\');\n        tabAttachments.classList.remove(\'active\');\n        detailsTab.style.display = \'block\';\n        attachmentsTab.style.display = \'none\';\n        detailsTabButtons.style.display = \'flex\';\n        attachmentsTabButtons.style.display = \'none\';\n      });\n      \n      tabAttachments.addEventListener(\'click\', function() {\n        tabDetails.classList.remove(\'active\');\n        tabAttachments.classList.add(\'active\');\n        detailsTab.style.display = \'none\';\n        attachmentsTab.style.display = \'block\';\n        detailsTabButtons.style.display = \'none\';\n        attachmentsTabButtons.style.display = \'flex\';\n      });\n      \n      // Salvar evolução\n      saveButton.addEventListener(\'click\', saveEvolution);\n      \n      // Editar a partir da visualização\n      editEvolutionButton.addEventListener(\'click\', function() {\n        closeViewEvolutionModal();\n        editEvolution(this.dataset.evolutionId);\n      });\n      \n      // Aprovar evolução\n      approveButton.addEventListener(\'click\', function() {\n        changeEvolutionStatus(this.dataset.evolutionId, \'approved\');\n      });\n      \n      // Rejeitar evolução\n      rejectButton.addEventListener(\'click\', function() {\n        changeEvolutionStatus(this.dataset.evolutionId, \'rejected\');\n      });\n      \n      // Paciente selecionado - carregar consultas relacionadas\n      patientIdSelect.addEventListener(\'change\', function() {\n        const patientId = this.value;\n        if (patientId) {\n          loadPatientAppointments(patientId);\n        } else {\n          // Limpar select de consultas\n          appointmentIdSelect.innerHTML = \'<option value="">Selecione o atendimento (opcional)</option>\';\n        }\n      });\n    }\n    \n    // Carregar pacientes\n    async function loadPatients() {\n      try {\n        const response = await fetch(\'/api/patients\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar pacientes\');\n        }\n        \n        const patients = await response.json();\n        \n        // Preencher select de filtro\n        patientFilter.innerHTML = \'<option value="">Todos os pacientes</option>\';\n        patients.forEach(patient => {\n          const option = document.createElement(\'option\');\n          option.value = patient.id;\n          option.textContent = patient.fullName;\n          patientFilter.appendChild(option);\n        });\n        \n        // Preencher select do formulário\n        patientIdSelect.innerHTML = \'<option value="">Selecione o paciente</option>\';\n        patients.forEach(patient => {\n          const option = document.createElement(\'option\');\n          option.value = patient.id;\n          option.textContent = patient.fullName;\n          patientIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar pacientes:\', error);\n      }\n    }\n    \n    // Carregar profissionais\n    async function loadProfessionals() {\n      try {\n        const response = await fetch(\'/api/professionals\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar profissionais\');\n        }\n        \n        const professionals = await response.json();\n        \n        // Preencher select de filtro\n        professionalFilter.innerHTML = \'<option value="">Todos os profissionais</option>\';\n        professionals.forEach(professional => {\n          const option = document.createElement(\'option\');\n          option.value = professional.id;\n          option.textContent = professional.user.fullName;\n          professionalFilter.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar profissionais:\', error);\n      }\n    }\n    \n    // Carregar consultas do paciente\n    async function loadPatientAppointments(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/appointments?status=attended`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar consultas do paciente\');\n        }\n        \n        const appointments = await response.json();\n        \n        // Preencher select de consultas\n        appointmentIdSelect.innerHTML = \'<option value="">Selecione o atendimento (opcional)</option>\';\n        \n        // Ordenar por data (mais recente primeiro)\n        appointments.sort((a, b) => new Date(b.startTime) - new Date(a.startTime));\n        \n        appointments.forEach(appointment => {\n          const date = new Date(appointment.startTime);\n          const formattedDate = date.toLocaleDateString(\'pt-BR\');\n          \n          const option = document.createElement(\'option\');\n          option.value = appointment.id;\n          option.textContent = `${formattedDate} - ${translateEvolutionType(appointment.procedureType)}`;\n          appointmentIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar consultas do paciente:\', error);\n      }\n    }\n    \n    // Carregar evoluções\n    async function loadEvolutions() {\n      try {\n        const url = new URL(\'/api/evolutions\', window.location.origin);\n        \n        // Adicionar parâmetros de filtro, se houver\n        if (patientFilter.value) {\n          url.searchParams.append(\'patientId\', patientFilter.value);\n        }\n        \n        if (professionalFilter.value) {\n          url.searchParams.append(\'professionalId\', professionalFilter.value);\n        }\n        \n        if (statusFilter.value) {\n          url.searchParams.append(\'status\', statusFilter.value);\n        }\n        \n        if (startDateFilter.value) {\n          url.searchParams.append(\'startDate\', startDateFilter.value);\n        }\n        \n        if (endDateFilter.value) {\n          url.searchParams.append(\'endDate\', endDateFilter.value);\n        }\n        \n        const response = await fetch(url, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar evoluções\');\n        }\n        \n        evolutions = await response.json();\n        filteredEvolutions = [...evolutions];\n        \n        // Calcular número total de páginas\n        totalPages = Math.ceil(filteredEvolutions.length / pageSize);\n        \n        // Renderizar tabela e paginação\n        renderEvolutionsTable();\n        renderPagination();\n      } catch (error) {\n        console.error(\'Erro ao carregar evoluções:\', error);\n        evolutionsTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">\n              <div class="empty-state">\n                <div class="empty-icon">❌</div>\n                <div class="empty-text">Erro ao carregar evoluções. Tente novamente.</div>\n                <button class="button button-primary" onclick="loadEvolutions()">Tentar novamente</button>\n              </div>\n            </td>\n          </tr>\n        `;\n      }\n    }\n    \n    // Filtrar evoluções\n    function filterEvolutions() {\n      loadEvolutions();\n    }\n    \n    // Renderizar tabela de evoluções\n    function renderEvolutionsTable() {\n      // Se não há evoluções\n      if (filteredEvolutions.length === 0) {\n        evolutionsTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">\n              <div class="empty-state">\n                <div class="empty-icon">📝</div>\n                <div class="empty-text">Nenhuma evolução encontrada.</div>\n                <button class="button button-primary" id="emptyAddEvolutionBtn">Nova Evolução</button>\n              </div>\n            </td>\n          </tr>\n        `;\n        \n        document.getElementById(\'emptyAddEvolutionBtn\')?.addEventListener(\'click\', openAddEvolutionModal);\n        return;\n      }\n      \n      // Calcular índices para paginação\n      const startIndex = (currentPage - 1) * pageSize;\n      const endIndex = Math.min(startIndex + pageSize, filteredEvolutions.length);\n      const evolutionsToShow = filteredEvolutions.slice(startIndex, endIndex);\n      \n      // Limpar tabela\n      evolutionsTableBody.innerHTML = \'\';\n      \n      // Adicionar linhas\n      evolutionsToShow.forEach(evolution => {\n        const row = document.createElement(\'tr\');\n        \n        // Dados da linha\n        row.innerHTML = `\n          <td>${formatDate(evolution.date)}</td>\n          <td>${evolution.patient?.fullName || \'N/A\'}</td>\n          <td>${evolution.professional?.user?.fullName || \'N/A\'}</td>\n          <td>${translateEvolutionType(evolution.type)}</td>\n          <td><span class="status status-${evolution.status}">${translateStatus(evolution.status)}</span></td>\n          <td>\n            <button class="action-button view-evolution" data-id="${evolution.id}">Visualizar</button>\n            <button class="action-button edit-evolution" data-id="${evolution.id}">Editar</button>\n          </td>\n        `;\n        \n        evolutionsTableBody.appendChild(row);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-evolution\').forEach(button => {\n        button.addEventListener(\'click\', () => viewEvolution(button.dataset.id));\n      });\n      \n      document.querySelectorAll(\'.edit-evolution\').forEach(button => {\n        button.addEventListener(\'click\', () => editEvolution(button.dataset.id));\n      });\n    }\n    \n    // Renderizar paginação\n    function renderPagination() {\n      if (totalPages <= 1) {\n        paginationElement.innerHTML = \'\';\n        return;\n      }\n      \n      let paginationHTML = \'\';\n      \n      // Botão anterior\n      paginationHTML += `\n        <li>\n          <a href="#" class="${currentPage === 1 ? \'disabled\' : \'\'}" \n             onclick="${currentPage > 1 ? \'changePage(\' + (currentPage - 1) + \')\' : \'return false\'}">\n            &laquo;\n          </a>\n        </li>\n      `;\n      \n      // Páginas numéricas\n      for (let i = 1; i <= totalPages; i++) {\n        paginationHTML += `\n          <li>\n            <a href="#" class="${i === currentPage ? \'active\' : \'\'}" \n               onclick="changePage(${i})">\n              ${i}\n            </a>\n          </li>\n        `;\n      }\n      \n      // Botão próximo\n      paginationHTML += `\n        <li>\n          <a href="#" class="${currentPage === totalPages ? \'disabled\' : \'\'}" \n             onclick="${currentPage < totalPages ? \'changePage(\' + (currentPage + 1) + \')\' : \'return false\'}">\n            &raquo;\n          </a>\n        </li>\n      `;\n      \n      paginationElement.innerHTML = paginationHTML;\n    }\n    \n    // Mudar página\n    function changePage(page) {\n      currentPage = page;\n      renderEvolutionsTable();\n      renderPagination();\n      return false; // Prevenir comportamento padrão do link\n    }\n    \n    // Abrir modal para adicionar evolução\n    function openAddEvolutionModal() {\n      modalTitle.textContent = \'Nova Evolução\';\n      evolutionForm.reset();\n      evolutionIdInput.value = \'\';\n      \n      // Definir data padrão como hoje\n      const today = new Date();\n      const dateString = today.toISOString().split(\'T\')[0];\n      document.getElementById(\'date\').value = dateString;\n      \n      // Definir status padrão como "Pendente"\n      document.getElementById(\'status\').value = \'pending\';\n      \n      evolutionModal.classList.add(\'active\');\n    }\n    \n    // Criar nova evolução a partir de um agendamento\n    async function createNewEvolutionFromAppointment(appointmentId) {\n      try {\n        // Buscar dados do agendamento\n        const response = await fetch(`/api/appointments/${appointmentId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar dados do agendamento\');\n        }\n        \n        const appointment = await response.json();\n        \n        // Abrir modal de nova evolução\n        openAddEvolutionModal();\n        \n        // Selecionar o paciente\n        patientIdSelect.value = appointment.patientId;\n        \n        // Carregar consultas do paciente e selecionar o agendamento\n        await loadPatientAppointments(appointment.patientId);\n        appointmentIdSelect.value = appointmentId;\n        \n        // Preencher tipo de evolução baseado no tipo de procedimento\n        document.getElementById(\'type\').value = appointment.procedureType;\n        \n        // Preencher título padrão\n        document.getElementById(\'title\').value = `Evolução - ${new Date(appointment.startTime).toLocaleDateString(\'pt-BR\')}`;\n        \n        // Definir o foco no campo de conteúdo\n        setTimeout(() => {\n          document.getElementById(\'content\').focus();\n        }, 300);\n      } catch (error) {\n        console.error(\'Erro ao criar evolução a partir do agendamento:\', error);\n        alert(\'Erro ao carregar dados do agendamento. Tente novamente.\');\n      }\n    }\n    \n    // Fechar modal\n    function closeEvolutionModal() {\n      evolutionModal.classList.remove(\'active\');\n    }\n    \n    // Fechar modal de visualização\n    function closeViewEvolutionModal() {\n      viewEvolutionModal.classList.remove(\'active\');\n    }\n    \n    // Editar evolução\n    async function editEvolution(evolutionId) {\n      try {\n        modalTitle.textContent = \'Editar Evolução\';\n        \n        const evolution = evolutions.find(e => e.id == evolutionId);\n        \n        if (!evolution) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/evolutions/${evolutionId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados da evolução\');\n          }\n          \n          const evolutionData = await response.json();\n          fillEvolutionForm(evolutionData);\n        } else {\n          fillEvolutionForm(evolution);\n        }\n        \n        evolutionModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar evolução:\', error);\n        alert(\'Erro ao carregar dados da evolução. Tente novamente.\');\n      }\n    }\n    \n    // Preencher formulário com dados da evolução\n    function fillEvolutionForm(evolution) {\n      evolutionIdInput.value = evolution.id;\n      document.getElementById(\'patientId\').value = evolution.patientId || \'\';\n      document.getElementById(\'date\').value = evolution.date ? new Date(evolution.date).toISOString().split(\'T\')[0] : \'\';\n      document.getElementById(\'type\').value = evolution.type || \'\';\n      document.getElementById(\'title\').value = evolution.title || \'\';\n      document.getElementById(\'content\').value = evolution.content || \'\';\n      document.getElementById(\'goals\').value = evolution.goals || \'\';\n      document.getElementById(\'nextSteps\').value = evolution.nextSteps || \'\';\n      document.getElementById(\'status\').value = evolution.status || \'pending\';\n      document.getElementById(\'visibility\').value = evolution.visibility || \'internal\';\n      \n      // Carregar consultas do paciente e selecionar a consulta relacionada\n      if (evolution.patientId) {\n        loadPatientAppointments(evolution.patientId).then(() => {\n          document.getElementById(\'appointmentId\').value = evolution.appointmentId || \'\';\n        });\n      }\n    }\n    \n    // Visualizar evolução\n    async function viewEvolution(evolutionId) {\n      try {\n        const evolution = evolutions.find(e => e.id == evolutionId);\n        \n        if (!evolution) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/evolutions/${evolutionId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados da evolução\');\n          }\n          \n          const evolutionData = await response.json();\n          displayEvolutionDetails(evolutionData);\n        } else {\n          displayEvolutionDetails(evolution);\n        }\n        \n        // Configurar botões\n        editEvolutionButton.dataset.evolutionId = evolutionId;\n        approveButton.dataset.evolutionId = evolutionId;\n        rejectButton.dataset.evolutionId = evolutionId;\n        \n        // Mostrar ou esconder botões baseado no status\n        if (evolution.status === \'approved\' || evolution.status === \'rejected\') {\n          approveButton.style.display = \'none\';\n          rejectButton.style.display = \'none\';\n        } else {\n          approveButton.style.display = \'block\';\n          rejectButton.style.display = \'block\';\n        }\n        \n        // Carregar anexos\n        loadEvolutionAttachments(evolutionId);\n        \n        // Exibir modal\n        viewEvolutionModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar evolução:\', error);\n        alert(\'Erro ao carregar dados da evolução. Tente novamente.\');\n      }\n    }\n    \n    // Exibir detalhes da evolução\n    function displayEvolutionDetails(evolution) {\n      // Informações do paciente\n      document.getElementById(\'viewPatientName\').textContent = evolution.patient?.fullName || \'N/A\';\n      \n      // Informações do atendimento\n      const appointmentInfo = evolution.appointment \n        ? `Atendimento: ${formatDate(evolution.appointment.startTime)}`\n        : \'\';\n      document.getElementById(\'viewAppointmentInfo\').textContent = appointmentInfo;\n      \n      // Status\n      const statusBadge = document.getElementById(\'viewStatusBadge\');\n      statusBadge.textContent = translateStatus(evolution.status);\n      statusBadge.className = `evolution-status-badge ${evolution.status}`;\n      \n      // Conteúdo da evolução\n      document.getElementById(\'viewTitle\').textContent = evolution.title || \'\';\n      document.getElementById(\'viewContent\').textContent = evolution.content || \'\';\n      \n      // Objetivos alcançados (esconder se vazio)\n      const goalsSection = document.getElementById(\'viewGoalsSection\');\n      if (evolution.goals) {\n        document.getElementById(\'viewGoals\').textContent = evolution.goals;\n        goalsSection.style.display = \'block\';\n      } else {\n        goalsSection.style.display = \'none\';\n      }\n      \n      // Próximos passos (esconder se vazio)\n      const nextStepsSection = document.getElementById(\'viewNextStepsSection\');\n      if (evolution.nextSteps) {\n        document.getElementById(\'viewNextSteps\').textContent = evolution.nextSteps;\n        nextStepsSection.style.display = \'block\';\n      } else {\n        nextStepsSection.style.display = \'none\';\n      }\n      \n      // Metadados\n      document.getElementById(\'viewProfessionalName\').textContent = `Profissional: ${evolution.professional?.user?.fullName || \'N/A\'}`;\n      document.getElementById(\'viewDate\').textContent = `Data: ${formatDate(evolution.date)}`;\n      document.getElementById(\'viewVisibility\').textContent = `Visibilidade: ${translateVisibility(evolution.visibility)}`;\n    }\n    \n    // Carregar anexos da evolução\n    async function loadEvolutionAttachments(evolutionId) {\n      try {\n        const response = await fetch(`/api/evolutions/${evolutionId}/attachments`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar anexos\');\n        }\n        \n        const attachments = await response.json();\n        const fileList = document.getElementById(\'fileList\');\n        \n        if (attachments.length === 0) {\n          fileList.innerHTML = \'<div class="empty-text">Nenhum anexo disponível</div>\';\n          return;\n        }\n        \n        fileList.innerHTML = \'\';\n        \n        attachments.forEach(attachment => {\n          const fileItem = document.createElement(\'div\');\n          fileItem.className = \'file-item\';\n          \n          const fileName = attachment.fileName || \'Arquivo\';\n          const fileUrl = attachment.fileUrl || \'#\';\n          \n          fileItem.innerHTML = `\n            <div class="file-name">\n              <span class="file-icon">📄</span>\n              ${fileName}\n            </div>\n            <div>\n              <a href="${fileUrl}" target="_blank" class="action-button">Visualizar</a>\n              <button class="action-button delete" data-id="${attachment.id}">Excluir</button>\n            </div>\n          `;\n          \n          fileList.appendChild(fileItem);\n        });\n        \n        // Adicionar event listeners para excluir\n        document.querySelectorAll(\'.file-item .delete\').forEach(button => {\n          button.addEventListener(\'click\', () => deleteAttachment(button.dataset.id));\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar anexos:\', error);\n        document.getElementById(\'fileList\').innerHTML = \'<div class="empty-text">Erro ao carregar anexos</div>\';\n      }\n    }\n    \n    // Excluir anexo\n    async function deleteAttachment(attachmentId) {\n      if (!confirm(\'Tem certeza que deseja excluir este anexo?\')) {\n        return;\n      }\n      \n      try {\n        const response = await fetch(`/api/attachments/${attachmentId}`, {\n          method: \'DELETE\',\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao excluir anexo\');\n        }\n        \n        // Recarregar anexos\n        loadEvolutionAttachments(editEvolutionButton.dataset.evolutionId);\n      } catch (error) {\n        console.error(\'Erro ao excluir anexo:\', error);\n        alert(\'Erro ao excluir anexo. Tente novamente.\');\n      }\n    }\n    \n    // Salvar evolução\n    async function saveEvolution() {\n      try {\n        // Validação básica\n        const patientId = document.getElementById(\'patientId\').value;\n        const date = document.getElementById(\'date\').value;\n        const type = document.getElementById(\'type\').value;\n        const title = document.getElementById(\'title\').value;\n        const content = document.getElementById(\'content\').value;\n        \n        if (!patientId || !date || !type || !title || !content) {\n          alert(\'Por favor, preencha todos os campos obrigatórios.\');\n          return;\n        }\n        \n        // Preparar dados da evolução\n        const evolutionData = {\n          patientId: parseInt(patientId),\n          appointmentId: document.getElementById(\'appointmentId\').value ? parseInt(document.getElementById(\'appointmentId\').value) : null,\n          date,\n          type,\n          title,\n          content,\n          goals: document.getElementById(\'goals\').value,\n          nextSteps: document.getElementById(\'nextSteps\').value,\n          status: document.getElementById(\'status\').value,\n          visibility: document.getElementById(\'visibility\').value\n        };\n        \n        const evolutionId = evolutionIdInput.value;\n        let response;\n        \n        if (evolutionId) {\n          // Editar evolução existente\n          response = await fetch(`/api/evolutions/${evolutionId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(evolutionData)\n          });\n        } else {\n          // Adicionar nova evolução\n          response = await fetch(\'/api/evolutions\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(evolutionData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || \'Erro ao salvar evolução\');\n        }\n        \n        // Fechar modal e recarregar lista\n        closeEvolutionModal();\n        loadEvolutions();\n        \n        alert(evolutionId ? \'Evolução atualizada com sucesso!\' : \'Evolução adicionada com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar evolução:\', error);\n        alert(`Erro ao salvar evolução: ${error.message}`);\n      }\n    }\n    \n    // Alterar status da evolução\n    async function changeEvolutionStatus(evolutionId, newStatus) {\n      try {\n        const response = await fetch(`/api/evolutions/${evolutionId}/status`, {\n          method: \'PUT\',\n          headers: {\n            \'Content-Type\': \'application/json\'\n          },\n          credentials: \'include\',\n          body: JSON.stringify({ status: newStatus })\n        });\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || `Erro ao alterar status para ${translateStatus(newStatus)}`);\n        }\n        \n        // Fechar modal e recarregar lista\n        closeViewEvolutionModal();\n        loadEvolutions();\n        \n        alert(`Status alterado para ${translateStatus(newStatus)} com sucesso!`);\n      } catch (error) {\n        console.error(\'Erro ao alterar status:\', error);\n        alert(`Erro ao alterar status: ${error.message}`);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n  </script>\n', PosixPath('client/public/evolutions.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = d656932dbdfe98594838a6b6968656a35ba1fe661bf89fd42b5d644c4b3f425c1f8d309584f072d44f3c01f4fddf4652e2120b762b8622d09561f77936f22b0d_0
2025-05-07 18:31:35,185 - semgrep.rule_match - DEBUG - match_key = ('\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', () => {\n      checkAuth();\n      setupEventListeners();\n      \n      // Verificar se existe appointmentId na URL (redirecionamento do calendário)\n      const urlParams = new URLSearchParams(window.location.search);\n      const appointmentId = urlParams.get(\'appointmentId\');\n      \n      // Inicializar\n      loadPatients();\n      loadProfessionals();\n      loadEvolutions();\n      \n      // Se tiver appointmentId, abrir formulário para nova evolução\n      if (appointmentId) {\n        setTimeout(() => {\n          createNewEvolutionFromAppointment(appointmentId);\n        }, 1000); // Pequeno atraso para garantir que os dados foram carregados\n      }\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const patientFilter = document.getElementById(\'patientFilter\');\n    const professionalFilter = document.getElementById(\'professionalFilter\');\n    const statusFilter = document.getElementById(\'statusFilter\');\n    const startDateFilter = document.getElementById(\'startDateFilter\');\n    const endDateFilter = document.getElementById(\'endDateFilter\');\n    const filterButton = document.getElementById(\'filterButton\');\n    const evolutionsTableBody = document.getElementById(\'evolutionsTableBody\');\n    const paginationElement = document.getElementById(\'pagination\');\n    const addEvolutionBtn = document.getElementById(\'addEvolutionBtn\');\n    \n    const evolutionModal = document.getElementById(\'evolutionModal\');\n    const viewEvolutionModal = document.getElementById(\'viewEvolutionModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const evolutionForm = document.getElementById(\'evolutionForm\');\n    const evolutionIdInput = document.getElementById(\'evolutionId\');\n    const patientIdSelect = document.getElementById(\'patientId\');\n    const appointmentIdSelect = document.getElementById(\'appointmentId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    \n    const tabDetails = document.getElementById(\'tabDetails\');\n    const tabAttachments = document.getElementById(\'tabAttachments\');\n    const detailsTab = document.getElementById(\'detailsTab\');\n    const attachmentsTab = document.getElementById(\'attachmentsTab\');\n    const detailsTabButtons = document.getElementById(\'detailsTabButtons\');\n    const attachmentsTabButtons = document.getElementById(\'attachmentsTabButtons\');\n    \n    const closeViewButton = document.getElementById(\'closeViewButton\');\n    const closeAttachmentsButton = document.getElementById(\'closeAttachmentsButton\');\n    const editEvolutionButton = document.getElementById(\'editEvolutionButton\');\n    const approveButton = document.getElementById(\'approveButton\');\n    const rejectButton = document.getElementById(\'rejectButton\');\n    \n    // Variáveis para paginação\n    let currentPage = 1;\n    const pageSize = 10;\n    let totalPages = 1;\n    let evolutions = [];\n    let filteredEvolutions = [];\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        const userData = await response.json();\n        displayUserData(userData);\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n      \n      // Configurar permissões baseadas no papel do usuário\n      setupRoleBasedPermissions(user.role);\n    }\n    \n    // Configurar permissões baseadas no papel do usuário\n    function setupRoleBasedPermissions(role) {\n      // Mostrar ou esconder botões baseado no papel\n      if ([\'admin\', \'coordinator\'].includes(role)) {\n        approveButton.style.display = \'block\';\n        rejectButton.style.display = \'block\';\n      } else {\n        approveButton.style.display = \'none\';\n        rejectButton.style.display = \'none\';\n      }\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir status\n    function translateStatus(status) {\n      const translations = {\n        \'pending\': \'Pendente\',\n        \'completed\': \'Concluído\',\n        \'approved\': \'Aprovado\',\n        \'rejected\': \'Rejeitado\'\n      };\n      \n      return translations[status] || status;\n    }\n    \n    // Traduzir visibilidade\n    function translateVisibility(visibility) {\n      const translations = {\n        \'internal\': \'Interno (apenas equipe)\',\n        \'guardian\': \'Responsável (paciente/família)\',\n        \'public\': \'Público (compartilhável)\'\n      };\n      \n      return translations[visibility] || visibility;\n    }\n    \n    // Traduzir tipo de evolução\n    function translateEvolutionType(type) {\n      const translations = {\n        \'psychology_aba\': \'Psicologia - ABA\',\n        \'psychology_cbt\': \'Psicologia - TCC\',\n        \'speech_therapy\': \'Fonoaudiologia\',\n        \'physical_therapy\': \'Fisioterapia\',\n        \'occupational_therapy\': \'Terapia Ocupacional\',\n        \'evaluation\': \'Avaliação\',\n        \'other\': \'Outro\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Formatar data\n    function formatDate(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleDateString(\'pt-BR\');\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Filtros\n      filterButton.addEventListener(\'click\', filterEvolutions);\n      \n      // Adicionar evolução\n      addEvolutionBtn.addEventListener(\'click\', openAddEvolutionModal);\n      \n      // Fechar modal\n      closeModal.addEventListener(\'click\', closeEvolutionModal);\n      closeViewModal.addEventListener(\'click\', closeViewEvolutionModal);\n      cancelButton.addEventListener(\'click\', closeEvolutionModal);\n      closeViewButton.addEventListener(\'click\', closeViewEvolutionModal);\n      closeAttachmentsButton.addEventListener(\'click\', closeViewEvolutionModal);\n      \n      // Modal de background\n      evolutionModal.addEventListener(\'click\', function(e) {\n        if (e.target === evolutionModal) {\n          closeEvolutionModal();\n        }\n      });\n      \n      viewEvolutionModal.addEventListener(\'click\', function(e) {\n        if (e.target === viewEvolutionModal) {\n          closeViewEvolutionModal();\n        }\n      });\n      \n      // Tabs\n      tabDetails.addEventListener(\'click\', function() {\n        tabDetails.classList.add(\'active\');\n        tabAttachments.classList.remove(\'active\');\n        detailsTab.style.display = \'block\';\n        attachmentsTab.style.display = \'none\';\n        detailsTabButtons.style.display = \'flex\';\n        attachmentsTabButtons.style.display = \'none\';\n      });\n      \n      tabAttachments.addEventListener(\'click\', function() {\n        tabDetails.classList.remove(\'active\');\n        tabAttachments.classList.add(\'active\');\n        detailsTab.style.display = \'none\';\n        attachmentsTab.style.display = \'block\';\n        detailsTabButtons.style.display = \'none\';\n        attachmentsTabButtons.style.display = \'flex\';\n      });\n      \n      // Salvar evolução\n      saveButton.addEventListener(\'click\', saveEvolution);\n      \n      // Editar a partir da visualização\n      editEvolutionButton.addEventListener(\'click\', function() {\n        closeViewEvolutionModal();\n        editEvolution(this.dataset.evolutionId);\n      });\n      \n      // Aprovar evolução\n      approveButton.addEventListener(\'click\', function() {\n        changeEvolutionStatus(this.dataset.evolutionId, \'approved\');\n      });\n      \n      // Rejeitar evolução\n      rejectButton.addEventListener(\'click\', function() {\n        changeEvolutionStatus(this.dataset.evolutionId, \'rejected\');\n      });\n      \n      // Paciente selecionado - carregar consultas relacionadas\n      patientIdSelect.addEventListener(\'change\', function() {\n        const patientId = this.value;\n        if (patientId) {\n          loadPatientAppointments(patientId);\n        } else {\n          // Limpar select de consultas\n          appointmentIdSelect.innerHTML = \'<option value="">Selecione o atendimento (opcional)</option>\';\n        }\n      });\n    }\n    \n    // Carregar pacientes\n    async function loadPatients() {\n      try {\n        const response = await fetch(\'/api/patients\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar pacientes\');\n        }\n        \n        const patients = await response.json();\n        \n        // Preencher select de filtro\n        patientFilter.innerHTML = \'<option value="">Todos os pacientes</option>\';\n        patients.forEach(patient => {\n          const option = document.createElement(\'option\');\n          option.value = patient.id;\n          option.textContent = patient.fullName;\n          patientFilter.appendChild(option);\n        });\n        \n        // Preencher select do formulário\n        patientIdSelect.innerHTML = \'<option value="">Selecione o paciente</option>\';\n        patients.forEach(patient => {\n          const option = document.createElement(\'option\');\n          option.value = patient.id;\n          option.textContent = patient.fullName;\n          patientIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar pacientes:\', error);\n      }\n    }\n    \n    // Carregar profissionais\n    async function loadProfessionals() {\n      try {\n        const response = await fetch(\'/api/professionals\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar profissionais\');\n        }\n        \n        const professionals = await response.json();\n        \n        // Preencher select de filtro\n        professionalFilter.innerHTML = \'<option value="">Todos os profissionais</option>\';\n        professionals.forEach(professional => {\n          const option = document.createElement(\'option\');\n          option.value = professional.id;\n          option.textContent = professional.user.fullName;\n          professionalFilter.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar profissionais:\', error);\n      }\n    }\n    \n    // Carregar consultas do paciente\n    async function loadPatientAppointments(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/appointments?status=attended`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar consultas do paciente\');\n        }\n        \n        const appointments = await response.json();\n        \n        // Preencher select de consultas\n        appointmentIdSelect.innerHTML = \'<option value="">Selecione o atendimento (opcional)</option>\';\n        \n        // Ordenar por data (mais recente primeiro)\n        appointments.sort((a, b) => new Date(b.startTime) - new Date(a.startTime));\n        \n        appointments.forEach(appointment => {\n          const date = new Date(appointment.startTime);\n          const formattedDate = date.toLocaleDateString(\'pt-BR\');\n          \n          const option = document.createElement(\'option\');\n          option.value = appointment.id;\n          option.textContent = `${formattedDate} - ${translateEvolutionType(appointment.procedureType)}`;\n          appointmentIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar consultas do paciente:\', error);\n      }\n    }\n    \n    // Carregar evoluções\n    async function loadEvolutions() {\n      try {\n        const url = new URL(\'/api/evolutions\', window.location.origin);\n        \n        // Adicionar parâmetros de filtro, se houver\n        if (patientFilter.value) {\n          url.searchParams.append(\'patientId\', patientFilter.value);\n        }\n        \n        if (professionalFilter.value) {\n          url.searchParams.append(\'professionalId\', professionalFilter.value);\n        }\n        \n        if (statusFilter.value) {\n          url.searchParams.append(\'status\', statusFilter.value);\n        }\n        \n        if (startDateFilter.value) {\n          url.searchParams.append(\'startDate\', startDateFilter.value);\n        }\n        \n        if (endDateFilter.value) {\n          url.searchParams.append(\'endDate\', endDateFilter.value);\n        }\n        \n        const response = await fetch(url, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar evoluções\');\n        }\n        \n        evolutions = await response.json();\n        filteredEvolutions = [...evolutions];\n        \n        // Calcular número total de páginas\n        totalPages = Math.ceil(filteredEvolutions.length / pageSize);\n        \n        // Renderizar tabela e paginação\n        renderEvolutionsTable();\n        renderPagination();\n      } catch (error) {\n        console.error(\'Erro ao carregar evoluções:\', error);\n        evolutionsTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">\n              <div class="empty-state">\n                <div class="empty-icon">❌</div>\n                <div class="empty-text">Erro ao carregar evoluções. Tente novamente.</div>\n                <button class="button button-primary" onclick="loadEvolutions()">Tentar novamente</button>\n              </div>\n            </td>\n          </tr>\n        `;\n      }\n    }\n    \n    // Filtrar evoluções\n    function filterEvolutions() {\n      loadEvolutions();\n    }\n    \n    // Renderizar tabela de evoluções\n    function renderEvolutionsTable() {\n      // Se não há evoluções\n      if (filteredEvolutions.length === 0) {\n        evolutionsTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">\n              <div class="empty-state">\n                <div class="empty-icon">📝</div>\n                <div class="empty-text">Nenhuma evolução encontrada.</div>\n                <button class="button button-primary" id="emptyAddEvolutionBtn">Nova Evolução</button>\n              </div>\n            </td>\n          </tr>\n        `;\n        \n        document.getElementById(\'emptyAddEvolutionBtn\')?.addEventListener(\'click\', openAddEvolutionModal);\n        return;\n      }\n      \n      // Calcular índices para paginação\n      const startIndex = (currentPage - 1) * pageSize;\n      const endIndex = Math.min(startIndex + pageSize, filteredEvolutions.length);\n      const evolutionsToShow = filteredEvolutions.slice(startIndex, endIndex);\n      \n      // Limpar tabela\n      evolutionsTableBody.innerHTML = \'\';\n      \n      // Adicionar linhas\n      evolutionsToShow.forEach(evolution => {\n        const row = document.createElement(\'tr\');\n        \n        // Dados da linha\n        row.innerHTML = `\n          <td>${formatDate(evolution.date)}</td>\n          <td>${evolution.patient?.fullName || \'N/A\'}</td>\n          <td>${evolution.professional?.user?.fullName || \'N/A\'}</td>\n          <td>${translateEvolutionType(evolution.type)}</td>\n          <td><span class="status status-${evolution.status}">${translateStatus(evolution.status)}</span></td>\n          <td>\n            <button class="action-button view-evolution" data-id="${evolution.id}">Visualizar</button>\n            <button class="action-button edit-evolution" data-id="${evolution.id}">Editar</button>\n          </td>\n        `;\n        \n        evolutionsTableBody.appendChild(row);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-evolution\').forEach(button => {\n        button.addEventListener(\'click\', () => viewEvolution(button.dataset.id));\n      });\n      \n      document.querySelectorAll(\'.edit-evolution\').forEach(button => {\n        button.addEventListener(\'click\', () => editEvolution(button.dataset.id));\n      });\n    }\n    \n    // Renderizar paginação\n    function renderPagination() {\n      if (totalPages <= 1) {\n        paginationElement.innerHTML = \'\';\n        return;\n      }\n      \n      let paginationHTML = \'\';\n      \n      // Botão anterior\n      paginationHTML += `\n        <li>\n          <a href="#" class="${currentPage === 1 ? \'disabled\' : \'\'}" \n             onclick="${currentPage > 1 ? \'changePage(\' + (currentPage - 1) + \')\' : \'return false\'}">\n            &laquo;\n          </a>\n        </li>\n      `;\n      \n      // Páginas numéricas\n      for (let i = 1; i <= totalPages; i++) {\n        paginationHTML += `\n          <li>\n            <a href="#" class="${i === currentPage ? \'active\' : \'\'}" \n               onclick="changePage(${i})">\n              ${i}\n            </a>\n          </li>\n        `;\n      }\n      \n      // Botão próximo\n      paginationHTML += `\n        <li>\n          <a href="#" class="${currentPage === totalPages ? \'disabled\' : \'\'}" \n             onclick="${currentPage < totalPages ? \'changePage(\' + (currentPage + 1) + \')\' : \'return false\'}">\n            &raquo;\n          </a>\n        </li>\n      `;\n      \n      paginationElement.innerHTML = paginationHTML;\n    }\n    \n    // Mudar página\n    function changePage(page) {\n      currentPage = page;\n      renderEvolutionsTable();\n      renderPagination();\n      return false; // Prevenir comportamento padrão do link\n    }\n    \n    // Abrir modal para adicionar evolução\n    function openAddEvolutionModal() {\n      modalTitle.textContent = \'Nova Evolução\';\n      evolutionForm.reset();\n      evolutionIdInput.value = \'\';\n      \n      // Definir data padrão como hoje\n      const today = new Date();\n      const dateString = today.toISOString().split(\'T\')[0];\n      document.getElementById(\'date\').value = dateString;\n      \n      // Definir status padrão como "Pendente"\n      document.getElementById(\'status\').value = \'pending\';\n      \n      evolutionModal.classList.add(\'active\');\n    }\n    \n    // Criar nova evolução a partir de um agendamento\n    async function createNewEvolutionFromAppointment(appointmentId) {\n      try {\n        // Buscar dados do agendamento\n        const response = await fetch(`/api/appointments/${appointmentId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar dados do agendamento\');\n        }\n        \n        const appointment = await response.json();\n        \n        // Abrir modal de nova evolução\n        openAddEvolutionModal();\n        \n        // Selecionar o paciente\n        patientIdSelect.value = appointment.patientId;\n        \n        // Carregar consultas do paciente e selecionar o agendamento\n        await loadPatientAppointments(appointment.patientId);\n        appointmentIdSelect.value = appointmentId;\n        \n        // Preencher tipo de evolução baseado no tipo de procedimento\n        document.getElementById(\'type\').value = appointment.procedureType;\n        \n        // Preencher título padrão\n        document.getElementById(\'title\').value = `Evolução - ${new Date(appointment.startTime).toLocaleDateString(\'pt-BR\')}`;\n        \n        // Definir o foco no campo de conteúdo\n        setTimeout(() => {\n          document.getElementById(\'content\').focus();\n        }, 300);\n      } catch (error) {\n        console.error(\'Erro ao criar evolução a partir do agendamento:\', error);\n        alert(\'Erro ao carregar dados do agendamento. Tente novamente.\');\n      }\n    }\n    \n    // Fechar modal\n    function closeEvolutionModal() {\n      evolutionModal.classList.remove(\'active\');\n    }\n    \n    // Fechar modal de visualização\n    function closeViewEvolutionModal() {\n      viewEvolutionModal.classList.remove(\'active\');\n    }\n    \n    // Editar evolução\n    async function editEvolution(evolutionId) {\n      try {\n        modalTitle.textContent = \'Editar Evolução\';\n        \n        const evolution = evolutions.find(e => e.id == evolutionId);\n        \n        if (!evolution) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/evolutions/${evolutionId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados da evolução\');\n          }\n          \n          const evolutionData = await response.json();\n          fillEvolutionForm(evolutionData);\n        } else {\n          fillEvolutionForm(evolution);\n        }\n        \n        evolutionModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar evolução:\', error);\n        alert(\'Erro ao carregar dados da evolução. Tente novamente.\');\n      }\n    }\n    \n    // Preencher formulário com dados da evolução\n    function fillEvolutionForm(evolution) {\n      evolutionIdInput.value = evolution.id;\n      document.getElementById(\'patientId\').value = evolution.patientId || \'\';\n      document.getElementById(\'date\').value = evolution.date ? new Date(evolution.date).toISOString().split(\'T\')[0] : \'\';\n      document.getElementById(\'type\').value = evolution.type || \'\';\n      document.getElementById(\'title\').value = evolution.title || \'\';\n      document.getElementById(\'content\').value = evolution.content || \'\';\n      document.getElementById(\'goals\').value = evolution.goals || \'\';\n      document.getElementById(\'nextSteps\').value = evolution.nextSteps || \'\';\n      document.getElementById(\'status\').value = evolution.status || \'pending\';\n      document.getElementById(\'visibility\').value = evolution.visibility || \'internal\';\n      \n      // Carregar consultas do paciente e selecionar a consulta relacionada\n      if (evolution.patientId) {\n        loadPatientAppointments(evolution.patientId).then(() => {\n          document.getElementById(\'appointmentId\').value = evolution.appointmentId || \'\';\n        });\n      }\n    }\n    \n    // Visualizar evolução\n    async function viewEvolution(evolutionId) {\n      try {\n        const evolution = evolutions.find(e => e.id == evolutionId);\n        \n        if (!evolution) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/evolutions/${evolutionId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados da evolução\');\n          }\n          \n          const evolutionData = await response.json();\n          displayEvolutionDetails(evolutionData);\n        } else {\n          displayEvolutionDetails(evolution);\n        }\n        \n        // Configurar botões\n        editEvolutionButton.dataset.evolutionId = evolutionId;\n        approveButton.dataset.evolutionId = evolutionId;\n        rejectButton.dataset.evolutionId = evolutionId;\n        \n        // Mostrar ou esconder botões baseado no status\n        if (evolution.status === \'approved\' || evolution.status === \'rejected\') {\n          approveButton.style.display = \'none\';\n          rejectButton.style.display = \'none\';\n        } else {\n          approveButton.style.display = \'block\';\n          rejectButton.style.display = \'block\';\n        }\n        \n        // Carregar anexos\n        loadEvolutionAttachments(evolutionId);\n        \n        // Exibir modal\n        viewEvolutionModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar evolução:\', error);\n        alert(\'Erro ao carregar dados da evolução. Tente novamente.\');\n      }\n    }\n    \n    // Exibir detalhes da evolução\n    function displayEvolutionDetails(evolution) {\n      // Informações do paciente\n      document.getElementById(\'viewPatientName\').textContent = evolution.patient?.fullName || \'N/A\';\n      \n      // Informações do atendimento\n      const appointmentInfo = evolution.appointment \n        ? `Atendimento: ${formatDate(evolution.appointment.startTime)}`\n        : \'\';\n      document.getElementById(\'viewAppointmentInfo\').textContent = appointmentInfo;\n      \n      // Status\n      const statusBadge = document.getElementById(\'viewStatusBadge\');\n      statusBadge.textContent = translateStatus(evolution.status);\n      statusBadge.className = `evolution-status-badge ${evolution.status}`;\n      \n      // Conteúdo da evolução\n      document.getElementById(\'viewTitle\').textContent = evolution.title || \'\';\n      document.getElementById(\'viewContent\').textContent = evolution.content || \'\';\n      \n      // Objetivos alcançados (esconder se vazio)\n      const goalsSection = document.getElementById(\'viewGoalsSection\');\n      if (evolution.goals) {\n        document.getElementById(\'viewGoals\').textContent = evolution.goals;\n        goalsSection.style.display = \'block\';\n      } else {\n        goalsSection.style.display = \'none\';\n      }\n      \n      // Próximos passos (esconder se vazio)\n      const nextStepsSection = document.getElementById(\'viewNextStepsSection\');\n      if (evolution.nextSteps) {\n        document.getElementById(\'viewNextSteps\').textContent = evolution.nextSteps;\n        nextStepsSection.style.display = \'block\';\n      } else {\n        nextStepsSection.style.display = \'none\';\n      }\n      \n      // Metadados\n      document.getElementById(\'viewProfessionalName\').textContent = `Profissional: ${evolution.professional?.user?.fullName || \'N/A\'}`;\n      document.getElementById(\'viewDate\').textContent = `Data: ${formatDate(evolution.date)}`;\n      document.getElementById(\'viewVisibility\').textContent = `Visibilidade: ${translateVisibility(evolution.visibility)}`;\n    }\n    \n    // Carregar anexos da evolução\n    async function loadEvolutionAttachments(evolutionId) {\n      try {\n        const response = await fetch(`/api/evolutions/${evolutionId}/attachments`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar anexos\');\n        }\n        \n        const attachments = await response.json();\n        const fileList = document.getElementById(\'fileList\');\n        \n        if (attachments.length === 0) {\n          fileList.innerHTML = \'<div class="empty-text">Nenhum anexo disponível</div>\';\n          return;\n        }\n        \n        fileList.innerHTML = \'\';\n        \n        attachments.forEach(attachment => {\n          const fileItem = document.createElement(\'div\');\n          fileItem.className = \'file-item\';\n          \n          const fileName = attachment.fileName || \'Arquivo\';\n          const fileUrl = attachment.fileUrl || \'#\';\n          \n          fileItem.innerHTML = `\n            <div class="file-name">\n              <span class="file-icon">📄</span>\n              ${fileName}\n            </div>\n            <div>\n              <a href="${fileUrl}" target="_blank" class="action-button">Visualizar</a>\n              <button class="action-button delete" data-id="${attachment.id}">Excluir</button>\n            </div>\n          `;\n          \n          fileList.appendChild(fileItem);\n        });\n        \n        // Adicionar event listeners para excluir\n        document.querySelectorAll(\'.file-item .delete\').forEach(button => {\n          button.addEventListener(\'click\', () => deleteAttachment(button.dataset.id));\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar anexos:\', error);\n        document.getElementById(\'fileList\').innerHTML = \'<div class="empty-text">Erro ao carregar anexos</div>\';\n      }\n    }\n    \n    // Excluir anexo\n    async function deleteAttachment(attachmentId) {\n      if (!confirm(\'Tem certeza que deseja excluir este anexo?\')) {\n        return;\n      }\n      \n      try {\n        const response = await fetch(`/api/attachments/${attachmentId}`, {\n          method: \'DELETE\',\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao excluir anexo\');\n        }\n        \n        // Recarregar anexos\n        loadEvolutionAttachments(editEvolutionButton.dataset.evolutionId);\n      } catch (error) {\n        console.error(\'Erro ao excluir anexo:\', error);\n        alert(\'Erro ao excluir anexo. Tente novamente.\');\n      }\n    }\n    \n    // Salvar evolução\n    async function saveEvolution() {\n      try {\n        // Validação básica\n        const patientId = document.getElementById(\'patientId\').value;\n        const date = document.getElementById(\'date\').value;\n        const type = document.getElementById(\'type\').value;\n        const title = document.getElementById(\'title\').value;\n        const content = document.getElementById(\'content\').value;\n        \n        if (!patientId || !date || !type || !title || !content) {\n          alert(\'Por favor, preencha todos os campos obrigatórios.\');\n          return;\n        }\n        \n        // Preparar dados da evolução\n        const evolutionData = {\n          patientId: parseInt(patientId),\n          appointmentId: document.getElementById(\'appointmentId\').value ? parseInt(document.getElementById(\'appointmentId\').value) : null,\n          date,\n          type,\n          title,\n          content,\n          goals: document.getElementById(\'goals\').value,\n          nextSteps: document.getElementById(\'nextSteps\').value,\n          status: document.getElementById(\'status\').value,\n          visibility: document.getElementById(\'visibility\').value\n        };\n        \n        const evolutionId = evolutionIdInput.value;\n        let response;\n        \n        if (evolutionId) {\n          // Editar evolução existente\n          response = await fetch(`/api/evolutions/${evolutionId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(evolutionData)\n          });\n        } else {\n          // Adicionar nova evolução\n          response = await fetch(\'/api/evolutions\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(evolutionData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || \'Erro ao salvar evolução\');\n        }\n        \n        // Fechar modal e recarregar lista\n        closeEvolutionModal();\n        loadEvolutions();\n        \n        alert(evolutionId ? \'Evolução atualizada com sucesso!\' : \'Evolução adicionada com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar evolução:\', error);\n        alert(`Erro ao salvar evolução: ${error.message}`);\n      }\n    }\n    \n    // Alterar status da evolução\n    async function changeEvolutionStatus(evolutionId, newStatus) {\n      try {\n        const response = await fetch(`/api/evolutions/${evolutionId}/status`, {\n          method: \'PUT\',\n          headers: {\n            \'Content-Type\': \'application/json\'\n          },\n          credentials: \'include\',\n          body: JSON.stringify({ status: newStatus })\n        });\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || `Erro ao alterar status para ${translateStatus(newStatus)}`);\n        }\n        \n        // Fechar modal e recarregar lista\n        closeViewEvolutionModal();\n        loadEvolutions();\n        \n        alert(`Status alterado para ${translateStatus(newStatus)} com sucesso!`);\n      } catch (error) {\n        console.error(\'Erro ao alterar status:\', error);\n        alert(`Erro ao alterar status: ${error.message}`);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n   $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', () => {\n      checkAuth();\n      setupEventListeners();\n      \n      // Verificar se existe appointmentId na URL (redirecionamento do calendário)\n      const urlParams = new URLSearchParams(window.location.search);\n      const appointmentId = urlParams.get(\'appointmentId\');\n      \n      // Inicializar\n      loadPatients();\n      loadProfessionals();\n      loadEvolutions();\n      \n      // Se tiver appointmentId, abrir formulário para nova evolução\n      if (appointmentId) {\n        setTimeout(() => {\n          createNewEvolutionFromAppointment(appointmentId);\n        }, 1000); // Pequeno atraso para garantir que os dados foram carregados\n      }\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const patientFilter = document.getElementById(\'patientFilter\');\n    const professionalFilter = document.getElementById(\'professionalFilter\');\n    const statusFilter = document.getElementById(\'statusFilter\');\n    const startDateFilter = document.getElementById(\'startDateFilter\');\n    const endDateFilter = document.getElementById(\'endDateFilter\');\n    const filterButton = document.getElementById(\'filterButton\');\n    const evolutionsTableBody = document.getElementById(\'evolutionsTableBody\');\n    const paginationElement = document.getElementById(\'pagination\');\n    const addEvolutionBtn = document.getElementById(\'addEvolutionBtn\');\n    \n    const evolutionModal = document.getElementById(\'evolutionModal\');\n    const viewEvolutionModal = document.getElementById(\'viewEvolutionModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const evolutionForm = document.getElementById(\'evolutionForm\');\n    const evolutionIdInput = document.getElementById(\'evolutionId\');\n    const patientIdSelect = document.getElementById(\'patientId\');\n    const appointmentIdSelect = document.getElementById(\'appointmentId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    \n    const tabDetails = document.getElementById(\'tabDetails\');\n    const tabAttachments = document.getElementById(\'tabAttachments\');\n    const detailsTab = document.getElementById(\'detailsTab\');\n    const attachmentsTab = document.getElementById(\'attachmentsTab\');\n    const detailsTabButtons = document.getElementById(\'detailsTabButtons\');\n    const attachmentsTabButtons = document.getElementById(\'attachmentsTabButtons\');\n    \n    const closeViewButton = document.getElementById(\'closeViewButton\');\n    const closeAttachmentsButton = document.getElementById(\'closeAttachmentsButton\');\n    const editEvolutionButton = document.getElementById(\'editEvolutionButton\');\n    const approveButton = document.getElementById(\'approveButton\');\n    const rejectButton = document.getElementById(\'rejectButton\');\n    \n    // Variáveis para paginação\n    let currentPage = 1;\n    const pageSize = 10;\n    let totalPages = 1;\n    let evolutions = [];\n    let filteredEvolutions = [];\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        const userData = await response.json();\n        displayUserData(userData);\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n      \n      // Configurar permissões baseadas no papel do usuário\n      setupRoleBasedPermissions(user.role);\n    }\n    \n    // Configurar permissões baseadas no papel do usuário\n    function setupRoleBasedPermissions(role) {\n      // Mostrar ou esconder botões baseado no papel\n      if ([\'admin\', \'coordinator\'].includes(role)) {\n        approveButton.style.display = \'block\';\n        rejectButton.style.display = \'block\';\n      } else {\n        approveButton.style.display = \'none\';\n        rejectButton.style.display = \'none\';\n      }\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir status\n    function translateStatus(status) {\n      const translations = {\n        \'pending\': \'Pendente\',\n        \'completed\': \'Concluído\',\n        \'approved\': \'Aprovado\',\n        \'rejected\': \'Rejeitado\'\n      };\n      \n      return translations[status] || status;\n    }\n    \n    // Traduzir visibilidade\n    function translateVisibility(visibility) {\n      const translations = {\n        \'internal\': \'Interno (apenas equipe)\',\n        \'guardian\': \'Responsável (paciente/família)\',\n        \'public\': \'Público (compartilhável)\'\n      };\n      \n      return translations[visibility] || visibility;\n    }\n    \n    // Traduzir tipo de evolução\n    function translateEvolutionType(type) {\n      const translations = {\n        \'psychology_aba\': \'Psicologia - ABA\',\n        \'psychology_cbt\': \'Psicologia - TCC\',\n        \'speech_therapy\': \'Fonoaudiologia\',\n        \'physical_therapy\': \'Fisioterapia\',\n        \'occupational_therapy\': \'Terapia Ocupacional\',\n        \'evaluation\': \'Avaliação\',\n        \'other\': \'Outro\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Formatar data\n    function formatDate(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleDateString(\'pt-BR\');\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Filtros\n      filterButton.addEventListener(\'click\', filterEvolutions);\n      \n      // Adicionar evolução\n      addEvolutionBtn.addEventListener(\'click\', openAddEvolutionModal);\n      \n      // Fechar modal\n      closeModal.addEventListener(\'click\', closeEvolutionModal);\n      closeViewModal.addEventListener(\'click\', closeViewEvolutionModal);\n      cancelButton.addEventListener(\'click\', closeEvolutionModal);\n      closeViewButton.addEventListener(\'click\', closeViewEvolutionModal);\n      closeAttachmentsButton.addEventListener(\'click\', closeViewEvolutionModal);\n      \n      // Modal de background\n      evolutionModal.addEventListener(\'click\', function(e) {\n        if (e.target === evolutionModal) {\n          closeEvolutionModal();\n        }\n      });\n      \n      viewEvolutionModal.addEventListener(\'click\', function(e) {\n        if (e.target === viewEvolutionModal) {\n          closeViewEvolutionModal();\n        }\n      });\n      \n      // Tabs\n      tabDetails.addEventListener(\'click\', function() {\n        tabDetails.classList.add(\'active\');\n        tabAttachments.classList.remove(\'active\');\n        detailsTab.style.display = \'block\';\n        attachmentsTab.style.display = \'none\';\n        detailsTabButtons.style.display = \'flex\';\n        attachmentsTabButtons.style.display = \'none\';\n      });\n      \n      tabAttachments.addEventListener(\'click\', function() {\n        tabDetails.classList.remove(\'active\');\n        tabAttachments.classList.add(\'active\');\n        detailsTab.style.display = \'none\';\n        attachmentsTab.style.display = \'block\';\n        detailsTabButtons.style.display = \'none\';\n        attachmentsTabButtons.style.display = \'flex\';\n      });\n      \n      // Salvar evolução\n      saveButton.addEventListener(\'click\', saveEvolution);\n      \n      // Editar a partir da visualização\n      editEvolutionButton.addEventListener(\'click\', function() {\n        closeViewEvolutionModal();\n        editEvolution(this.dataset.evolutionId);\n      });\n      \n      // Aprovar evolução\n      approveButton.addEventListener(\'click\', function() {\n        changeEvolutionStatus(this.dataset.evolutionId, \'approved\');\n      });\n      \n      // Rejeitar evolução\n      rejectButton.addEventListener(\'click\', function() {\n        changeEvolutionStatus(this.dataset.evolutionId, \'rejected\');\n      });\n      \n      // Paciente selecionado - carregar consultas relacionadas\n      patientIdSelect.addEventListener(\'change\', function() {\n        const patientId = this.value;\n        if (patientId) {\n          loadPatientAppointments(patientId);\n        } else {\n          // Limpar select de consultas\n          appointmentIdSelect.innerHTML = \'<option value="">Selecione o atendimento (opcional)</option>\';\n        }\n      });\n    }\n    \n    // Carregar pacientes\n    async function loadPatients() {\n      try {\n        const response = await fetch(\'/api/patients\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar pacientes\');\n        }\n        \n        const patients = await response.json();\n        \n        // Preencher select de filtro\n        patientFilter.innerHTML = \'<option value="">Todos os pacientes</option>\';\n        patients.forEach(patient => {\n          const option = document.createElement(\'option\');\n          option.value = patient.id;\n          option.textContent = patient.fullName;\n          patientFilter.appendChild(option);\n        });\n        \n        // Preencher select do formulário\n        patientIdSelect.innerHTML = \'<option value="">Selecione o paciente</option>\';\n        patients.forEach(patient => {\n          const option = document.createElement(\'option\');\n          option.value = patient.id;\n          option.textContent = patient.fullName;\n          patientIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar pacientes:\', error);\n      }\n    }\n    \n    // Carregar profissionais\n    async function loadProfessionals() {\n      try {\n        const response = await fetch(\'/api/professionals\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar profissionais\');\n        }\n        \n        const professionals = await response.json();\n        \n        // Preencher select de filtro\n        professionalFilter.innerHTML = \'<option value="">Todos os profissionais</option>\';\n        professionals.forEach(professional => {\n          const option = document.createElement(\'option\');\n          option.value = professional.id;\n          option.textContent = professional.user.fullName;\n          professionalFilter.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar profissionais:\', error);\n      }\n    }\n    \n    // Carregar consultas do paciente\n    async function loadPatientAppointments(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}/appointments?status=attended`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar consultas do paciente\');\n        }\n        \n        const appointments = await response.json();\n        \n        // Preencher select de consultas\n        appointmentIdSelect.innerHTML = \'<option value="">Selecione o atendimento (opcional)</option>\';\n        \n        // Ordenar por data (mais recente primeiro)\n        appointments.sort((a, b) => new Date(b.startTime) - new Date(a.startTime));\n        \n        appointments.forEach(appointment => {\n          const date = new Date(appointment.startTime);\n          const formattedDate = date.toLocaleDateString(\'pt-BR\');\n          \n          const option = document.createElement(\'option\');\n          option.value = appointment.id;\n          option.textContent = `${formattedDate} - ${translateEvolutionType(appointment.procedureType)}`;\n          appointmentIdSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar consultas do paciente:\', error);\n      }\n    }\n    \n    // Carregar evoluções\n    async function loadEvolutions() {\n      try {\n        const url = new URL(\'/api/evolutions\', window.location.origin);\n        \n        // Adicionar parâmetros de filtro, se houver\n        if (patientFilter.value) {\n          url.searchParams.append(\'patientId\', patientFilter.value);\n        }\n        \n        if (professionalFilter.value) {\n          url.searchParams.append(\'professionalId\', professionalFilter.value);\n        }\n        \n        if (statusFilter.value) {\n          url.searchParams.append(\'status\', statusFilter.value);\n        }\n        \n        if (startDateFilter.value) {\n          url.searchParams.append(\'startDate\', startDateFilter.value);\n        }\n        \n        if (endDateFilter.value) {\n          url.searchParams.append(\'endDate\', endDateFilter.value);\n        }\n        \n        const response = await fetch(url, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar evoluções\');\n        }\n        \n        evolutions = await response.json();\n        filteredEvolutions = [...evolutions];\n        \n        // Calcular número total de páginas\n        totalPages = Math.ceil(filteredEvolutions.length / pageSize);\n        \n        // Renderizar tabela e paginação\n        renderEvolutionsTable();\n        renderPagination();\n      } catch (error) {\n        console.error(\'Erro ao carregar evoluções:\', error);\n        evolutionsTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">\n              <div class="empty-state">\n                <div class="empty-icon">❌</div>\n                <div class="empty-text">Erro ao carregar evoluções. Tente novamente.</div>\n                <button class="button button-primary" onclick="loadEvolutions()">Tentar novamente</button>\n              </div>\n            </td>\n          </tr>\n        `;\n      }\n    }\n    \n    // Filtrar evoluções\n    function filterEvolutions() {\n      loadEvolutions();\n    }\n    \n    // Renderizar tabela de evoluções\n    function renderEvolutionsTable() {\n      // Se não há evoluções\n      if (filteredEvolutions.length === 0) {\n        evolutionsTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">\n              <div class="empty-state">\n                <div class="empty-icon">📝</div>\n                <div class="empty-text">Nenhuma evolução encontrada.</div>\n                <button class="button button-primary" id="emptyAddEvolutionBtn">Nova Evolução</button>\n              </div>\n            </td>\n          </tr>\n        `;\n        \n        document.getElementById(\'emptyAddEvolutionBtn\')?.addEventListener(\'click\', openAddEvolutionModal);\n        return;\n      }\n      \n      // Calcular índices para paginação\n      const startIndex = (currentPage - 1) * pageSize;\n      const endIndex = Math.min(startIndex + pageSize, filteredEvolutions.length);\n      const evolutionsToShow = filteredEvolutions.slice(startIndex, endIndex);\n      \n      // Limpar tabela\n      evolutionsTableBody.innerHTML = \'\';\n      \n      // Adicionar linhas\n      evolutionsToShow.forEach(evolution => {\n        const row = document.createElement(\'tr\');\n        \n        // Dados da linha\n        row.innerHTML = `\n          <td>${formatDate(evolution.date)}</td>\n          <td>${evolution.patient?.fullName || \'N/A\'}</td>\n          <td>${evolution.professional?.user?.fullName || \'N/A\'}</td>\n          <td>${translateEvolutionType(evolution.type)}</td>\n          <td><span class="status status-${evolution.status}">${translateStatus(evolution.status)}</span></td>\n          <td>\n            <button class="action-button view-evolution" data-id="${evolution.id}">Visualizar</button>\n            <button class="action-button edit-evolution" data-id="${evolution.id}">Editar</button>\n          </td>\n        `;\n        \n        evolutionsTableBody.appendChild(row);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-evolution\').forEach(button => {\n        button.addEventListener(\'click\', () => viewEvolution(button.dataset.id));\n      });\n      \n      document.querySelectorAll(\'.edit-evolution\').forEach(button => {\n        button.addEventListener(\'click\', () => editEvolution(button.dataset.id));\n      });\n    }\n    \n    // Renderizar paginação\n    function renderPagination() {\n      if (totalPages <= 1) {\n        paginationElement.innerHTML = \'\';\n        return;\n      }\n      \n      let paginationHTML = \'\';\n      \n      // Botão anterior\n      paginationHTML += `\n        <li>\n          <a href="#" class="${currentPage === 1 ? \'disabled\' : \'\'}" \n             onclick="${currentPage > 1 ? \'changePage(\' + (currentPage - 1) + \')\' : \'return false\'}">\n            &laquo;\n          </a>\n        </li>\n      `;\n      \n      // Páginas numéricas\n      for (let i = 1; i <= totalPages; i++) {\n        paginationHTML += `\n          <li>\n            <a href="#" class="${i === currentPage ? \'active\' : \'\'}" \n               onclick="changePage(${i})">\n              ${i}\n            </a>\n          </li>\n        `;\n      }\n      \n      // Botão próximo\n      paginationHTML += `\n        <li>\n          <a href="#" class="${currentPage === totalPages ? \'disabled\' : \'\'}" \n             onclick="${currentPage < totalPages ? \'changePage(\' + (currentPage + 1) + \')\' : \'return false\'}">\n            &raquo;\n          </a>\n        </li>\n      `;\n      \n      paginationElement.innerHTML = paginationHTML;\n    }\n    \n    // Mudar página\n    function changePage(page) {\n      currentPage = page;\n      renderEvolutionsTable();\n      renderPagination();\n      return false; // Prevenir comportamento padrão do link\n    }\n    \n    // Abrir modal para adicionar evolução\n    function openAddEvolutionModal() {\n      modalTitle.textContent = \'Nova Evolução\';\n      evolutionForm.reset();\n      evolutionIdInput.value = \'\';\n      \n      // Definir data padrão como hoje\n      const today = new Date();\n      const dateString = today.toISOString().split(\'T\')[0];\n      document.getElementById(\'date\').value = dateString;\n      \n      // Definir status padrão como "Pendente"\n      document.getElementById(\'status\').value = \'pending\';\n      \n      evolutionModal.classList.add(\'active\');\n    }\n    \n    // Criar nova evolução a partir de um agendamento\n    async function createNewEvolutionFromAppointment(appointmentId) {\n      try {\n        // Buscar dados do agendamento\n        const response = await fetch(`/api/appointments/${appointmentId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar dados do agendamento\');\n        }\n        \n        const appointment = await response.json();\n        \n        // Abrir modal de nova evolução\n        openAddEvolutionModal();\n        \n        // Selecionar o paciente\n        patientIdSelect.value = appointment.patientId;\n        \n        // Carregar consultas do paciente e selecionar o agendamento\n        await loadPatientAppointments(appointment.patientId);\n        appointmentIdSelect.value = appointmentId;\n        \n        // Preencher tipo de evolução baseado no tipo de procedimento\n        document.getElementById(\'type\').value = appointment.procedureType;\n        \n        // Preencher título padrão\n        document.getElementById(\'title\').value = `Evolução - ${new Date(appointment.startTime).toLocaleDateString(\'pt-BR\')}`;\n        \n        // Definir o foco no campo de conteúdo\n        setTimeout(() => {\n          document.getElementById(\'content\').focus();\n        }, 300);\n      } catch (error) {\n        console.error(\'Erro ao criar evolução a partir do agendamento:\', error);\n        alert(\'Erro ao carregar dados do agendamento. Tente novamente.\');\n      }\n    }\n    \n    // Fechar modal\n    function closeEvolutionModal() {\n      evolutionModal.classList.remove(\'active\');\n    }\n    \n    // Fechar modal de visualização\n    function closeViewEvolutionModal() {\n      viewEvolutionModal.classList.remove(\'active\');\n    }\n    \n    // Editar evolução\n    async function editEvolution(evolutionId) {\n      try {\n        modalTitle.textContent = \'Editar Evolução\';\n        \n        const evolution = evolutions.find(e => e.id == evolutionId);\n        \n        if (!evolution) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/evolutions/${evolutionId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados da evolução\');\n          }\n          \n          const evolutionData = await response.json();\n          fillEvolutionForm(evolutionData);\n        } else {\n          fillEvolutionForm(evolution);\n        }\n        \n        evolutionModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar evolução:\', error);\n        alert(\'Erro ao carregar dados da evolução. Tente novamente.\');\n      }\n    }\n    \n    // Preencher formulário com dados da evolução\n    function fillEvolutionForm(evolution) {\n      evolutionIdInput.value = evolution.id;\n      document.getElementById(\'patientId\').value = evolution.patientId || \'\';\n      document.getElementById(\'date\').value = evolution.date ? new Date(evolution.date).toISOString().split(\'T\')[0] : \'\';\n      document.getElementById(\'type\').value = evolution.type || \'\';\n      document.getElementById(\'title\').value = evolution.title || \'\';\n      document.getElementById(\'content\').value = evolution.content || \'\';\n      document.getElementById(\'goals\').value = evolution.goals || \'\';\n      document.getElementById(\'nextSteps\').value = evolution.nextSteps || \'\';\n      document.getElementById(\'status\').value = evolution.status || \'pending\';\n      document.getElementById(\'visibility\').value = evolution.visibility || \'internal\';\n      \n      // Carregar consultas do paciente e selecionar a consulta relacionada\n      if (evolution.patientId) {\n        loadPatientAppointments(evolution.patientId).then(() => {\n          document.getElementById(\'appointmentId\').value = evolution.appointmentId || \'\';\n        });\n      }\n    }\n    \n    // Visualizar evolução\n    async function viewEvolution(evolutionId) {\n      try {\n        const evolution = evolutions.find(e => e.id == evolutionId);\n        \n        if (!evolution) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/evolutions/${evolutionId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados da evolução\');\n          }\n          \n          const evolutionData = await response.json();\n          displayEvolutionDetails(evolutionData);\n        } else {\n          displayEvolutionDetails(evolution);\n        }\n        \n        // Configurar botões\n        editEvolutionButton.dataset.evolutionId = evolutionId;\n        approveButton.dataset.evolutionId = evolutionId;\n        rejectButton.dataset.evolutionId = evolutionId;\n        \n        // Mostrar ou esconder botões baseado no status\n        if (evolution.status === \'approved\' || evolution.status === \'rejected\') {\n          approveButton.style.display = \'none\';\n          rejectButton.style.display = \'none\';\n        } else {\n          approveButton.style.display = \'block\';\n          rejectButton.style.display = \'block\';\n        }\n        \n        // Carregar anexos\n        loadEvolutionAttachments(evolutionId);\n        \n        // Exibir modal\n        viewEvolutionModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar evolução:\', error);\n        alert(\'Erro ao carregar dados da evolução. Tente novamente.\');\n      }\n    }\n    \n    // Exibir detalhes da evolução\n    function displayEvolutionDetails(evolution) {\n      // Informações do paciente\n      document.getElementById(\'viewPatientName\').textContent = evolution.patient?.fullName || \'N/A\';\n      \n      // Informações do atendimento\n      const appointmentInfo = evolution.appointment \n        ? `Atendimento: ${formatDate(evolution.appointment.startTime)}`\n        : \'\';\n      document.getElementById(\'viewAppointmentInfo\').textContent = appointmentInfo;\n      \n      // Status\n      const statusBadge = document.getElementById(\'viewStatusBadge\');\n      statusBadge.textContent = translateStatus(evolution.status);\n      statusBadge.className = `evolution-status-badge ${evolution.status}`;\n      \n      // Conteúdo da evolução\n      document.getElementById(\'viewTitle\').textContent = evolution.title || \'\';\n      document.getElementById(\'viewContent\').textContent = evolution.content || \'\';\n      \n      // Objetivos alcançados (esconder se vazio)\n      const goalsSection = document.getElementById(\'viewGoalsSection\');\n      if (evolution.goals) {\n        document.getElementById(\'viewGoals\').textContent = evolution.goals;\n        goalsSection.style.display = \'block\';\n      } else {\n        goalsSection.style.display = \'none\';\n      }\n      \n      // Próximos passos (esconder se vazio)\n      const nextStepsSection = document.getElementById(\'viewNextStepsSection\');\n      if (evolution.nextSteps) {\n        document.getElementById(\'viewNextSteps\').textContent = evolution.nextSteps;\n        nextStepsSection.style.display = \'block\';\n      } else {\n        nextStepsSection.style.display = \'none\';\n      }\n      \n      // Metadados\n      document.getElementById(\'viewProfessionalName\').textContent = `Profissional: ${evolution.professional?.user?.fullName || \'N/A\'}`;\n      document.getElementById(\'viewDate\').textContent = `Data: ${formatDate(evolution.date)}`;\n      document.getElementById(\'viewVisibility\').textContent = `Visibilidade: ${translateVisibility(evolution.visibility)}`;\n    }\n    \n    // Carregar anexos da evolução\n    async function loadEvolutionAttachments(evolutionId) {\n      try {\n        const response = await fetch(`/api/evolutions/${evolutionId}/attachments`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar anexos\');\n        }\n        \n        const attachments = await response.json();\n        const fileList = document.getElementById(\'fileList\');\n        \n        if (attachments.length === 0) {\n          fileList.innerHTML = \'<div class="empty-text">Nenhum anexo disponível</div>\';\n          return;\n        }\n        \n        fileList.innerHTML = \'\';\n        \n        attachments.forEach(attachment => {\n          const fileItem = document.createElement(\'div\');\n          fileItem.className = \'file-item\';\n          \n          const fileName = attachment.fileName || \'Arquivo\';\n          const fileUrl = attachment.fileUrl || \'#\';\n          \n          fileItem.innerHTML = `\n            <div class="file-name">\n              <span class="file-icon">📄</span>\n              ${fileName}\n            </div>\n            <div>\n              <a href="${fileUrl}" target="_blank" class="action-button">Visualizar</a>\n              <button class="action-button delete" data-id="${attachment.id}">Excluir</button>\n            </div>\n          `;\n          \n          fileList.appendChild(fileItem);\n        });\n        \n        // Adicionar event listeners para excluir\n        document.querySelectorAll(\'.file-item .delete\').forEach(button => {\n          button.addEventListener(\'click\', () => deleteAttachment(button.dataset.id));\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar anexos:\', error);\n        document.getElementById(\'fileList\').innerHTML = \'<div class="empty-text">Erro ao carregar anexos</div>\';\n      }\n    }\n    \n    // Excluir anexo\n    async function deleteAttachment(attachmentId) {\n      if (!confirm(\'Tem certeza que deseja excluir este anexo?\')) {\n        return;\n      }\n      \n      try {\n        const response = await fetch(`/api/attachments/${attachmentId}`, {\n          method: \'DELETE\',\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao excluir anexo\');\n        }\n        \n        // Recarregar anexos\n        loadEvolutionAttachments(editEvolutionButton.dataset.evolutionId);\n      } catch (error) {\n        console.error(\'Erro ao excluir anexo:\', error);\n        alert(\'Erro ao excluir anexo. Tente novamente.\');\n      }\n    }\n    \n    // Salvar evolução\n    async function saveEvolution() {\n      try {\n        // Validação básica\n        const patientId = document.getElementById(\'patientId\').value;\n        const date = document.getElementById(\'date\').value;\n        const type = document.getElementById(\'type\').value;\n        const title = document.getElementById(\'title\').value;\n        const content = document.getElementById(\'content\').value;\n        \n        if (!patientId || !date || !type || !title || !content) {\n          alert(\'Por favor, preencha todos os campos obrigatórios.\');\n          return;\n        }\n        \n        // Preparar dados da evolução\n        const evolutionData = {\n          patientId: parseInt(patientId),\n          appointmentId: document.getElementById(\'appointmentId\').value ? parseInt(document.getElementById(\'appointmentId\').value) : null,\n          date,\n          type,\n          title,\n          content,\n          goals: document.getElementById(\'goals\').value,\n          nextSteps: document.getElementById(\'nextSteps\').value,\n          status: document.getElementById(\'status\').value,\n          visibility: document.getElementById(\'visibility\').value\n        };\n        \n        const evolutionId = evolutionIdInput.value;\n        let response;\n        \n        if (evolutionId) {\n          // Editar evolução existente\n          response = await fetch(`/api/evolutions/${evolutionId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(evolutionData)\n          });\n        } else {\n          // Adicionar nova evolução\n          response = await fetch(\'/api/evolutions\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(evolutionData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || \'Erro ao salvar evolução\');\n        }\n        \n        // Fechar modal e recarregar lista\n        closeEvolutionModal();\n        loadEvolutions();\n        \n        alert(evolutionId ? \'Evolução atualizada com sucesso!\' : \'Evolução adicionada com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar evolução:\', error);\n        alert(`Erro ao salvar evolução: ${error.message}`);\n      }\n    }\n    \n    // Alterar status da evolução\n    async function changeEvolutionStatus(evolutionId, newStatus) {\n      try {\n        const response = await fetch(`/api/evolutions/${evolutionId}/status`, {\n          method: \'PUT\',\n          headers: {\n            \'Content-Type\': \'application/json\'\n          },\n          credentials: \'include\',\n          body: JSON.stringify({ status: newStatus })\n        });\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || `Erro ao alterar status para ${translateStatus(newStatus)}`);\n        }\n        \n        // Fechar modal e recarregar lista\n        closeViewEvolutionModal();\n        loadEvolutions();\n        \n        alert(`Status alterado para ${translateStatus(newStatus)} com sucesso!`);\n      } catch (error) {\n        console.error(\'Erro ao alterar status:\', error);\n        alert(`Erro ao alterar status: ${error.message}`);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n  </script>\n', PosixPath('client/public/evolutions.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = d656932dbdfe98594838a6b6968656a35ba1fe661bf89fd42b5d644c4b3f425c1f8d309584f072d44f3c01f4fddf4652e2120b762b8622d09561f77936f22b0d_0
2025-05-07 18:31:35,193 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('client/public/facilities.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 86bc90506d7a0407180432de468735bf0d80203ba818cd51140d7c932cec26004aca1d9b17d11b42858ea3eba21203e5feccbe57ba8c758beb852bfdc92c2457_0
2025-05-07 18:31:35,201 - semgrep.rule_match - DEBUG - match_key = ('\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', () => {\n      checkAuth();\n      setupEventListeners();\n      loadFacilities();\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const facilitiesGrid = document.getElementById(\'facilitiesGrid\');\n    const facilitiesTableBody = document.getElementById(\'facilitiesTableBody\');\n    const searchFacility = document.getElementById(\'searchFacility\');\n    const addFacilityCard = document.getElementById(\'addFacilityCard\');\n    \n    // Modal Facility\n    const facilityModal = document.getElementById(\'facilityModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const facilityForm = document.getElementById(\'facilityForm\');\n    const facilityIdInput = document.getElementById(\'facilityId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    \n    // Modal View Facility\n    const viewFacilityModal = document.getElementById(\'viewFacilityModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const closeDetailButton = document.getElementById(\'closeDetailButton\');\n    const editFacilityButton = document.getElementById(\'editFacilityButton\');\n    const detailsTab = document.getElementById(\'detailsTab\');\n    const roomsTab = document.getElementById(\'roomsTab\');\n    const statsTab = document.getElementById(\'statsTab\');\n    const detailsTabContent = document.getElementById(\'detailsTabContent\');\n    const roomsTabContent = document.getElementById(\'roomsTabContent\');\n    const statsTabContent = document.getElementById(\'statsTabContent\');\n    const addRoomButton = document.getElementById(\'addRoomButton\');\n    \n    // Modal Room\n    const roomModal = document.getElementById(\'roomModal\');\n    const roomModalTitle = document.getElementById(\'roomModalTitle\');\n    const roomForm = document.getElementById(\'roomForm\');\n    const roomIdInput = document.getElementById(\'roomId\');\n    const roomFacilityIdInput = document.getElementById(\'roomFacilityId\');\n    const closeRoomModal = document.getElementById(\'closeRoomModal\');\n    const cancelRoomButton = document.getElementById(\'cancelRoomButton\');\n    const saveRoomButton = document.getElementById(\'saveRoomButton\');\n    \n    // Variáveis globais\n    let currentUser = null;\n    let facilities = [];\n    let currentFacility = null;\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        currentUser = await response.json();\n        displayUserData(currentUser);\n        \n        // Configurar permissões baseadas no papel do usuário\n        if (currentUser.role !== \'admin\') {\n          addFacilityCard.style.display = \'none\';\n        }\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Pesquisar\n      searchFacility.addEventListener(\'input\', filterFacilities);\n      \n      // Adicionar unidade\n      addFacilityCard.addEventListener(\'click\', openAddFacilityModal);\n      \n      // Formulário de unidade\n      closeModal.addEventListener(\'click\', closeFacilityModal);\n      cancelButton.addEventListener(\'click\', closeFacilityModal);\n      saveButton.addEventListener(\'click\', saveFacility);\n      \n      // Modal de background\n      facilityModal.addEventListener(\'click\', function(e) {\n        if (e.target === facilityModal) {\n          closeFacilityModal();\n        }\n      });\n      \n      // Modal de visualização\n      closeViewModal.addEventListener(\'click\', closeViewFacilityModal);\n      closeDetailButton.addEventListener(\'click\', closeViewFacilityModal);\n      editFacilityButton.addEventListener(\'click\', editFacilityFromView);\n      \n      viewFacilityModal.addEventListener(\'click\', function(e) {\n        if (e.target === viewFacilityModal) {\n          closeViewFacilityModal();\n        }\n      });\n      \n      // Tabs\n      detailsTab.addEventListener(\'click\', () => switchTab(\'details\'));\n      roomsTab.addEventListener(\'click\', () => switchTab(\'rooms\'));\n      statsTab.addEventListener(\'click\', () => switchTab(\'stats\'));\n      \n      // Adicionar sala\n      addRoomButton.addEventListener(\'click\', openAddRoomModal);\n      \n      // Formulário de sala\n      closeRoomModal.addEventListener(\'click\', closeRoomModal);\n      cancelRoomButton.addEventListener(\'click\', closeRoomModal);\n      saveRoomButton.addEventListener(\'click\', saveRoom);\n      \n      roomModal.addEventListener(\'click\', function(e) {\n        if (e.target === roomModal) {\n          closeRoomModal();\n        }\n      });\n    }\n    \n    // Alternar entre as abas\n    function switchTab(tab) {\n      // Remover classe ativa de todas as abas\n      detailsTab.classList.remove(\'active\');\n      roomsTab.classList.remove(\'active\');\n      statsTab.classList.remove(\'active\');\n      \n      detailsTabContent.classList.remove(\'active\');\n      roomsTabContent.classList.remove(\'active\');\n      statsTabContent.classList.remove(\'active\');\n      \n      // Adicionar classe ativa à aba clicada\n      if (tab === \'details\') {\n        detailsTab.classList.add(\'active\');\n        detailsTabContent.classList.add(\'active\');\n      } else if (tab === \'rooms\') {\n        roomsTab.classList.add(\'active\');\n        roomsTabContent.classList.add(\'active\');\n      } else if (tab === \'stats\') {\n        statsTab.classList.add(\'active\');\n        statsTabContent.classList.add(\'active\');\n      }\n    }\n    \n    // Carregar unidades\n    async function loadFacilities() {\n      try {\n        const response = await fetch(\'/api/facilities\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar unidades\');\n        }\n        \n        facilities = await response.json();\n        renderFacilitiesGrid();\n        renderFacilitiesTable();\n      } catch (error) {\n        console.error(\'Erro ao carregar unidades:\', error);\n        facilitiesTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">Erro ao carregar unidades. Tente novamente mais tarde.</td>\n          </tr>\n        `;\n      }\n    }\n    \n    // Renderizar grid de unidades\n    function renderFacilitiesGrid() {\n      // Limpar grid, mantendo o card de adicionar\n      const addCard = document.getElementById(\'addFacilityCard\');\n      facilitiesGrid.innerHTML = \'\';\n      facilitiesGrid.appendChild(addCard);\n      \n      // Se não há unidades\n      if (facilities.length === 0) {\n        const emptyCard = document.createElement(\'div\');\n        emptyCard.className = \'empty-state\';\n        emptyCard.innerHTML = `\n          <div class="empty-icon">🏥</div>\n          <div class="empty-text">Nenhuma unidade encontrada</div>\n        `;\n        facilitiesGrid.insertBefore(emptyCard, addCard);\n        return;\n      }\n      \n      // Mostrar no máximo 3 unidades no grid\n      const displayFacilities = facilities.slice(0, 3);\n      \n      // Adicionar cards de unidades\n      displayFacilities.forEach(facility => {\n        const facilityCard = document.createElement(\'div\');\n        facilityCard.className = \'facility-card\';\n        facilityCard.innerHTML = `\n          <div class="facility-header">\n            <div>\n              <h3 class="facility-name">${facility.name}</h3>\n              <p class="facility-address">${facility.address}, ${facility.city} - ${facility.state}</p>\n            </div>\n          </div>\n          \n          <div class="facility-phone">\n            <span class="facility-icon">📞</span> ${facility.phone}\n          </div>\n          \n          <div class="facility-email">\n            <span class="facility-icon">✉️</span> ${facility.email || \'Não informado\'}\n          </div>\n          \n          <div class="facility-stats">\n            <div class="facility-stat">\n              <div class="stat-number" id="roomCount-${facility.id}">...</div>\n              <div class="stat-label">Salas</div>\n            </div>\n            \n            <div class="facility-stat">\n              <div class="stat-number" id="profCount-${facility.id}">...</div>\n              <div class="stat-label">Profissionais</div>\n            </div>\n            \n            <div class="facility-stat">\n              <div class="stat-number" id="patientCount-${facility.id}">...</div>\n              <div class="stat-label">Pacientes</div>\n            </div>\n          </div>\n          \n          <div class="facility-footer">\n            <div class="facility-status">\n              <span class="status ${facility.isActive ? \'status-active\' : \'status-inactive\'}">\n                ${facility.isActive ? \'Ativa\' : \'Inativa\'}\n              </span>\n            </div>\n            \n            <div class="facility-actions">\n              <button class="button button-outline view-facility" data-id="${facility.id}">Ver detalhes</button>\n            </div>\n          </div>\n        `;\n        \n        facilitiesGrid.insertBefore(facilityCard, addCard);\n        \n        // Carregar contagens\n        loadFacilityStats(facility.id);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => viewFacility(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Renderizar tabela de unidades\n    function renderFacilitiesTable() {\n      // Se não há unidades\n      if (facilities.length === 0) {\n        facilitiesTableBody.innerHTML = `\n          <tr>\n            <td colspan="6" class="text-center">Nenhuma unidade encontrada</td>\n          </tr>\n        `;\n        return;\n      }\n      \n      // Limpar tabela\n      facilitiesTableBody.innerHTML = \'\';\n      \n      // Adicionar linhas\n      facilities.forEach(facility => {\n        const row = document.createElement(\'tr\');\n        \n        row.innerHTML = `\n          <td>${facility.name}</td>\n          <td>${facility.address}, ${facility.city}</td>\n          <td>${facility.phone}</td>\n          <td id="table-roomCount-${facility.id}">Carregando...</td>\n          <td><span class="status ${facility.isActive ? \'status-active\' : \'status-inactive\'}">${facility.isActive ? \'Ativa\' : \'Inativa\'}</span></td>\n          <td>\n            <button class="action-button view-facility" data-id="${facility.id}">Visualizar</button>\n            <button class="action-button edit-facility" data-id="${facility.id}">Editar</button>\n          </td>\n        `;\n        \n        facilitiesTableBody.appendChild(row);\n        \n        // Carregar contagem de salas\n        loadRoomCount(facility.id);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => viewFacility(parseInt(button.dataset.id)));\n      });\n      \n      document.querySelectorAll(\'.edit-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => editFacility(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Carregar estatísticas de uma unidade\n    async function loadFacilityStats(facilityId) {\n      try {\n        // Carregar contagem de salas\n        const roomsResponse = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (roomsResponse.ok) {\n          const rooms = await roomsResponse.json();\n          document.getElementById(`roomCount-${facilityId}`).textContent = rooms.length;\n          document.getElementById(`table-roomCount-${facilityId}`).textContent = rooms.length;\n        }\n        \n        // Carregar contagem de profissionais\n        const profsResponse = await fetch(`/api/professionals?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (profsResponse.ok) {\n          const professionals = await profsResponse.json();\n          document.getElementById(`profCount-${facilityId}`).textContent = professionals.length;\n        }\n        \n        // Carregar contagem de pacientes\n        const patientsResponse = await fetch(`/api/patients?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (patientsResponse.ok) {\n          const patients = await patientsResponse.json();\n          document.getElementById(`patientCount-${facilityId}`).textContent = patients.length;\n        }\n      } catch (error) {\n        console.error(`Erro ao carregar estatísticas da unidade ${facilityId}:`, error);\n      }\n    }\n    \n    // Carregar contagem de salas\n    async function loadRoomCount(facilityId) {\n      try {\n        const response = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (response.ok) {\n          const rooms = await response.json();\n          document.getElementById(`table-roomCount-${facilityId}`).textContent = rooms.length;\n        }\n      } catch (error) {\n        console.error(`Erro ao carregar contagem de salas da unidade ${facilityId}:`, error);\n        document.getElementById(`table-roomCount-${facilityId}`).textContent = \'Erro\';\n      }\n    }\n    \n    // Filtrar unidades\n    function filterFacilities() {\n      const searchTerm = searchFacility.value.toLowerCase();\n      \n      if (!searchTerm) {\n        renderFacilitiesTable();\n        return;\n      }\n      \n      const filteredFacilities = facilities.filter(facility =>\n        facility.name.toLowerCase().includes(searchTerm) ||\n        facility.address.toLowerCase().includes(searchTerm) ||\n        facility.city.toLowerCase().includes(searchTerm) ||\n        facility.state.toLowerCase().includes(searchTerm)\n      );\n      \n      if (filteredFacilities.length === 0) {\n        facilitiesTableBody.innerHTML = `\n          <tr>\n            <td colspan="6" class="text-center">Nenhuma unidade encontrada com o termo "${searchTerm}"</td>\n          </tr>\n        `;\n        return;\n      }\n      \n      facilitiesTableBody.innerHTML = \'\';\n      \n      filteredFacilities.forEach(facility => {\n        const row = document.createElement(\'tr\');\n        \n        row.innerHTML = `\n          <td>${facility.name}</td>\n          <td>${facility.address}, ${facility.city}</td>\n          <td>${facility.phone}</td>\n          <td id="table-roomCount-${facility.id}">Carregando...</td>\n          <td><span class="status ${facility.isActive ? \'status-active\' : \'status-inactive\'}">${facility.isActive ? \'Ativa\' : \'Inativa\'}</span></td>\n          <td>\n            <button class="action-button view-facility" data-id="${facility.id}">Visualizar</button>\n            <button class="action-button edit-facility" data-id="${facility.id}">Editar</button>\n          </td>\n        `;\n        \n        facilitiesTableBody.appendChild(row);\n        \n        // Carregar contagem de salas\n        loadRoomCount(facility.id);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => viewFacility(parseInt(button.dataset.id)));\n      });\n      \n      document.querySelectorAll(\'.edit-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => editFacility(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Abrir modal para adicionar unidade\n    function openAddFacilityModal() {\n      modalTitle.textContent = \'Adicionar Unidade\';\n      facilityForm.reset();\n      facilityIdInput.value = \'\';\n      document.getElementById(\'isActive\').checked = true;\n      \n      facilityModal.classList.add(\'active\');\n    }\n    \n    // Abrir modal para editar unidade\n    function editFacility(facilityId) {\n      const facility = facilities.find(f => f.id === facilityId);\n      \n      if (!facility) {\n        alert(\'Unidade não encontrada\');\n        return;\n      }\n      \n      modalTitle.textContent = \'Editar Unidade\';\n      \n      // Preencher formulário\n      facilityIdInput.value = facility.id;\n      document.getElementById(\'name\').value = facility.name;\n      document.getElementById(\'address\').value = facility.address;\n      document.getElementById(\'city\').value = facility.city;\n      document.getElementById(\'state\').value = facility.state;\n      document.getElementById(\'zipCode\').value = facility.zipCode;\n      document.getElementById(\'phone\').value = facility.phone;\n      document.getElementById(\'email\').value = facility.email || \'\';\n      document.getElementById(\'description\').value = facility.description || \'\';\n      document.getElementById(\'openingHours\').value = facility.openingHours || \'\';\n      document.getElementById(\'isActive\').checked = facility.isActive;\n      \n      facilityModal.classList.add(\'active\');\n    }\n    \n    // Editar a partir da visualização\n    function editFacilityFromView() {\n      if (currentFacility) {\n        closeViewFacilityModal();\n        editFacility(currentFacility.id);\n      }\n    }\n    \n    // Fechar modal de unidade\n    function closeFacilityModal() {\n      facilityModal.classList.remove(\'active\');\n    }\n    \n    // Salvar unidade\n    async function saveFacility() {\n      try {\n        // Validação\n        const nameInput = document.getElementById(\'name\');\n        const addressInput = document.getElementById(\'address\');\n        const cityInput = document.getElementById(\'city\');\n        const stateInput = document.getElementById(\'state\');\n        const zipCodeInput = document.getElementById(\'zipCode\');\n        const phoneInput = document.getElementById(\'phone\');\n        \n        if (!nameInput.value) {\n          alert(\'Por favor, insira o nome da unidade\');\n          nameInput.focus();\n          return;\n        }\n        \n        if (!addressInput.value) {\n          alert(\'Por favor, insira o endereço da unidade\');\n          addressInput.focus();\n          return;\n        }\n        \n        if (!cityInput.value) {\n          alert(\'Por favor, insira a cidade da unidade\');\n          cityInput.focus();\n          return;\n        }\n        \n        if (!stateInput.value) {\n          alert(\'Por favor, insira o estado da unidade\');\n          stateInput.focus();\n          return;\n        }\n        \n        if (!zipCodeInput.value) {\n          alert(\'Por favor, insira o CEP da unidade\');\n          zipCodeInput.focus();\n          return;\n        }\n        \n        if (!phoneInput.value) {\n          alert(\'Por favor, insira o telefone da unidade\');\n          phoneInput.focus();\n          return;\n        }\n        \n        // Preparar dados da unidade\n        const facilityData = {\n          name: nameInput.value,\n          address: addressInput.value,\n          city: cityInput.value,\n          state: stateInput.value,\n          zipCode: zipCodeInput.value,\n          phone: phoneInput.value,\n          email: document.getElementById(\'email\').value,\n          description: document.getElementById(\'description\').value,\n          openingHours: document.getElementById(\'openingHours\').value,\n          isActive: document.getElementById(\'isActive\').checked\n        };\n        \n        const facilityId = facilityIdInput.value;\n        let response;\n        \n        if (facilityId) {\n          // Editar unidade existente\n          response = await fetch(`/api/facilities/${facilityId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(facilityData)\n          });\n        } else {\n          // Adicionar nova unidade\n          response = await fetch(\'/api/facilities\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(facilityData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(errorText || \'Erro ao salvar unidade\');\n        }\n        \n        // Fechar modal e recarregar unidades\n        closeFacilityModal();\n        loadFacilities();\n        \n        alert(facilityId ? \'Unidade atualizada com sucesso!\' : \'Unidade adicionada com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar unidade:\', error);\n        alert(`Erro ao salvar unidade: ${error.message}`);\n      }\n    }\n    \n    // Visualizar unidade\n    async function viewFacility(facilityId) {\n      try {\n        const response = await fetch(`/api/facilities/${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar detalhes da unidade\');\n        }\n        \n        currentFacility = await response.json();\n        \n        document.getElementById(\'viewFacilityName\').textContent = currentFacility.name;\n        document.getElementById(\'viewFacilityAddress\').textContent = `${currentFacility.address}, ${currentFacility.city} - ${currentFacility.state}, ${currentFacility.zipCode}`;\n        document.getElementById(\'viewFacilityPhone\').textContent = currentFacility.phone;\n        document.getElementById(\'viewFacilityEmail\').textContent = currentFacility.email || \'Não informado\';\n        document.getElementById(\'viewFacilityHours\').textContent = currentFacility.openingHours || \'Não informado\';\n        document.getElementById(\'viewFacilityStatus\').innerHTML = `<span class="status ${currentFacility.isActive ? \'status-active\' : \'status-inactive\'}">${currentFacility.isActive ? \'Ativa\' : \'Inativa\'}</span>`;\n        document.getElementById(\'viewFacilityDescription\').textContent = currentFacility.description || \'Sem descrição\';\n        \n        // Carregar salas\n        loadRooms(currentFacility.id);\n        \n        // Carregar estatísticas\n        loadDetailedStats(currentFacility.id);\n        \n        // Mostrar primeira aba\n        switchTab(\'details\');\n        \n        // Exibir modal\n        viewFacilityModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar unidade:\', error);\n        alert(\'Erro ao carregar detalhes da unidade. Tente novamente.\');\n      }\n    }\n    \n    // Carregar salas de uma unidade\n    async function loadRooms(facilityId) {\n      try {\n        const response = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar salas\');\n        }\n        \n        const rooms = await response.json();\n        const roomsList = document.getElementById(\'roomsList\');\n        \n        if (rooms.length === 0) {\n          roomsList.innerHTML = `\n            <div class="empty-state">\n              <div class="empty-icon">🔍</div>\n              <div class="empty-text">Nenhuma sala encontrada</div>\n            </div>\n          `;\n          return;\n        }\n        \n        roomsList.innerHTML = \'\';\n        \n        // Criar grid de salas\n        const roomGrid = document.createElement(\'div\');\n        roomGrid.className = \'room-grid\';\n        \n        rooms.forEach(room => {\n          const roomCard = document.createElement(\'div\');\n          roomCard.className = \'room-card\';\n          roomCard.innerHTML = `\n            <div class="room-card-header">\n              <div class="room-card-title">${room.name}</div>\n              <div class="room-card-capacity">Capacidade: ${room.capacity || 1}</div>\n            </div>\n            \n            <div class="room-card-detail">\n              <div class="room-card-label">Tipo:</div>\n              <div>${translateRoomType(room.type)}</div>\n            </div>\n            \n            <div class="room-card-detail">\n              <div class="room-card-label">Andar:</div>\n              <div>${room.floor || \'Não informado\'}</div>\n            </div>\n            \n            <div class="room-card-detail">\n              <div class="room-card-label">Status:</div>\n              <div>${room.isActive ? \'Ativa\' : \'Inativa\'}</div>\n            </div>\n            \n            <div class="room-card-footer">\n              <button class="action-button edit-room" data-id="${room.id}">Editar</button>\n              <button class="action-button delete delete-room" data-id="${room.id}">Excluir</button>\n            </div>\n          `;\n          \n          roomGrid.appendChild(roomCard);\n        });\n        \n        roomsList.appendChild(roomGrid);\n        \n        // Adicionar event listeners\n        document.querySelectorAll(\'.edit-room\').forEach(button => {\n          button.addEventListener(\'click\', () => editRoom(parseInt(button.dataset.id)));\n        });\n        \n        document.querySelectorAll(\'.delete-room\').forEach(button => {\n          button.addEventListener(\'click\', () => deleteRoom(parseInt(button.dataset.id)));\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar salas:\', error);\n        document.getElementById(\'roomsList\').innerHTML = `\n          <div class="empty-state">\n            <div class="empty-icon">❌</div>\n            <div class="empty-text">Erro ao carregar salas</div>\n          </div>\n        `;\n      }\n    }\n    \n    // Traduzir tipo de sala\n    function translateRoomType(type) {\n      const translations = {\n        \'therapy\': \'Terapia\',\n        \'evaluation\': \'Avaliação\',\n        \'group\': \'Grupo\',\n        \'sensory\': \'Sensorial\',\n        \'meeting\': \'Reunião\',\n        \'administration\': \'Administração\',\n        \'other\': \'Outro\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Carregar estatísticas detalhadas\n    async function loadDetailedStats(facilityId) {\n      try {\n        // Carregar contagem de salas\n        const roomsResponse = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (roomsResponse.ok) {\n          const rooms = await roomsResponse.json();\n          document.getElementById(\'viewFacilityRoomCount\').textContent = rooms.length;\n        }\n        \n        // Carregar contagem de profissionais\n        const profsResponse = await fetch(`/api/professionals?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (profsResponse.ok) {\n          const professionals = await profsResponse.json();\n          document.getElementById(\'viewFacilityProfessionalCount\').textContent = professionals.length;\n        }\n        \n        // Carregar contagem de pacientes\n        const patientsResponse = await fetch(`/api/patients?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (patientsResponse.ok) {\n          const patients = await patientsResponse.json();\n          document.getElementById(\'viewFacilityPatientCount\').textContent = patients.length;\n        }\n        \n        // Carregar contagem de agendamentos\n        const appointmentsResponse = await fetch(`/api/appointments?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (appointmentsResponse.ok) {\n          const appointments = await appointmentsResponse.json();\n          document.getElementById(\'viewFacilityAppointmentCount\').textContent = appointments.length;\n        }\n      } catch (error) {\n        console.error(`Erro ao carregar estatísticas detalhadas da unidade ${facilityId}:`, error);\n      }\n    }\n    \n    // Fechar modal de visualização\n    function closeViewFacilityModal() {\n      viewFacilityModal.classList.remove(\'active\');\n    }\n    \n    // Abrir modal para adicionar sala\n    function openAddRoomModal() {\n      if (!currentFacility) {\n        alert(\'Erro: Nenhuma unidade selecionada\');\n        return;\n      }\n      \n      roomModalTitle.textContent = \'Adicionar Sala\';\n      roomForm.reset();\n      roomIdInput.value = \'\';\n      roomFacilityIdInput.value = currentFacility.id;\n      document.getElementById(\'roomIsActive\').checked = true;\n      \n      roomModal.classList.add(\'active\');\n    }\n    \n    // Abrir modal para editar sala\n    async function editRoom(roomId) {\n      try {\n        const response = await fetch(`/api/rooms/${roomId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar detalhes da sala\');\n        }\n        \n        const room = await response.json();\n        \n        roomModalTitle.textContent = \'Editar Sala\';\n        \n        // Preencher formulário\n        roomIdInput.value = room.id;\n        roomFacilityIdInput.value = room.facilityId;\n        document.getElementById(\'roomName\').value = room.name;\n        document.getElementById(\'roomCapacity\').value = room.capacity || 1;\n        document.getElementById(\'roomType\').value = room.type || \'therapy\';\n        document.getElementById(\'roomFloor\').value = room.floor || \'\';\n        document.getElementById(\'roomDescription\').value = room.description || \'\';\n        document.getElementById(\'roomEquipment\').value = room.equipment || \'\';\n        document.getElementById(\'roomIsActive\').checked = room.isActive;\n        \n        roomModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar sala:\', error);\n        alert(\'Erro ao carregar detalhes da sala. Tente novamente.\');\n      }\n    }\n    \n    // Fechar modal de sala\n    function closeRoomModal() {\n      roomModal.classList.remove(\'active\');\n    }\n    \n    // Salvar sala\n    async function saveRoom() {\n      try {\n        // Validação\n        const nameInput = document.getElementById(\'roomName\');\n        \n        if (!nameInput.value) {\n          alert(\'Por favor, insira o nome da sala\');\n          nameInput.focus();\n          return;\n        }\n        \n        // Preparar dados da sala\n        const roomData = {\n          facilityId: parseInt(roomFacilityIdInput.value),\n          name: nameInput.value,\n          capacity: parseInt(document.getElementById(\'roomCapacity\').value) || 1,\n          type: document.getElementById(\'roomType\').value,\n          floor: document.getElementById(\'roomFloor\').value,\n          description: document.getElementById(\'roomDescription\').value,\n          equipment: document.getElementById(\'roomEquipment\').value,\n          isActive: document.getElementById(\'roomIsActive\').checked\n        };\n        \n        const roomId = roomIdInput.value;\n        let response;\n        \n        if (roomId) {\n          // Editar sala existente\n          response = await fetch(`/api/rooms/${roomId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(roomData)\n          });\n        } else {\n          // Adicionar nova sala\n          response = await fetch(\'/api/rooms\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(roomData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(errorText || \'Erro ao salvar sala\');\n        }\n        \n        // Fechar modal e recarregar salas\n        closeRoomModal();\n        loadRooms(currentFacility.id);\n        \n        alert(roomId ? \'Sala atualizada com sucesso!\' : \'Sala adicionada com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar sala:\', error);\n        alert(`Erro ao salvar sala: ${error.message}`);\n      }\n    }\n    \n    // Excluir sala\n    async function deleteRoom(roomId) {\n      if (!confirm(\'Tem certeza que deseja excluir esta sala?\')) {\n        return;\n      }\n      \n      try {\n        const response = await fetch(`/api/rooms/${roomId}`, {\n          method: \'DELETE\',\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao excluir sala\');\n        }\n        \n        // Recarregar salas\n        loadRooms(currentFacility.id);\n        \n        alert(\'Sala excluída com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao excluir sala:\', error);\n        alert(`Erro ao excluir sala: ${error.message}`);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n   $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', () => {\n      checkAuth();\n      setupEventListeners();\n      loadFacilities();\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const facilitiesGrid = document.getElementById(\'facilitiesGrid\');\n    const facilitiesTableBody = document.getElementById(\'facilitiesTableBody\');\n    const searchFacility = document.getElementById(\'searchFacility\');\n    const addFacilityCard = document.getElementById(\'addFacilityCard\');\n    \n    // Modal Facility\n    const facilityModal = document.getElementById(\'facilityModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const facilityForm = document.getElementById(\'facilityForm\');\n    const facilityIdInput = document.getElementById(\'facilityId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    \n    // Modal View Facility\n    const viewFacilityModal = document.getElementById(\'viewFacilityModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const closeDetailButton = document.getElementById(\'closeDetailButton\');\n    const editFacilityButton = document.getElementById(\'editFacilityButton\');\n    const detailsTab = document.getElementById(\'detailsTab\');\n    const roomsTab = document.getElementById(\'roomsTab\');\n    const statsTab = document.getElementById(\'statsTab\');\n    const detailsTabContent = document.getElementById(\'detailsTabContent\');\n    const roomsTabContent = document.getElementById(\'roomsTabContent\');\n    const statsTabContent = document.getElementById(\'statsTabContent\');\n    const addRoomButton = document.getElementById(\'addRoomButton\');\n    \n    // Modal Room\n    const roomModal = document.getElementById(\'roomModal\');\n    const roomModalTitle = document.getElementById(\'roomModalTitle\');\n    const roomForm = document.getElementById(\'roomForm\');\n    const roomIdInput = document.getElementById(\'roomId\');\n    const roomFacilityIdInput = document.getElementById(\'roomFacilityId\');\n    const closeRoomModal = document.getElementById(\'closeRoomModal\');\n    const cancelRoomButton = document.getElementById(\'cancelRoomButton\');\n    const saveRoomButton = document.getElementById(\'saveRoomButton\');\n    \n    // Variáveis globais\n    let currentUser = null;\n    let facilities = [];\n    let currentFacility = null;\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        currentUser = await response.json();\n        displayUserData(currentUser);\n        \n        // Configurar permissões baseadas no papel do usuário\n        if (currentUser.role !== \'admin\') {\n          addFacilityCard.style.display = \'none\';\n        }\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Pesquisar\n      searchFacility.addEventListener(\'input\', filterFacilities);\n      \n      // Adicionar unidade\n      addFacilityCard.addEventListener(\'click\', openAddFacilityModal);\n      \n      // Formulário de unidade\n      closeModal.addEventListener(\'click\', closeFacilityModal);\n      cancelButton.addEventListener(\'click\', closeFacilityModal);\n      saveButton.addEventListener(\'click\', saveFacility);\n      \n      // Modal de background\n      facilityModal.addEventListener(\'click\', function(e) {\n        if (e.target === facilityModal) {\n          closeFacilityModal();\n        }\n      });\n      \n      // Modal de visualização\n      closeViewModal.addEventListener(\'click\', closeViewFacilityModal);\n      closeDetailButton.addEventListener(\'click\', closeViewFacilityModal);\n      editFacilityButton.addEventListener(\'click\', editFacilityFromView);\n      \n      viewFacilityModal.addEventListener(\'click\', function(e) {\n        if (e.target === viewFacilityModal) {\n          closeViewFacilityModal();\n        }\n      });\n      \n      // Tabs\n      detailsTab.addEventListener(\'click\', () => switchTab(\'details\'));\n      roomsTab.addEventListener(\'click\', () => switchTab(\'rooms\'));\n      statsTab.addEventListener(\'click\', () => switchTab(\'stats\'));\n      \n      // Adicionar sala\n      addRoomButton.addEventListener(\'click\', openAddRoomModal);\n      \n      // Formulário de sala\n      closeRoomModal.addEventListener(\'click\', closeRoomModal);\n      cancelRoomButton.addEventListener(\'click\', closeRoomModal);\n      saveRoomButton.addEventListener(\'click\', saveRoom);\n      \n      roomModal.addEventListener(\'click\', function(e) {\n        if (e.target === roomModal) {\n          closeRoomModal();\n        }\n      });\n    }\n    \n    // Alternar entre as abas\n    function switchTab(tab) {\n      // Remover classe ativa de todas as abas\n      detailsTab.classList.remove(\'active\');\n      roomsTab.classList.remove(\'active\');\n      statsTab.classList.remove(\'active\');\n      \n      detailsTabContent.classList.remove(\'active\');\n      roomsTabContent.classList.remove(\'active\');\n      statsTabContent.classList.remove(\'active\');\n      \n      // Adicionar classe ativa à aba clicada\n      if (tab === \'details\') {\n        detailsTab.classList.add(\'active\');\n        detailsTabContent.classList.add(\'active\');\n      } else if (tab === \'rooms\') {\n        roomsTab.classList.add(\'active\');\n        roomsTabContent.classList.add(\'active\');\n      } else if (tab === \'stats\') {\n        statsTab.classList.add(\'active\');\n        statsTabContent.classList.add(\'active\');\n      }\n    }\n    \n    // Carregar unidades\n    async function loadFacilities() {\n      try {\n        const response = await fetch(\'/api/facilities\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar unidades\');\n        }\n        \n        facilities = await response.json();\n        renderFacilitiesGrid();\n        renderFacilitiesTable();\n      } catch (error) {\n        console.error(\'Erro ao carregar unidades:\', error);\n        facilitiesTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">Erro ao carregar unidades. Tente novamente mais tarde.</td>\n          </tr>\n        `;\n      }\n    }\n    \n    // Renderizar grid de unidades\n    function renderFacilitiesGrid() {\n      // Limpar grid, mantendo o card de adicionar\n      const addCard = document.getElementById(\'addFacilityCard\');\n      facilitiesGrid.innerHTML = \'\';\n      facilitiesGrid.appendChild(addCard);\n      \n      // Se não há unidades\n      if (facilities.length === 0) {\n        const emptyCard = document.createElement(\'div\');\n        emptyCard.className = \'empty-state\';\n        emptyCard.innerHTML = `\n          <div class="empty-icon">🏥</div>\n          <div class="empty-text">Nenhuma unidade encontrada</div>\n        `;\n        facilitiesGrid.insertBefore(emptyCard, addCard);\n        return;\n      }\n      \n      // Mostrar no máximo 3 unidades no grid\n      const displayFacilities = facilities.slice(0, 3);\n      \n      // Adicionar cards de unidades\n      displayFacilities.forEach(facility => {\n        const facilityCard = document.createElement(\'div\');\n        facilityCard.className = \'facility-card\';\n        facilityCard.innerHTML = `\n          <div class="facility-header">\n            <div>\n              <h3 class="facility-name">${facility.name}</h3>\n              <p class="facility-address">${facility.address}, ${facility.city} - ${facility.state}</p>\n            </div>\n          </div>\n          \n          <div class="facility-phone">\n            <span class="facility-icon">📞</span> ${facility.phone}\n          </div>\n          \n          <div class="facility-email">\n            <span class="facility-icon">✉️</span> ${facility.email || \'Não informado\'}\n          </div>\n          \n          <div class="facility-stats">\n            <div class="facility-stat">\n              <div class="stat-number" id="roomCount-${facility.id}">...</div>\n              <div class="stat-label">Salas</div>\n            </div>\n            \n            <div class="facility-stat">\n              <div class="stat-number" id="profCount-${facility.id}">...</div>\n              <div class="stat-label">Profissionais</div>\n            </div>\n            \n            <div class="facility-stat">\n              <div class="stat-number" id="patientCount-${facility.id}">...</div>\n              <div class="stat-label">Pacientes</div>\n            </div>\n          </div>\n          \n          <div class="facility-footer">\n            <div class="facility-status">\n              <span class="status ${facility.isActive ? \'status-active\' : \'status-inactive\'}">\n                ${facility.isActive ? \'Ativa\' : \'Inativa\'}\n              </span>\n            </div>\n            \n            <div class="facility-actions">\n              <button class="button button-outline view-facility" data-id="${facility.id}">Ver detalhes</button>\n            </div>\n          </div>\n        `;\n        \n        facilitiesGrid.insertBefore(facilityCard, addCard);\n        \n        // Carregar contagens\n        loadFacilityStats(facility.id);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => viewFacility(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Renderizar tabela de unidades\n    function renderFacilitiesTable() {\n      // Se não há unidades\n      if (facilities.length === 0) {\n        facilitiesTableBody.innerHTML = `\n          <tr>\n            <td colspan="6" class="text-center">Nenhuma unidade encontrada</td>\n          </tr>\n        `;\n        return;\n      }\n      \n      // Limpar tabela\n      facilitiesTableBody.innerHTML = \'\';\n      \n      // Adicionar linhas\n      facilities.forEach(facility => {\n        const row = document.createElement(\'tr\');\n        \n        row.innerHTML = `\n          <td>${facility.name}</td>\n          <td>${facility.address}, ${facility.city}</td>\n          <td>${facility.phone}</td>\n          <td id="table-roomCount-${facility.id}">Carregando...</td>\n          <td><span class="status ${facility.isActive ? \'status-active\' : \'status-inactive\'}">${facility.isActive ? \'Ativa\' : \'Inativa\'}</span></td>\n          <td>\n            <button class="action-button view-facility" data-id="${facility.id}">Visualizar</button>\n            <button class="action-button edit-facility" data-id="${facility.id}">Editar</button>\n          </td>\n        `;\n        \n        facilitiesTableBody.appendChild(row);\n        \n        // Carregar contagem de salas\n        loadRoomCount(facility.id);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => viewFacility(parseInt(button.dataset.id)));\n      });\n      \n      document.querySelectorAll(\'.edit-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => editFacility(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Carregar estatísticas de uma unidade\n    async function loadFacilityStats(facilityId) {\n      try {\n        // Carregar contagem de salas\n        const roomsResponse = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (roomsResponse.ok) {\n          const rooms = await roomsResponse.json();\n          document.getElementById(`roomCount-${facilityId}`).textContent = rooms.length;\n          document.getElementById(`table-roomCount-${facilityId}`).textContent = rooms.length;\n        }\n        \n        // Carregar contagem de profissionais\n        const profsResponse = await fetch(`/api/professionals?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (profsResponse.ok) {\n          const professionals = await profsResponse.json();\n          document.getElementById(`profCount-${facilityId}`).textContent = professionals.length;\n        }\n        \n        // Carregar contagem de pacientes\n        const patientsResponse = await fetch(`/api/patients?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (patientsResponse.ok) {\n          const patients = await patientsResponse.json();\n          document.getElementById(`patientCount-${facilityId}`).textContent = patients.length;\n        }\n      } catch (error) {\n        console.error(`Erro ao carregar estatísticas da unidade ${facilityId}:`, error);\n      }\n    }\n    \n    // Carregar contagem de salas\n    async function loadRoomCount(facilityId) {\n      try {\n        const response = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (response.ok) {\n          const rooms = await response.json();\n          document.getElementById(`table-roomCount-${facilityId}`).textContent = rooms.length;\n        }\n      } catch (error) {\n        console.error(`Erro ao carregar contagem de salas da unidade ${facilityId}:`, error);\n        document.getElementById(`table-roomCount-${facilityId}`).textContent = \'Erro\';\n      }\n    }\n    \n    // Filtrar unidades\n    function filterFacilities() {\n      const searchTerm = searchFacility.value.toLowerCase();\n      \n      if (!searchTerm) {\n        renderFacilitiesTable();\n        return;\n      }\n      \n      const filteredFacilities = facilities.filter(facility =>\n        facility.name.toLowerCase().includes(searchTerm) ||\n        facility.address.toLowerCase().includes(searchTerm) ||\n        facility.city.toLowerCase().includes(searchTerm) ||\n        facility.state.toLowerCase().includes(searchTerm)\n      );\n      \n      if (filteredFacilities.length === 0) {\n        facilitiesTableBody.innerHTML = `\n          <tr>\n            <td colspan="6" class="text-center">Nenhuma unidade encontrada com o termo "${searchTerm}"</td>\n          </tr>\n        `;\n        return;\n      }\n      \n      facilitiesTableBody.innerHTML = \'\';\n      \n      filteredFacilities.forEach(facility => {\n        const row = document.createElement(\'tr\');\n        \n        row.innerHTML = `\n          <td>${facility.name}</td>\n          <td>${facility.address}, ${facility.city}</td>\n          <td>${facility.phone}</td>\n          <td id="table-roomCount-${facility.id}">Carregando...</td>\n          <td><span class="status ${facility.isActive ? \'status-active\' : \'status-inactive\'}">${facility.isActive ? \'Ativa\' : \'Inativa\'}</span></td>\n          <td>\n            <button class="action-button view-facility" data-id="${facility.id}">Visualizar</button>\n            <button class="action-button edit-facility" data-id="${facility.id}">Editar</button>\n          </td>\n        `;\n        \n        facilitiesTableBody.appendChild(row);\n        \n        // Carregar contagem de salas\n        loadRoomCount(facility.id);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => viewFacility(parseInt(button.dataset.id)));\n      });\n      \n      document.querySelectorAll(\'.edit-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => editFacility(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Abrir modal para adicionar unidade\n    function openAddFacilityModal() {\n      modalTitle.textContent = \'Adicionar Unidade\';\n      facilityForm.reset();\n      facilityIdInput.value = \'\';\n      document.getElementById(\'isActive\').checked = true;\n      \n      facilityModal.classList.add(\'active\');\n    }\n    \n    // Abrir modal para editar unidade\n    function editFacility(facilityId) {\n      const facility = facilities.find(f => f.id === facilityId);\n      \n      if (!facility) {\n        alert(\'Unidade não encontrada\');\n        return;\n      }\n      \n      modalTitle.textContent = \'Editar Unidade\';\n      \n      // Preencher formulário\n      facilityIdInput.value = facility.id;\n      document.getElementById(\'name\').value = facility.name;\n      document.getElementById(\'address\').value = facility.address;\n      document.getElementById(\'city\').value = facility.city;\n      document.getElementById(\'state\').value = facility.state;\n      document.getElementById(\'zipCode\').value = facility.zipCode;\n      document.getElementById(\'phone\').value = facility.phone;\n      document.getElementById(\'email\').value = facility.email || \'\';\n      document.getElementById(\'description\').value = facility.description || \'\';\n      document.getElementById(\'openingHours\').value = facility.openingHours || \'\';\n      document.getElementById(\'isActive\').checked = facility.isActive;\n      \n      facilityModal.classList.add(\'active\');\n    }\n    \n    // Editar a partir da visualização\n    function editFacilityFromView() {\n      if (currentFacility) {\n        closeViewFacilityModal();\n        editFacility(currentFacility.id);\n      }\n    }\n    \n    // Fechar modal de unidade\n    function closeFacilityModal() {\n      facilityModal.classList.remove(\'active\');\n    }\n    \n    // Salvar unidade\n    async function saveFacility() {\n      try {\n        // Validação\n        const nameInput = document.getElementById(\'name\');\n        const addressInput = document.getElementById(\'address\');\n        const cityInput = document.getElementById(\'city\');\n        const stateInput = document.getElementById(\'state\');\n        const zipCodeInput = document.getElementById(\'zipCode\');\n        const phoneInput = document.getElementById(\'phone\');\n        \n        if (!nameInput.value) {\n          alert(\'Por favor, insira o nome da unidade\');\n          nameInput.focus();\n          return;\n        }\n        \n        if (!addressInput.value) {\n          alert(\'Por favor, insira o endereço da unidade\');\n          addressInput.focus();\n          return;\n        }\n        \n        if (!cityInput.value) {\n          alert(\'Por favor, insira a cidade da unidade\');\n          cityInput.focus();\n          return;\n        }\n        \n        if (!stateInput.value) {\n          alert(\'Por favor, insira o estado da unidade\');\n          stateInput.focus();\n          return;\n        }\n        \n        if (!zipCodeInput.value) {\n          alert(\'Por favor, insira o CEP da unidade\');\n          zipCodeInput.focus();\n          return;\n        }\n        \n        if (!phoneInput.value) {\n          alert(\'Por favor, insira o telefone da unidade\');\n          phoneInput.focus();\n          return;\n        }\n        \n        // Preparar dados da unidade\n        const facilityData = {\n          name: nameInput.value,\n          address: addressInput.value,\n          city: cityInput.value,\n          state: stateInput.value,\n          zipCode: zipCodeInput.value,\n          phone: phoneInput.value,\n          email: document.getElementById(\'email\').value,\n          description: document.getElementById(\'description\').value,\n          openingHours: document.getElementById(\'openingHours\').value,\n          isActive: document.getElementById(\'isActive\').checked\n        };\n        \n        const facilityId = facilityIdInput.value;\n        let response;\n        \n        if (facilityId) {\n          // Editar unidade existente\n          response = await fetch(`/api/facilities/${facilityId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(facilityData)\n          });\n        } else {\n          // Adicionar nova unidade\n          response = await fetch(\'/api/facilities\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(facilityData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(errorText || \'Erro ao salvar unidade\');\n        }\n        \n        // Fechar modal e recarregar unidades\n        closeFacilityModal();\n        loadFacilities();\n        \n        alert(facilityId ? \'Unidade atualizada com sucesso!\' : \'Unidade adicionada com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar unidade:\', error);\n        alert(`Erro ao salvar unidade: ${error.message}`);\n      }\n    }\n    \n    // Visualizar unidade\n    async function viewFacility(facilityId) {\n      try {\n        const response = await fetch(`/api/facilities/${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar detalhes da unidade\');\n        }\n        \n        currentFacility = await response.json();\n        \n        document.getElementById(\'viewFacilityName\').textContent = currentFacility.name;\n        document.getElementById(\'viewFacilityAddress\').textContent = `${currentFacility.address}, ${currentFacility.city} - ${currentFacility.state}, ${currentFacility.zipCode}`;\n        document.getElementById(\'viewFacilityPhone\').textContent = currentFacility.phone;\n        document.getElementById(\'viewFacilityEmail\').textContent = currentFacility.email || \'Não informado\';\n        document.getElementById(\'viewFacilityHours\').textContent = currentFacility.openingHours || \'Não informado\';\n        document.getElementById(\'viewFacilityStatus\').innerHTML = `<span class="status ${currentFacility.isActive ? \'status-active\' : \'status-inactive\'}">${currentFacility.isActive ? \'Ativa\' : \'Inativa\'}</span>`;\n        document.getElementById(\'viewFacilityDescription\').textContent = currentFacility.description || \'Sem descrição\';\n        \n        // Carregar salas\n        loadRooms(currentFacility.id);\n        \n        // Carregar estatísticas\n        loadDetailedStats(currentFacility.id);\n        \n        // Mostrar primeira aba\n        switchTab(\'details\');\n        \n        // Exibir modal\n        viewFacilityModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar unidade:\', error);\n        alert(\'Erro ao carregar detalhes da unidade. Tente novamente.\');\n      }\n    }\n    \n    // Carregar salas de uma unidade\n    async function loadRooms(facilityId) {\n      try {\n        const response = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar salas\');\n        }\n        \n        const rooms = await response.json();\n        const roomsList = document.getElementById(\'roomsList\');\n        \n        if (rooms.length === 0) {\n          roomsList.innerHTML = `\n            <div class="empty-state">\n              <div class="empty-icon">🔍</div>\n              <div class="empty-text">Nenhuma sala encontrada</div>\n            </div>\n          `;\n          return;\n        }\n        \n        roomsList.innerHTML = \'\';\n        \n        // Criar grid de salas\n        const roomGrid = document.createElement(\'div\');\n        roomGrid.className = \'room-grid\';\n        \n        rooms.forEach(room => {\n          const roomCard = document.createElement(\'div\');\n          roomCard.className = \'room-card\';\n          roomCard.innerHTML = `\n            <div class="room-card-header">\n              <div class="room-card-title">${room.name}</div>\n              <div class="room-card-capacity">Capacidade: ${room.capacity || 1}</div>\n            </div>\n            \n            <div class="room-card-detail">\n              <div class="room-card-label">Tipo:</div>\n              <div>${translateRoomType(room.type)}</div>\n            </div>\n            \n            <div class="room-card-detail">\n              <div class="room-card-label">Andar:</div>\n              <div>${room.floor || \'Não informado\'}</div>\n            </div>\n            \n            <div class="room-card-detail">\n              <div class="room-card-label">Status:</div>\n              <div>${room.isActive ? \'Ativa\' : \'Inativa\'}</div>\n            </div>\n            \n            <div class="room-card-footer">\n              <button class="action-button edit-room" data-id="${room.id}">Editar</button>\n              <button class="action-button delete delete-room" data-id="${room.id}">Excluir</button>\n            </div>\n          `;\n          \n          roomGrid.appendChild(roomCard);\n        });\n        \n        roomsList.appendChild(roomGrid);\n        \n        // Adicionar event listeners\n        document.querySelectorAll(\'.edit-room\').forEach(button => {\n          button.addEventListener(\'click\', () => editRoom(parseInt(button.dataset.id)));\n        });\n        \n        document.querySelectorAll(\'.delete-room\').forEach(button => {\n          button.addEventListener(\'click\', () => deleteRoom(parseInt(button.dataset.id)));\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar salas:\', error);\n        document.getElementById(\'roomsList\').innerHTML = `\n          <div class="empty-state">\n            <div class="empty-icon">❌</div>\n            <div class="empty-text">Erro ao carregar salas</div>\n          </div>\n        `;\n      }\n    }\n    \n    // Traduzir tipo de sala\n    function translateRoomType(type) {\n      const translations = {\n        \'therapy\': \'Terapia\',\n        \'evaluation\': \'Avaliação\',\n        \'group\': \'Grupo\',\n        \'sensory\': \'Sensorial\',\n        \'meeting\': \'Reunião\',\n        \'administration\': \'Administração\',\n        \'other\': \'Outro\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Carregar estatísticas detalhadas\n    async function loadDetailedStats(facilityId) {\n      try {\n        // Carregar contagem de salas\n        const roomsResponse = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (roomsResponse.ok) {\n          const rooms = await roomsResponse.json();\n          document.getElementById(\'viewFacilityRoomCount\').textContent = rooms.length;\n        }\n        \n        // Carregar contagem de profissionais\n        const profsResponse = await fetch(`/api/professionals?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (profsResponse.ok) {\n          const professionals = await profsResponse.json();\n          document.getElementById(\'viewFacilityProfessionalCount\').textContent = professionals.length;\n        }\n        \n        // Carregar contagem de pacientes\n        const patientsResponse = await fetch(`/api/patients?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (patientsResponse.ok) {\n          const patients = await patientsResponse.json();\n          document.getElementById(\'viewFacilityPatientCount\').textContent = patients.length;\n        }\n        \n        // Carregar contagem de agendamentos\n        const appointmentsResponse = await fetch(`/api/appointments?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (appointmentsResponse.ok) {\n          const appointments = await appointmentsResponse.json();\n          document.getElementById(\'viewFacilityAppointmentCount\').textContent = appointments.length;\n        }\n      } catch (error) {\n        console.error(`Erro ao carregar estatísticas detalhadas da unidade ${facilityId}:`, error);\n      }\n    }\n    \n    // Fechar modal de visualização\n    function closeViewFacilityModal() {\n      viewFacilityModal.classList.remove(\'active\');\n    }\n    \n    // Abrir modal para adicionar sala\n    function openAddRoomModal() {\n      if (!currentFacility) {\n        alert(\'Erro: Nenhuma unidade selecionada\');\n        return;\n      }\n      \n      roomModalTitle.textContent = \'Adicionar Sala\';\n      roomForm.reset();\n      roomIdInput.value = \'\';\n      roomFacilityIdInput.value = currentFacility.id;\n      document.getElementById(\'roomIsActive\').checked = true;\n      \n      roomModal.classList.add(\'active\');\n    }\n    \n    // Abrir modal para editar sala\n    async function editRoom(roomId) {\n      try {\n        const response = await fetch(`/api/rooms/${roomId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar detalhes da sala\');\n        }\n        \n        const room = await response.json();\n        \n        roomModalTitle.textContent = \'Editar Sala\';\n        \n        // Preencher formulário\n        roomIdInput.value = room.id;\n        roomFacilityIdInput.value = room.facilityId;\n        document.getElementById(\'roomName\').value = room.name;\n        document.getElementById(\'roomCapacity\').value = room.capacity || 1;\n        document.getElementById(\'roomType\').value = room.type || \'therapy\';\n        document.getElementById(\'roomFloor\').value = room.floor || \'\';\n        document.getElementById(\'roomDescription\').value = room.description || \'\';\n        document.getElementById(\'roomEquipment\').value = room.equipment || \'\';\n        document.getElementById(\'roomIsActive\').checked = room.isActive;\n        \n        roomModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar sala:\', error);\n        alert(\'Erro ao carregar detalhes da sala. Tente novamente.\');\n      }\n    }\n    \n    // Fechar modal de sala\n    function closeRoomModal() {\n      roomModal.classList.remove(\'active\');\n    }\n    \n    // Salvar sala\n    async function saveRoom() {\n      try {\n        // Validação\n        const nameInput = document.getElementById(\'roomName\');\n        \n        if (!nameInput.value) {\n          alert(\'Por favor, insira o nome da sala\');\n          nameInput.focus();\n          return;\n        }\n        \n        // Preparar dados da sala\n        const roomData = {\n          facilityId: parseInt(roomFacilityIdInput.value),\n          name: nameInput.value,\n          capacity: parseInt(document.getElementById(\'roomCapacity\').value) || 1,\n          type: document.getElementById(\'roomType\').value,\n          floor: document.getElementById(\'roomFloor\').value,\n          description: document.getElementById(\'roomDescription\').value,\n          equipment: document.getElementById(\'roomEquipment\').value,\n          isActive: document.getElementById(\'roomIsActive\').checked\n        };\n        \n        const roomId = roomIdInput.value;\n        let response;\n        \n        if (roomId) {\n          // Editar sala existente\n          response = await fetch(`/api/rooms/${roomId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(roomData)\n          });\n        } else {\n          // Adicionar nova sala\n          response = await fetch(\'/api/rooms\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(roomData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(errorText || \'Erro ao salvar sala\');\n        }\n        \n        // Fechar modal e recarregar salas\n        closeRoomModal();\n        loadRooms(currentFacility.id);\n        \n        alert(roomId ? \'Sala atualizada com sucesso!\' : \'Sala adicionada com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar sala:\', error);\n        alert(`Erro ao salvar sala: ${error.message}`);\n      }\n    }\n    \n    // Excluir sala\n    async function deleteRoom(roomId) {\n      if (!confirm(\'Tem certeza que deseja excluir esta sala?\')) {\n        return;\n      }\n      \n      try {\n        const response = await fetch(`/api/rooms/${roomId}`, {\n          method: \'DELETE\',\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao excluir sala\');\n        }\n        \n        // Recarregar salas\n        loadRooms(currentFacility.id);\n        \n        alert(\'Sala excluída com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao excluir sala:\', error);\n        alert(`Erro ao excluir sala: ${error.message}`);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n  </script>\n', PosixPath('client/public/facilities.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 92517d33acf06d957d363d496f158649089930e1ba27dcd5f8ec70b40637bd2e1399e4db786be1730842e307b6c795acc9290f5d7e60f1213f65db77bc79f2c1_0
2025-05-07 18:31:35,209 - semgrep.rule_match - DEBUG - match_key = ('\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', () => {\n      checkAuth();\n      setupEventListeners();\n      loadFacilities();\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const facilitiesGrid = document.getElementById(\'facilitiesGrid\');\n    const facilitiesTableBody = document.getElementById(\'facilitiesTableBody\');\n    const searchFacility = document.getElementById(\'searchFacility\');\n    const addFacilityCard = document.getElementById(\'addFacilityCard\');\n    \n    // Modal Facility\n    const facilityModal = document.getElementById(\'facilityModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const facilityForm = document.getElementById(\'facilityForm\');\n    const facilityIdInput = document.getElementById(\'facilityId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    \n    // Modal View Facility\n    const viewFacilityModal = document.getElementById(\'viewFacilityModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const closeDetailButton = document.getElementById(\'closeDetailButton\');\n    const editFacilityButton = document.getElementById(\'editFacilityButton\');\n    const detailsTab = document.getElementById(\'detailsTab\');\n    const roomsTab = document.getElementById(\'roomsTab\');\n    const statsTab = document.getElementById(\'statsTab\');\n    const detailsTabContent = document.getElementById(\'detailsTabContent\');\n    const roomsTabContent = document.getElementById(\'roomsTabContent\');\n    const statsTabContent = document.getElementById(\'statsTabContent\');\n    const addRoomButton = document.getElementById(\'addRoomButton\');\n    \n    // Modal Room\n    const roomModal = document.getElementById(\'roomModal\');\n    const roomModalTitle = document.getElementById(\'roomModalTitle\');\n    const roomForm = document.getElementById(\'roomForm\');\n    const roomIdInput = document.getElementById(\'roomId\');\n    const roomFacilityIdInput = document.getElementById(\'roomFacilityId\');\n    const closeRoomModal = document.getElementById(\'closeRoomModal\');\n    const cancelRoomButton = document.getElementById(\'cancelRoomButton\');\n    const saveRoomButton = document.getElementById(\'saveRoomButton\');\n    \n    // Variáveis globais\n    let currentUser = null;\n    let facilities = [];\n    let currentFacility = null;\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        currentUser = await response.json();\n        displayUserData(currentUser);\n        \n        // Configurar permissões baseadas no papel do usuário\n        if (currentUser.role !== \'admin\') {\n          addFacilityCard.style.display = \'none\';\n        }\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Pesquisar\n      searchFacility.addEventListener(\'input\', filterFacilities);\n      \n      // Adicionar unidade\n      addFacilityCard.addEventListener(\'click\', openAddFacilityModal);\n      \n      // Formulário de unidade\n      closeModal.addEventListener(\'click\', closeFacilityModal);\n      cancelButton.addEventListener(\'click\', closeFacilityModal);\n      saveButton.addEventListener(\'click\', saveFacility);\n      \n      // Modal de background\n      facilityModal.addEventListener(\'click\', function(e) {\n        if (e.target === facilityModal) {\n          closeFacilityModal();\n        }\n      });\n      \n      // Modal de visualização\n      closeViewModal.addEventListener(\'click\', closeViewFacilityModal);\n      closeDetailButton.addEventListener(\'click\', closeViewFacilityModal);\n      editFacilityButton.addEventListener(\'click\', editFacilityFromView);\n      \n      viewFacilityModal.addEventListener(\'click\', function(e) {\n        if (e.target === viewFacilityModal) {\n          closeViewFacilityModal();\n        }\n      });\n      \n      // Tabs\n      detailsTab.addEventListener(\'click\', () => switchTab(\'details\'));\n      roomsTab.addEventListener(\'click\', () => switchTab(\'rooms\'));\n      statsTab.addEventListener(\'click\', () => switchTab(\'stats\'));\n      \n      // Adicionar sala\n      addRoomButton.addEventListener(\'click\', openAddRoomModal);\n      \n      // Formulário de sala\n      closeRoomModal.addEventListener(\'click\', closeRoomModal);\n      cancelRoomButton.addEventListener(\'click\', closeRoomModal);\n      saveRoomButton.addEventListener(\'click\', saveRoom);\n      \n      roomModal.addEventListener(\'click\', function(e) {\n        if (e.target === roomModal) {\n          closeRoomModal();\n        }\n      });\n    }\n    \n    // Alternar entre as abas\n    function switchTab(tab) {\n      // Remover classe ativa de todas as abas\n      detailsTab.classList.remove(\'active\');\n      roomsTab.classList.remove(\'active\');\n      statsTab.classList.remove(\'active\');\n      \n      detailsTabContent.classList.remove(\'active\');\n      roomsTabContent.classList.remove(\'active\');\n      statsTabContent.classList.remove(\'active\');\n      \n      // Adicionar classe ativa à aba clicada\n      if (tab === \'details\') {\n        detailsTab.classList.add(\'active\');\n        detailsTabContent.classList.add(\'active\');\n      } else if (tab === \'rooms\') {\n        roomsTab.classList.add(\'active\');\n        roomsTabContent.classList.add(\'active\');\n      } else if (tab === \'stats\') {\n        statsTab.classList.add(\'active\');\n        statsTabContent.classList.add(\'active\');\n      }\n    }\n    \n    // Carregar unidades\n    async function loadFacilities() {\n      try {\n        const response = await fetch(\'/api/facilities\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar unidades\');\n        }\n        \n        facilities = await response.json();\n        renderFacilitiesGrid();\n        renderFacilitiesTable();\n      } catch (error) {\n        console.error(\'Erro ao carregar unidades:\', error);\n        facilitiesTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">Erro ao carregar unidades. Tente novamente mais tarde.</td>\n          </tr>\n        `;\n      }\n    }\n    \n    // Renderizar grid de unidades\n    function renderFacilitiesGrid() {\n      // Limpar grid, mantendo o card de adicionar\n      const addCard = document.getElementById(\'addFacilityCard\');\n      facilitiesGrid.innerHTML = \'\';\n      facilitiesGrid.appendChild(addCard);\n      \n      // Se não há unidades\n      if (facilities.length === 0) {\n        const emptyCard = document.createElement(\'div\');\n        emptyCard.className = \'empty-state\';\n        emptyCard.innerHTML = `\n          <div class="empty-icon">🏥</div>\n          <div class="empty-text">Nenhuma unidade encontrada</div>\n        `;\n        facilitiesGrid.insertBefore(emptyCard, addCard);\n        return;\n      }\n      \n      // Mostrar no máximo 3 unidades no grid\n      const displayFacilities = facilities.slice(0, 3);\n      \n      // Adicionar cards de unidades\n      displayFacilities.forEach(facility => {\n        const facilityCard = document.createElement(\'div\');\n        facilityCard.className = \'facility-card\';\n        facilityCard.innerHTML = `\n          <div class="facility-header">\n            <div>\n              <h3 class="facility-name">${facility.name}</h3>\n              <p class="facility-address">${facility.address}, ${facility.city} - ${facility.state}</p>\n            </div>\n          </div>\n          \n          <div class="facility-phone">\n            <span class="facility-icon">📞</span> ${facility.phone}\n          </div>\n          \n          <div class="facility-email">\n            <span class="facility-icon">✉️</span> ${facility.email || \'Não informado\'}\n          </div>\n          \n          <div class="facility-stats">\n            <div class="facility-stat">\n              <div class="stat-number" id="roomCount-${facility.id}">...</div>\n              <div class="stat-label">Salas</div>\n            </div>\n            \n            <div class="facility-stat">\n              <div class="stat-number" id="profCount-${facility.id}">...</div>\n              <div class="stat-label">Profissionais</div>\n            </div>\n            \n            <div class="facility-stat">\n              <div class="stat-number" id="patientCount-${facility.id}">...</div>\n              <div class="stat-label">Pacientes</div>\n            </div>\n          </div>\n          \n          <div class="facility-footer">\n            <div class="facility-status">\n              <span class="status ${facility.isActive ? \'status-active\' : \'status-inactive\'}">\n                ${facility.isActive ? \'Ativa\' : \'Inativa\'}\n              </span>\n            </div>\n            \n            <div class="facility-actions">\n              <button class="button button-outline view-facility" data-id="${facility.id}">Ver detalhes</button>\n            </div>\n          </div>\n        `;\n        \n        facilitiesGrid.insertBefore(facilityCard, addCard);\n        \n        // Carregar contagens\n        loadFacilityStats(facility.id);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => viewFacility(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Renderizar tabela de unidades\n    function renderFacilitiesTable() {\n      // Se não há unidades\n      if (facilities.length === 0) {\n        facilitiesTableBody.innerHTML = `\n          <tr>\n            <td colspan="6" class="text-center">Nenhuma unidade encontrada</td>\n          </tr>\n        `;\n        return;\n      }\n      \n      // Limpar tabela\n      facilitiesTableBody.innerHTML = \'\';\n      \n      // Adicionar linhas\n      facilities.forEach(facility => {\n        const row = document.createElement(\'tr\');\n        \n        row.innerHTML = `\n          <td>${facility.name}</td>\n          <td>${facility.address}, ${facility.city}</td>\n          <td>${facility.phone}</td>\n          <td id="table-roomCount-${facility.id}">Carregando...</td>\n          <td><span class="status ${facility.isActive ? \'status-active\' : \'status-inactive\'}">${facility.isActive ? \'Ativa\' : \'Inativa\'}</span></td>\n          <td>\n            <button class="action-button view-facility" data-id="${facility.id}">Visualizar</button>\n            <button class="action-button edit-facility" data-id="${facility.id}">Editar</button>\n          </td>\n        `;\n        \n        facilitiesTableBody.appendChild(row);\n        \n        // Carregar contagem de salas\n        loadRoomCount(facility.id);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => viewFacility(parseInt(button.dataset.id)));\n      });\n      \n      document.querySelectorAll(\'.edit-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => editFacility(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Carregar estatísticas de uma unidade\n    async function loadFacilityStats(facilityId) {\n      try {\n        // Carregar contagem de salas\n        const roomsResponse = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (roomsResponse.ok) {\n          const rooms = await roomsResponse.json();\n          document.getElementById(`roomCount-${facilityId}`).textContent = rooms.length;\n          document.getElementById(`table-roomCount-${facilityId}`).textContent = rooms.length;\n        }\n        \n        // Carregar contagem de profissionais\n        const profsResponse = await fetch(`/api/professionals?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (profsResponse.ok) {\n          const professionals = await profsResponse.json();\n          document.getElementById(`profCount-${facilityId}`).textContent = professionals.length;\n        }\n        \n        // Carregar contagem de pacientes\n        const patientsResponse = await fetch(`/api/patients?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (patientsResponse.ok) {\n          const patients = await patientsResponse.json();\n          document.getElementById(`patientCount-${facilityId}`).textContent = patients.length;\n        }\n      } catch (error) {\n        console.error(`Erro ao carregar estatísticas da unidade ${facilityId}:`, error);\n      }\n    }\n    \n    // Carregar contagem de salas\n    async function loadRoomCount(facilityId) {\n      try {\n        const response = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (response.ok) {\n          const rooms = await response.json();\n          document.getElementById(`table-roomCount-${facilityId}`).textContent = rooms.length;\n        }\n      } catch (error) {\n        console.error(`Erro ao carregar contagem de salas da unidade ${facilityId}:`, error);\n        document.getElementById(`table-roomCount-${facilityId}`).textContent = \'Erro\';\n      }\n    }\n    \n    // Filtrar unidades\n    function filterFacilities() {\n      const searchTerm = searchFacility.value.toLowerCase();\n      \n      if (!searchTerm) {\n        renderFacilitiesTable();\n        return;\n      }\n      \n      const filteredFacilities = facilities.filter(facility =>\n        facility.name.toLowerCase().includes(searchTerm) ||\n        facility.address.toLowerCase().includes(searchTerm) ||\n        facility.city.toLowerCase().includes(searchTerm) ||\n        facility.state.toLowerCase().includes(searchTerm)\n      );\n      \n      if (filteredFacilities.length === 0) {\n        facilitiesTableBody.innerHTML = `\n          <tr>\n            <td colspan="6" class="text-center">Nenhuma unidade encontrada com o termo "${searchTerm}"</td>\n          </tr>\n        `;\n        return;\n      }\n      \n      facilitiesTableBody.innerHTML = \'\';\n      \n      filteredFacilities.forEach(facility => {\n        const row = document.createElement(\'tr\');\n        \n        row.innerHTML = `\n          <td>${facility.name}</td>\n          <td>${facility.address}, ${facility.city}</td>\n          <td>${facility.phone}</td>\n          <td id="table-roomCount-${facility.id}">Carregando...</td>\n          <td><span class="status ${facility.isActive ? \'status-active\' : \'status-inactive\'}">${facility.isActive ? \'Ativa\' : \'Inativa\'}</span></td>\n          <td>\n            <button class="action-button view-facility" data-id="${facility.id}">Visualizar</button>\n            <button class="action-button edit-facility" data-id="${facility.id}">Editar</button>\n          </td>\n        `;\n        \n        facilitiesTableBody.appendChild(row);\n        \n        // Carregar contagem de salas\n        loadRoomCount(facility.id);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => viewFacility(parseInt(button.dataset.id)));\n      });\n      \n      document.querySelectorAll(\'.edit-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => editFacility(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Abrir modal para adicionar unidade\n    function openAddFacilityModal() {\n      modalTitle.textContent = \'Adicionar Unidade\';\n      facilityForm.reset();\n      facilityIdInput.value = \'\';\n      document.getElementById(\'isActive\').checked = true;\n      \n      facilityModal.classList.add(\'active\');\n    }\n    \n    // Abrir modal para editar unidade\n    function editFacility(facilityId) {\n      const facility = facilities.find(f => f.id === facilityId);\n      \n      if (!facility) {\n        alert(\'Unidade não encontrada\');\n        return;\n      }\n      \n      modalTitle.textContent = \'Editar Unidade\';\n      \n      // Preencher formulário\n      facilityIdInput.value = facility.id;\n      document.getElementById(\'name\').value = facility.name;\n      document.getElementById(\'address\').value = facility.address;\n      document.getElementById(\'city\').value = facility.city;\n      document.getElementById(\'state\').value = facility.state;\n      document.getElementById(\'zipCode\').value = facility.zipCode;\n      document.getElementById(\'phone\').value = facility.phone;\n      document.getElementById(\'email\').value = facility.email || \'\';\n      document.getElementById(\'description\').value = facility.description || \'\';\n      document.getElementById(\'openingHours\').value = facility.openingHours || \'\';\n      document.getElementById(\'isActive\').checked = facility.isActive;\n      \n      facilityModal.classList.add(\'active\');\n    }\n    \n    // Editar a partir da visualização\n    function editFacilityFromView() {\n      if (currentFacility) {\n        closeViewFacilityModal();\n        editFacility(currentFacility.id);\n      }\n    }\n    \n    // Fechar modal de unidade\n    function closeFacilityModal() {\n      facilityModal.classList.remove(\'active\');\n    }\n    \n    // Salvar unidade\n    async function saveFacility() {\n      try {\n        // Validação\n        const nameInput = document.getElementById(\'name\');\n        const addressInput = document.getElementById(\'address\');\n        const cityInput = document.getElementById(\'city\');\n        const stateInput = document.getElementById(\'state\');\n        const zipCodeInput = document.getElementById(\'zipCode\');\n        const phoneInput = document.getElementById(\'phone\');\n        \n        if (!nameInput.value) {\n          alert(\'Por favor, insira o nome da unidade\');\n          nameInput.focus();\n          return;\n        }\n        \n        if (!addressInput.value) {\n          alert(\'Por favor, insira o endereço da unidade\');\n          addressInput.focus();\n          return;\n        }\n        \n        if (!cityInput.value) {\n          alert(\'Por favor, insira a cidade da unidade\');\n          cityInput.focus();\n          return;\n        }\n        \n        if (!stateInput.value) {\n          alert(\'Por favor, insira o estado da unidade\');\n          stateInput.focus();\n          return;\n        }\n        \n        if (!zipCodeInput.value) {\n          alert(\'Por favor, insira o CEP da unidade\');\n          zipCodeInput.focus();\n          return;\n        }\n        \n        if (!phoneInput.value) {\n          alert(\'Por favor, insira o telefone da unidade\');\n          phoneInput.focus();\n          return;\n        }\n        \n        // Preparar dados da unidade\n        const facilityData = {\n          name: nameInput.value,\n          address: addressInput.value,\n          city: cityInput.value,\n          state: stateInput.value,\n          zipCode: zipCodeInput.value,\n          phone: phoneInput.value,\n          email: document.getElementById(\'email\').value,\n          description: document.getElementById(\'description\').value,\n          openingHours: document.getElementById(\'openingHours\').value,\n          isActive: document.getElementById(\'isActive\').checked\n        };\n        \n        const facilityId = facilityIdInput.value;\n        let response;\n        \n        if (facilityId) {\n          // Editar unidade existente\n          response = await fetch(`/api/facilities/${facilityId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(facilityData)\n          });\n        } else {\n          // Adicionar nova unidade\n          response = await fetch(\'/api/facilities\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(facilityData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(errorText || \'Erro ao salvar unidade\');\n        }\n        \n        // Fechar modal e recarregar unidades\n        closeFacilityModal();\n        loadFacilities();\n        \n        alert(facilityId ? \'Unidade atualizada com sucesso!\' : \'Unidade adicionada com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar unidade:\', error);\n        alert(`Erro ao salvar unidade: ${error.message}`);\n      }\n    }\n    \n    // Visualizar unidade\n    async function viewFacility(facilityId) {\n      try {\n        const response = await fetch(`/api/facilities/${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar detalhes da unidade\');\n        }\n        \n        currentFacility = await response.json();\n        \n        document.getElementById(\'viewFacilityName\').textContent = currentFacility.name;\n        document.getElementById(\'viewFacilityAddress\').textContent = `${currentFacility.address}, ${currentFacility.city} - ${currentFacility.state}, ${currentFacility.zipCode}`;\n        document.getElementById(\'viewFacilityPhone\').textContent = currentFacility.phone;\n        document.getElementById(\'viewFacilityEmail\').textContent = currentFacility.email || \'Não informado\';\n        document.getElementById(\'viewFacilityHours\').textContent = currentFacility.openingHours || \'Não informado\';\n        document.getElementById(\'viewFacilityStatus\').innerHTML = `<span class="status ${currentFacility.isActive ? \'status-active\' : \'status-inactive\'}">${currentFacility.isActive ? \'Ativa\' : \'Inativa\'}</span>`;\n        document.getElementById(\'viewFacilityDescription\').textContent = currentFacility.description || \'Sem descrição\';\n        \n        // Carregar salas\n        loadRooms(currentFacility.id);\n        \n        // Carregar estatísticas\n        loadDetailedStats(currentFacility.id);\n        \n        // Mostrar primeira aba\n        switchTab(\'details\');\n        \n        // Exibir modal\n        viewFacilityModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar unidade:\', error);\n        alert(\'Erro ao carregar detalhes da unidade. Tente novamente.\');\n      }\n    }\n    \n    // Carregar salas de uma unidade\n    async function loadRooms(facilityId) {\n      try {\n        const response = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar salas\');\n        }\n        \n        const rooms = await response.json();\n        const roomsList = document.getElementById(\'roomsList\');\n        \n        if (rooms.length === 0) {\n          roomsList.innerHTML = `\n            <div class="empty-state">\n              <div class="empty-icon">🔍</div>\n              <div class="empty-text">Nenhuma sala encontrada</div>\n            </div>\n          `;\n          return;\n        }\n        \n        roomsList.innerHTML = \'\';\n        \n        // Criar grid de salas\n        const roomGrid = document.createElement(\'div\');\n        roomGrid.className = \'room-grid\';\n        \n        rooms.forEach(room => {\n          const roomCard = document.createElement(\'div\');\n          roomCard.className = \'room-card\';\n          roomCard.innerHTML = `\n            <div class="room-card-header">\n              <div class="room-card-title">${room.name}</div>\n              <div class="room-card-capacity">Capacidade: ${room.capacity || 1}</div>\n            </div>\n            \n            <div class="room-card-detail">\n              <div class="room-card-label">Tipo:</div>\n              <div>${translateRoomType(room.type)}</div>\n            </div>\n            \n            <div class="room-card-detail">\n              <div class="room-card-label">Andar:</div>\n              <div>${room.floor || \'Não informado\'}</div>\n            </div>\n            \n            <div class="room-card-detail">\n              <div class="room-card-label">Status:</div>\n              <div>${room.isActive ? \'Ativa\' : \'Inativa\'}</div>\n            </div>\n            \n            <div class="room-card-footer">\n              <button class="action-button edit-room" data-id="${room.id}">Editar</button>\n              <button class="action-button delete delete-room" data-id="${room.id}">Excluir</button>\n            </div>\n          `;\n          \n          roomGrid.appendChild(roomCard);\n        });\n        \n        roomsList.appendChild(roomGrid);\n        \n        // Adicionar event listeners\n        document.querySelectorAll(\'.edit-room\').forEach(button => {\n          button.addEventListener(\'click\', () => editRoom(parseInt(button.dataset.id)));\n        });\n        \n        document.querySelectorAll(\'.delete-room\').forEach(button => {\n          button.addEventListener(\'click\', () => deleteRoom(parseInt(button.dataset.id)));\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar salas:\', error);\n        document.getElementById(\'roomsList\').innerHTML = `\n          <div class="empty-state">\n            <div class="empty-icon">❌</div>\n            <div class="empty-text">Erro ao carregar salas</div>\n          </div>\n        `;\n      }\n    }\n    \n    // Traduzir tipo de sala\n    function translateRoomType(type) {\n      const translations = {\n        \'therapy\': \'Terapia\',\n        \'evaluation\': \'Avaliação\',\n        \'group\': \'Grupo\',\n        \'sensory\': \'Sensorial\',\n        \'meeting\': \'Reunião\',\n        \'administration\': \'Administração\',\n        \'other\': \'Outro\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Carregar estatísticas detalhadas\n    async function loadDetailedStats(facilityId) {\n      try {\n        // Carregar contagem de salas\n        const roomsResponse = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (roomsResponse.ok) {\n          const rooms = await roomsResponse.json();\n          document.getElementById(\'viewFacilityRoomCount\').textContent = rooms.length;\n        }\n        \n        // Carregar contagem de profissionais\n        const profsResponse = await fetch(`/api/professionals?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (profsResponse.ok) {\n          const professionals = await profsResponse.json();\n          document.getElementById(\'viewFacilityProfessionalCount\').textContent = professionals.length;\n        }\n        \n        // Carregar contagem de pacientes\n        const patientsResponse = await fetch(`/api/patients?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (patientsResponse.ok) {\n          const patients = await patientsResponse.json();\n          document.getElementById(\'viewFacilityPatientCount\').textContent = patients.length;\n        }\n        \n        // Carregar contagem de agendamentos\n        const appointmentsResponse = await fetch(`/api/appointments?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (appointmentsResponse.ok) {\n          const appointments = await appointmentsResponse.json();\n          document.getElementById(\'viewFacilityAppointmentCount\').textContent = appointments.length;\n        }\n      } catch (error) {\n        console.error(`Erro ao carregar estatísticas detalhadas da unidade ${facilityId}:`, error);\n      }\n    }\n    \n    // Fechar modal de visualização\n    function closeViewFacilityModal() {\n      viewFacilityModal.classList.remove(\'active\');\n    }\n    \n    // Abrir modal para adicionar sala\n    function openAddRoomModal() {\n      if (!currentFacility) {\n        alert(\'Erro: Nenhuma unidade selecionada\');\n        return;\n      }\n      \n      roomModalTitle.textContent = \'Adicionar Sala\';\n      roomForm.reset();\n      roomIdInput.value = \'\';\n      roomFacilityIdInput.value = currentFacility.id;\n      document.getElementById(\'roomIsActive\').checked = true;\n      \n      roomModal.classList.add(\'active\');\n    }\n    \n    // Abrir modal para editar sala\n    async function editRoom(roomId) {\n      try {\n        const response = await fetch(`/api/rooms/${roomId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar detalhes da sala\');\n        }\n        \n        const room = await response.json();\n        \n        roomModalTitle.textContent = \'Editar Sala\';\n        \n        // Preencher formulário\n        roomIdInput.value = room.id;\n        roomFacilityIdInput.value = room.facilityId;\n        document.getElementById(\'roomName\').value = room.name;\n        document.getElementById(\'roomCapacity\').value = room.capacity || 1;\n        document.getElementById(\'roomType\').value = room.type || \'therapy\';\n        document.getElementById(\'roomFloor\').value = room.floor || \'\';\n        document.getElementById(\'roomDescription\').value = room.description || \'\';\n        document.getElementById(\'roomEquipment\').value = room.equipment || \'\';\n        document.getElementById(\'roomIsActive\').checked = room.isActive;\n        \n        roomModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar sala:\', error);\n        alert(\'Erro ao carregar detalhes da sala. Tente novamente.\');\n      }\n    }\n    \n    // Fechar modal de sala\n    function closeRoomModal() {\n      roomModal.classList.remove(\'active\');\n    }\n    \n    // Salvar sala\n    async function saveRoom() {\n      try {\n        // Validação\n        const nameInput = document.getElementById(\'roomName\');\n        \n        if (!nameInput.value) {\n          alert(\'Por favor, insira o nome da sala\');\n          nameInput.focus();\n          return;\n        }\n        \n        // Preparar dados da sala\n        const roomData = {\n          facilityId: parseInt(roomFacilityIdInput.value),\n          name: nameInput.value,\n          capacity: parseInt(document.getElementById(\'roomCapacity\').value) || 1,\n          type: document.getElementById(\'roomType\').value,\n          floor: document.getElementById(\'roomFloor\').value,\n          description: document.getElementById(\'roomDescription\').value,\n          equipment: document.getElementById(\'roomEquipment\').value,\n          isActive: document.getElementById(\'roomIsActive\').checked\n        };\n        \n        const roomId = roomIdInput.value;\n        let response;\n        \n        if (roomId) {\n          // Editar sala existente\n          response = await fetch(`/api/rooms/${roomId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(roomData)\n          });\n        } else {\n          // Adicionar nova sala\n          response = await fetch(\'/api/rooms\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(roomData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(errorText || \'Erro ao salvar sala\');\n        }\n        \n        // Fechar modal e recarregar salas\n        closeRoomModal();\n        loadRooms(currentFacility.id);\n        \n        alert(roomId ? \'Sala atualizada com sucesso!\' : \'Sala adicionada com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar sala:\', error);\n        alert(`Erro ao salvar sala: ${error.message}`);\n      }\n    }\n    \n    // Excluir sala\n    async function deleteRoom(roomId) {\n      if (!confirm(\'Tem certeza que deseja excluir esta sala?\')) {\n        return;\n      }\n      \n      try {\n        const response = await fetch(`/api/rooms/${roomId}`, {\n          method: \'DELETE\',\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao excluir sala\');\n        }\n        \n        // Recarregar salas\n        loadRooms(currentFacility.id);\n        \n        alert(\'Sala excluída com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao excluir sala:\', error);\n        alert(`Erro ao excluir sala: ${error.message}`);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n   $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', () => {\n      checkAuth();\n      setupEventListeners();\n      loadFacilities();\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const facilitiesGrid = document.getElementById(\'facilitiesGrid\');\n    const facilitiesTableBody = document.getElementById(\'facilitiesTableBody\');\n    const searchFacility = document.getElementById(\'searchFacility\');\n    const addFacilityCard = document.getElementById(\'addFacilityCard\');\n    \n    // Modal Facility\n    const facilityModal = document.getElementById(\'facilityModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const facilityForm = document.getElementById(\'facilityForm\');\n    const facilityIdInput = document.getElementById(\'facilityId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    \n    // Modal View Facility\n    const viewFacilityModal = document.getElementById(\'viewFacilityModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const closeDetailButton = document.getElementById(\'closeDetailButton\');\n    const editFacilityButton = document.getElementById(\'editFacilityButton\');\n    const detailsTab = document.getElementById(\'detailsTab\');\n    const roomsTab = document.getElementById(\'roomsTab\');\n    const statsTab = document.getElementById(\'statsTab\');\n    const detailsTabContent = document.getElementById(\'detailsTabContent\');\n    const roomsTabContent = document.getElementById(\'roomsTabContent\');\n    const statsTabContent = document.getElementById(\'statsTabContent\');\n    const addRoomButton = document.getElementById(\'addRoomButton\');\n    \n    // Modal Room\n    const roomModal = document.getElementById(\'roomModal\');\n    const roomModalTitle = document.getElementById(\'roomModalTitle\');\n    const roomForm = document.getElementById(\'roomForm\');\n    const roomIdInput = document.getElementById(\'roomId\');\n    const roomFacilityIdInput = document.getElementById(\'roomFacilityId\');\n    const closeRoomModal = document.getElementById(\'closeRoomModal\');\n    const cancelRoomButton = document.getElementById(\'cancelRoomButton\');\n    const saveRoomButton = document.getElementById(\'saveRoomButton\');\n    \n    // Variáveis globais\n    let currentUser = null;\n    let facilities = [];\n    let currentFacility = null;\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        currentUser = await response.json();\n        displayUserData(currentUser);\n        \n        // Configurar permissões baseadas no papel do usuário\n        if (currentUser.role !== \'admin\') {\n          addFacilityCard.style.display = \'none\';\n        }\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Pesquisar\n      searchFacility.addEventListener(\'input\', filterFacilities);\n      \n      // Adicionar unidade\n      addFacilityCard.addEventListener(\'click\', openAddFacilityModal);\n      \n      // Formulário de unidade\n      closeModal.addEventListener(\'click\', closeFacilityModal);\n      cancelButton.addEventListener(\'click\', closeFacilityModal);\n      saveButton.addEventListener(\'click\', saveFacility);\n      \n      // Modal de background\n      facilityModal.addEventListener(\'click\', function(e) {\n        if (e.target === facilityModal) {\n          closeFacilityModal();\n        }\n      });\n      \n      // Modal de visualização\n      closeViewModal.addEventListener(\'click\', closeViewFacilityModal);\n      closeDetailButton.addEventListener(\'click\', closeViewFacilityModal);\n      editFacilityButton.addEventListener(\'click\', editFacilityFromView);\n      \n      viewFacilityModal.addEventListener(\'click\', function(e) {\n        if (e.target === viewFacilityModal) {\n          closeViewFacilityModal();\n        }\n      });\n      \n      // Tabs\n      detailsTab.addEventListener(\'click\', () => switchTab(\'details\'));\n      roomsTab.addEventListener(\'click\', () => switchTab(\'rooms\'));\n      statsTab.addEventListener(\'click\', () => switchTab(\'stats\'));\n      \n      // Adicionar sala\n      addRoomButton.addEventListener(\'click\', openAddRoomModal);\n      \n      // Formulário de sala\n      closeRoomModal.addEventListener(\'click\', closeRoomModal);\n      cancelRoomButton.addEventListener(\'click\', closeRoomModal);\n      saveRoomButton.addEventListener(\'click\', saveRoom);\n      \n      roomModal.addEventListener(\'click\', function(e) {\n        if (e.target === roomModal) {\n          closeRoomModal();\n        }\n      });\n    }\n    \n    // Alternar entre as abas\n    function switchTab(tab) {\n      // Remover classe ativa de todas as abas\n      detailsTab.classList.remove(\'active\');\n      roomsTab.classList.remove(\'active\');\n      statsTab.classList.remove(\'active\');\n      \n      detailsTabContent.classList.remove(\'active\');\n      roomsTabContent.classList.remove(\'active\');\n      statsTabContent.classList.remove(\'active\');\n      \n      // Adicionar classe ativa à aba clicada\n      if (tab === \'details\') {\n        detailsTab.classList.add(\'active\');\n        detailsTabContent.classList.add(\'active\');\n      } else if (tab === \'rooms\') {\n        roomsTab.classList.add(\'active\');\n        roomsTabContent.classList.add(\'active\');\n      } else if (tab === \'stats\') {\n        statsTab.classList.add(\'active\');\n        statsTabContent.classList.add(\'active\');\n      }\n    }\n    \n    // Carregar unidades\n    async function loadFacilities() {\n      try {\n        const response = await fetch(\'/api/facilities\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar unidades\');\n        }\n        \n        facilities = await response.json();\n        renderFacilitiesGrid();\n        renderFacilitiesTable();\n      } catch (error) {\n        console.error(\'Erro ao carregar unidades:\', error);\n        facilitiesTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">Erro ao carregar unidades. Tente novamente mais tarde.</td>\n          </tr>\n        `;\n      }\n    }\n    \n    // Renderizar grid de unidades\n    function renderFacilitiesGrid() {\n      // Limpar grid, mantendo o card de adicionar\n      const addCard = document.getElementById(\'addFacilityCard\');\n      facilitiesGrid.innerHTML = \'\';\n      facilitiesGrid.appendChild(addCard);\n      \n      // Se não há unidades\n      if (facilities.length === 0) {\n        const emptyCard = document.createElement(\'div\');\n        emptyCard.className = \'empty-state\';\n        emptyCard.innerHTML = `\n          <div class="empty-icon">🏥</div>\n          <div class="empty-text">Nenhuma unidade encontrada</div>\n        `;\n        facilitiesGrid.insertBefore(emptyCard, addCard);\n        return;\n      }\n      \n      // Mostrar no máximo 3 unidades no grid\n      const displayFacilities = facilities.slice(0, 3);\n      \n      // Adicionar cards de unidades\n      displayFacilities.forEach(facility => {\n        const facilityCard = document.createElement(\'div\');\n        facilityCard.className = \'facility-card\';\n        facilityCard.innerHTML = `\n          <div class="facility-header">\n            <div>\n              <h3 class="facility-name">${facility.name}</h3>\n              <p class="facility-address">${facility.address}, ${facility.city} - ${facility.state}</p>\n            </div>\n          </div>\n          \n          <div class="facility-phone">\n            <span class="facility-icon">📞</span> ${facility.phone}\n          </div>\n          \n          <div class="facility-email">\n            <span class="facility-icon">✉️</span> ${facility.email || \'Não informado\'}\n          </div>\n          \n          <div class="facility-stats">\n            <div class="facility-stat">\n              <div class="stat-number" id="roomCount-${facility.id}">...</div>\n              <div class="stat-label">Salas</div>\n            </div>\n            \n            <div class="facility-stat">\n              <div class="stat-number" id="profCount-${facility.id}">...</div>\n              <div class="stat-label">Profissionais</div>\n            </div>\n            \n            <div class="facility-stat">\n              <div class="stat-number" id="patientCount-${facility.id}">...</div>\n              <div class="stat-label">Pacientes</div>\n            </div>\n          </div>\n          \n          <div class="facility-footer">\n            <div class="facility-status">\n              <span class="status ${facility.isActive ? \'status-active\' : \'status-inactive\'}">\n                ${facility.isActive ? \'Ativa\' : \'Inativa\'}\n              </span>\n            </div>\n            \n            <div class="facility-actions">\n              <button class="button button-outline view-facility" data-id="${facility.id}">Ver detalhes</button>\n            </div>\n          </div>\n        `;\n        \n        facilitiesGrid.insertBefore(facilityCard, addCard);\n        \n        // Carregar contagens\n        loadFacilityStats(facility.id);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => viewFacility(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Renderizar tabela de unidades\n    function renderFacilitiesTable() {\n      // Se não há unidades\n      if (facilities.length === 0) {\n        facilitiesTableBody.innerHTML = `\n          <tr>\n            <td colspan="6" class="text-center">Nenhuma unidade encontrada</td>\n          </tr>\n        `;\n        return;\n      }\n      \n      // Limpar tabela\n      facilitiesTableBody.innerHTML = \'\';\n      \n      // Adicionar linhas\n      facilities.forEach(facility => {\n        const row = document.createElement(\'tr\');\n        \n        row.innerHTML = `\n          <td>${facility.name}</td>\n          <td>${facility.address}, ${facility.city}</td>\n          <td>${facility.phone}</td>\n          <td id="table-roomCount-${facility.id}">Carregando...</td>\n          <td><span class="status ${facility.isActive ? \'status-active\' : \'status-inactive\'}">${facility.isActive ? \'Ativa\' : \'Inativa\'}</span></td>\n          <td>\n            <button class="action-button view-facility" data-id="${facility.id}">Visualizar</button>\n            <button class="action-button edit-facility" data-id="${facility.id}">Editar</button>\n          </td>\n        `;\n        \n        facilitiesTableBody.appendChild(row);\n        \n        // Carregar contagem de salas\n        loadRoomCount(facility.id);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => viewFacility(parseInt(button.dataset.id)));\n      });\n      \n      document.querySelectorAll(\'.edit-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => editFacility(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Carregar estatísticas de uma unidade\n    async function loadFacilityStats(facilityId) {\n      try {\n        // Carregar contagem de salas\n        const roomsResponse = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (roomsResponse.ok) {\n          const rooms = await roomsResponse.json();\n          document.getElementById(`roomCount-${facilityId}`).textContent = rooms.length;\n          document.getElementById(`table-roomCount-${facilityId}`).textContent = rooms.length;\n        }\n        \n        // Carregar contagem de profissionais\n        const profsResponse = await fetch(`/api/professionals?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (profsResponse.ok) {\n          const professionals = await profsResponse.json();\n          document.getElementById(`profCount-${facilityId}`).textContent = professionals.length;\n        }\n        \n        // Carregar contagem de pacientes\n        const patientsResponse = await fetch(`/api/patients?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (patientsResponse.ok) {\n          const patients = await patientsResponse.json();\n          document.getElementById(`patientCount-${facilityId}`).textContent = patients.length;\n        }\n      } catch (error) {\n        console.error(`Erro ao carregar estatísticas da unidade ${facilityId}:`, error);\n      }\n    }\n    \n    // Carregar contagem de salas\n    async function loadRoomCount(facilityId) {\n      try {\n        const response = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (response.ok) {\n          const rooms = await response.json();\n          document.getElementById(`table-roomCount-${facilityId}`).textContent = rooms.length;\n        }\n      } catch (error) {\n        console.error(`Erro ao carregar contagem de salas da unidade ${facilityId}:`, error);\n        document.getElementById(`table-roomCount-${facilityId}`).textContent = \'Erro\';\n      }\n    }\n    \n    // Filtrar unidades\n    function filterFacilities() {\n      const searchTerm = searchFacility.value.toLowerCase();\n      \n      if (!searchTerm) {\n        renderFacilitiesTable();\n        return;\n      }\n      \n      const filteredFacilities = facilities.filter(facility =>\n        facility.name.toLowerCase().includes(searchTerm) ||\n        facility.address.toLowerCase().includes(searchTerm) ||\n        facility.city.toLowerCase().includes(searchTerm) ||\n        facility.state.toLowerCase().includes(searchTerm)\n      );\n      \n      if (filteredFacilities.length === 0) {\n        facilitiesTableBody.innerHTML = `\n          <tr>\n            <td colspan="6" class="text-center">Nenhuma unidade encontrada com o termo "${searchTerm}"</td>\n          </tr>\n        `;\n        return;\n      }\n      \n      facilitiesTableBody.innerHTML = \'\';\n      \n      filteredFacilities.forEach(facility => {\n        const row = document.createElement(\'tr\');\n        \n        row.innerHTML = `\n          <td>${facility.name}</td>\n          <td>${facility.address}, ${facility.city}</td>\n          <td>${facility.phone}</td>\n          <td id="table-roomCount-${facility.id}">Carregando...</td>\n          <td><span class="status ${facility.isActive ? \'status-active\' : \'status-inactive\'}">${facility.isActive ? \'Ativa\' : \'Inativa\'}</span></td>\n          <td>\n            <button class="action-button view-facility" data-id="${facility.id}">Visualizar</button>\n            <button class="action-button edit-facility" data-id="${facility.id}">Editar</button>\n          </td>\n        `;\n        \n        facilitiesTableBody.appendChild(row);\n        \n        // Carregar contagem de salas\n        loadRoomCount(facility.id);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => viewFacility(parseInt(button.dataset.id)));\n      });\n      \n      document.querySelectorAll(\'.edit-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => editFacility(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Abrir modal para adicionar unidade\n    function openAddFacilityModal() {\n      modalTitle.textContent = \'Adicionar Unidade\';\n      facilityForm.reset();\n      facilityIdInput.value = \'\';\n      document.getElementById(\'isActive\').checked = true;\n      \n      facilityModal.classList.add(\'active\');\n    }\n    \n    // Abrir modal para editar unidade\n    function editFacility(facilityId) {\n      const facility = facilities.find(f => f.id === facilityId);\n      \n      if (!facility) {\n        alert(\'Unidade não encontrada\');\n        return;\n      }\n      \n      modalTitle.textContent = \'Editar Unidade\';\n      \n      // Preencher formulário\n      facilityIdInput.value = facility.id;\n      document.getElementById(\'name\').value = facility.name;\n      document.getElementById(\'address\').value = facility.address;\n      document.getElementById(\'city\').value = facility.city;\n      document.getElementById(\'state\').value = facility.state;\n      document.getElementById(\'zipCode\').value = facility.zipCode;\n      document.getElementById(\'phone\').value = facility.phone;\n      document.getElementById(\'email\').value = facility.email || \'\';\n      document.getElementById(\'description\').value = facility.description || \'\';\n      document.getElementById(\'openingHours\').value = facility.openingHours || \'\';\n      document.getElementById(\'isActive\').checked = facility.isActive;\n      \n      facilityModal.classList.add(\'active\');\n    }\n    \n    // Editar a partir da visualização\n    function editFacilityFromView() {\n      if (currentFacility) {\n        closeViewFacilityModal();\n        editFacility(currentFacility.id);\n      }\n    }\n    \n    // Fechar modal de unidade\n    function closeFacilityModal() {\n      facilityModal.classList.remove(\'active\');\n    }\n    \n    // Salvar unidade\n    async function saveFacility() {\n      try {\n        // Validação\n        const nameInput = document.getElementById(\'name\');\n        const addressInput = document.getElementById(\'address\');\n        const cityInput = document.getElementById(\'city\');\n        const stateInput = document.getElementById(\'state\');\n        const zipCodeInput = document.getElementById(\'zipCode\');\n        const phoneInput = document.getElementById(\'phone\');\n        \n        if (!nameInput.value) {\n          alert(\'Por favor, insira o nome da unidade\');\n          nameInput.focus();\n          return;\n        }\n        \n        if (!addressInput.value) {\n          alert(\'Por favor, insira o endereço da unidade\');\n          addressInput.focus();\n          return;\n        }\n        \n        if (!cityInput.value) {\n          alert(\'Por favor, insira a cidade da unidade\');\n          cityInput.focus();\n          return;\n        }\n        \n        if (!stateInput.value) {\n          alert(\'Por favor, insira o estado da unidade\');\n          stateInput.focus();\n          return;\n        }\n        \n        if (!zipCodeInput.value) {\n          alert(\'Por favor, insira o CEP da unidade\');\n          zipCodeInput.focus();\n          return;\n        }\n        \n        if (!phoneInput.value) {\n          alert(\'Por favor, insira o telefone da unidade\');\n          phoneInput.focus();\n          return;\n        }\n        \n        // Preparar dados da unidade\n        const facilityData = {\n          name: nameInput.value,\n          address: addressInput.value,\n          city: cityInput.value,\n          state: stateInput.value,\n          zipCode: zipCodeInput.value,\n          phone: phoneInput.value,\n          email: document.getElementById(\'email\').value,\n          description: document.getElementById(\'description\').value,\n          openingHours: document.getElementById(\'openingHours\').value,\n          isActive: document.getElementById(\'isActive\').checked\n        };\n        \n        const facilityId = facilityIdInput.value;\n        let response;\n        \n        if (facilityId) {\n          // Editar unidade existente\n          response = await fetch(`/api/facilities/${facilityId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(facilityData)\n          });\n        } else {\n          // Adicionar nova unidade\n          response = await fetch(\'/api/facilities\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(facilityData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(errorText || \'Erro ao salvar unidade\');\n        }\n        \n        // Fechar modal e recarregar unidades\n        closeFacilityModal();\n        loadFacilities();\n        \n        alert(facilityId ? \'Unidade atualizada com sucesso!\' : \'Unidade adicionada com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar unidade:\', error);\n        alert(`Erro ao salvar unidade: ${error.message}`);\n      }\n    }\n    \n    // Visualizar unidade\n    async function viewFacility(facilityId) {\n      try {\n        const response = await fetch(`/api/facilities/${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar detalhes da unidade\');\n        }\n        \n        currentFacility = await response.json();\n        \n        document.getElementById(\'viewFacilityName\').textContent = currentFacility.name;\n        document.getElementById(\'viewFacilityAddress\').textContent = `${currentFacility.address}, ${currentFacility.city} - ${currentFacility.state}, ${currentFacility.zipCode}`;\n        document.getElementById(\'viewFacilityPhone\').textContent = currentFacility.phone;\n        document.getElementById(\'viewFacilityEmail\').textContent = currentFacility.email || \'Não informado\';\n        document.getElementById(\'viewFacilityHours\').textContent = currentFacility.openingHours || \'Não informado\';\n        document.getElementById(\'viewFacilityStatus\').innerHTML = `<span class="status ${currentFacility.isActive ? \'status-active\' : \'status-inactive\'}">${currentFacility.isActive ? \'Ativa\' : \'Inativa\'}</span>`;\n        document.getElementById(\'viewFacilityDescription\').textContent = currentFacility.description || \'Sem descrição\';\n        \n        // Carregar salas\n        loadRooms(currentFacility.id);\n        \n        // Carregar estatísticas\n        loadDetailedStats(currentFacility.id);\n        \n        // Mostrar primeira aba\n        switchTab(\'details\');\n        \n        // Exibir modal\n        viewFacilityModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar unidade:\', error);\n        alert(\'Erro ao carregar detalhes da unidade. Tente novamente.\');\n      }\n    }\n    \n    // Carregar salas de uma unidade\n    async function loadRooms(facilityId) {\n      try {\n        const response = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar salas\');\n        }\n        \n        const rooms = await response.json();\n        const roomsList = document.getElementById(\'roomsList\');\n        \n        if (rooms.length === 0) {\n          roomsList.innerHTML = `\n            <div class="empty-state">\n              <div class="empty-icon">🔍</div>\n              <div class="empty-text">Nenhuma sala encontrada</div>\n            </div>\n          `;\n          return;\n        }\n        \n        roomsList.innerHTML = \'\';\n        \n        // Criar grid de salas\n        const roomGrid = document.createElement(\'div\');\n        roomGrid.className = \'room-grid\';\n        \n        rooms.forEach(room => {\n          const roomCard = document.createElement(\'div\');\n          roomCard.className = \'room-card\';\n          roomCard.innerHTML = `\n            <div class="room-card-header">\n              <div class="room-card-title">${room.name}</div>\n              <div class="room-card-capacity">Capacidade: ${room.capacity || 1}</div>\n            </div>\n            \n            <div class="room-card-detail">\n              <div class="room-card-label">Tipo:</div>\n              <div>${translateRoomType(room.type)}</div>\n            </div>\n            \n            <div class="room-card-detail">\n              <div class="room-card-label">Andar:</div>\n              <div>${room.floor || \'Não informado\'}</div>\n            </div>\n            \n            <div class="room-card-detail">\n              <div class="room-card-label">Status:</div>\n              <div>${room.isActive ? \'Ativa\' : \'Inativa\'}</div>\n            </div>\n            \n            <div class="room-card-footer">\n              <button class="action-button edit-room" data-id="${room.id}">Editar</button>\n              <button class="action-button delete delete-room" data-id="${room.id}">Excluir</button>\n            </div>\n          `;\n          \n          roomGrid.appendChild(roomCard);\n        });\n        \n        roomsList.appendChild(roomGrid);\n        \n        // Adicionar event listeners\n        document.querySelectorAll(\'.edit-room\').forEach(button => {\n          button.addEventListener(\'click\', () => editRoom(parseInt(button.dataset.id)));\n        });\n        \n        document.querySelectorAll(\'.delete-room\').forEach(button => {\n          button.addEventListener(\'click\', () => deleteRoom(parseInt(button.dataset.id)));\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar salas:\', error);\n        document.getElementById(\'roomsList\').innerHTML = `\n          <div class="empty-state">\n            <div class="empty-icon">❌</div>\n            <div class="empty-text">Erro ao carregar salas</div>\n          </div>\n        `;\n      }\n    }\n    \n    // Traduzir tipo de sala\n    function translateRoomType(type) {\n      const translations = {\n        \'therapy\': \'Terapia\',\n        \'evaluation\': \'Avaliação\',\n        \'group\': \'Grupo\',\n        \'sensory\': \'Sensorial\',\n        \'meeting\': \'Reunião\',\n        \'administration\': \'Administração\',\n        \'other\': \'Outro\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Carregar estatísticas detalhadas\n    async function loadDetailedStats(facilityId) {\n      try {\n        // Carregar contagem de salas\n        const roomsResponse = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (roomsResponse.ok) {\n          const rooms = await roomsResponse.json();\n          document.getElementById(\'viewFacilityRoomCount\').textContent = rooms.length;\n        }\n        \n        // Carregar contagem de profissionais\n        const profsResponse = await fetch(`/api/professionals?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (profsResponse.ok) {\n          const professionals = await profsResponse.json();\n          document.getElementById(\'viewFacilityProfessionalCount\').textContent = professionals.length;\n        }\n        \n        // Carregar contagem de pacientes\n        const patientsResponse = await fetch(`/api/patients?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (patientsResponse.ok) {\n          const patients = await patientsResponse.json();\n          document.getElementById(\'viewFacilityPatientCount\').textContent = patients.length;\n        }\n        \n        // Carregar contagem de agendamentos\n        const appointmentsResponse = await fetch(`/api/appointments?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (appointmentsResponse.ok) {\n          const appointments = await appointmentsResponse.json();\n          document.getElementById(\'viewFacilityAppointmentCount\').textContent = appointments.length;\n        }\n      } catch (error) {\n        console.error(`Erro ao carregar estatísticas detalhadas da unidade ${facilityId}:`, error);\n      }\n    }\n    \n    // Fechar modal de visualização\n    function closeViewFacilityModal() {\n      viewFacilityModal.classList.remove(\'active\');\n    }\n    \n    // Abrir modal para adicionar sala\n    function openAddRoomModal() {\n      if (!currentFacility) {\n        alert(\'Erro: Nenhuma unidade selecionada\');\n        return;\n      }\n      \n      roomModalTitle.textContent = \'Adicionar Sala\';\n      roomForm.reset();\n      roomIdInput.value = \'\';\n      roomFacilityIdInput.value = currentFacility.id;\n      document.getElementById(\'roomIsActive\').checked = true;\n      \n      roomModal.classList.add(\'active\');\n    }\n    \n    // Abrir modal para editar sala\n    async function editRoom(roomId) {\n      try {\n        const response = await fetch(`/api/rooms/${roomId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar detalhes da sala\');\n        }\n        \n        const room = await response.json();\n        \n        roomModalTitle.textContent = \'Editar Sala\';\n        \n        // Preencher formulário\n        roomIdInput.value = room.id;\n        roomFacilityIdInput.value = room.facilityId;\n        document.getElementById(\'roomName\').value = room.name;\n        document.getElementById(\'roomCapacity\').value = room.capacity || 1;\n        document.getElementById(\'roomType\').value = room.type || \'therapy\';\n        document.getElementById(\'roomFloor\').value = room.floor || \'\';\n        document.getElementById(\'roomDescription\').value = room.description || \'\';\n        document.getElementById(\'roomEquipment\').value = room.equipment || \'\';\n        document.getElementById(\'roomIsActive\').checked = room.isActive;\n        \n        roomModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar sala:\', error);\n        alert(\'Erro ao carregar detalhes da sala. Tente novamente.\');\n      }\n    }\n    \n    // Fechar modal de sala\n    function closeRoomModal() {\n      roomModal.classList.remove(\'active\');\n    }\n    \n    // Salvar sala\n    async function saveRoom() {\n      try {\n        // Validação\n        const nameInput = document.getElementById(\'roomName\');\n        \n        if (!nameInput.value) {\n          alert(\'Por favor, insira o nome da sala\');\n          nameInput.focus();\n          return;\n        }\n        \n        // Preparar dados da sala\n        const roomData = {\n          facilityId: parseInt(roomFacilityIdInput.value),\n          name: nameInput.value,\n          capacity: parseInt(document.getElementById(\'roomCapacity\').value) || 1,\n          type: document.getElementById(\'roomType\').value,\n          floor: document.getElementById(\'roomFloor\').value,\n          description: document.getElementById(\'roomDescription\').value,\n          equipment: document.getElementById(\'roomEquipment\').value,\n          isActive: document.getElementById(\'roomIsActive\').checked\n        };\n        \n        const roomId = roomIdInput.value;\n        let response;\n        \n        if (roomId) {\n          // Editar sala existente\n          response = await fetch(`/api/rooms/${roomId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(roomData)\n          });\n        } else {\n          // Adicionar nova sala\n          response = await fetch(\'/api/rooms\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(roomData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(errorText || \'Erro ao salvar sala\');\n        }\n        \n        // Fechar modal e recarregar salas\n        closeRoomModal();\n        loadRooms(currentFacility.id);\n        \n        alert(roomId ? \'Sala atualizada com sucesso!\' : \'Sala adicionada com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar sala:\', error);\n        alert(`Erro ao salvar sala: ${error.message}`);\n      }\n    }\n    \n    // Excluir sala\n    async function deleteRoom(roomId) {\n      if (!confirm(\'Tem certeza que deseja excluir esta sala?\')) {\n        return;\n      }\n      \n      try {\n        const response = await fetch(`/api/rooms/${roomId}`, {\n          method: \'DELETE\',\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao excluir sala\');\n        }\n        \n        // Recarregar salas\n        loadRooms(currentFacility.id);\n        \n        alert(\'Sala excluída com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao excluir sala:\', error);\n        alert(`Erro ao excluir sala: ${error.message}`);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n  </script>\n', PosixPath('client/public/facilities.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 92517d33acf06d957d363d496f158649089930e1ba27dcd5f8ec70b40637bd2e1399e4db786be1730842e307b6c795acc9290f5d7e60f1213f65db77bc79f2c1_0
2025-05-07 18:31:35,218 - semgrep.rule_match - DEBUG - match_key = ('\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', () => {\n      checkAuth();\n      setupEventListeners();\n      loadFacilities();\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const facilitiesGrid = document.getElementById(\'facilitiesGrid\');\n    const facilitiesTableBody = document.getElementById(\'facilitiesTableBody\');\n    const searchFacility = document.getElementById(\'searchFacility\');\n    const addFacilityCard = document.getElementById(\'addFacilityCard\');\n    \n    // Modal Facility\n    const facilityModal = document.getElementById(\'facilityModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const facilityForm = document.getElementById(\'facilityForm\');\n    const facilityIdInput = document.getElementById(\'facilityId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    \n    // Modal View Facility\n    const viewFacilityModal = document.getElementById(\'viewFacilityModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const closeDetailButton = document.getElementById(\'closeDetailButton\');\n    const editFacilityButton = document.getElementById(\'editFacilityButton\');\n    const detailsTab = document.getElementById(\'detailsTab\');\n    const roomsTab = document.getElementById(\'roomsTab\');\n    const statsTab = document.getElementById(\'statsTab\');\n    const detailsTabContent = document.getElementById(\'detailsTabContent\');\n    const roomsTabContent = document.getElementById(\'roomsTabContent\');\n    const statsTabContent = document.getElementById(\'statsTabContent\');\n    const addRoomButton = document.getElementById(\'addRoomButton\');\n    \n    // Modal Room\n    const roomModal = document.getElementById(\'roomModal\');\n    const roomModalTitle = document.getElementById(\'roomModalTitle\');\n    const roomForm = document.getElementById(\'roomForm\');\n    const roomIdInput = document.getElementById(\'roomId\');\n    const roomFacilityIdInput = document.getElementById(\'roomFacilityId\');\n    const closeRoomModal = document.getElementById(\'closeRoomModal\');\n    const cancelRoomButton = document.getElementById(\'cancelRoomButton\');\n    const saveRoomButton = document.getElementById(\'saveRoomButton\');\n    \n    // Variáveis globais\n    let currentUser = null;\n    let facilities = [];\n    let currentFacility = null;\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        currentUser = await response.json();\n        displayUserData(currentUser);\n        \n        // Configurar permissões baseadas no papel do usuário\n        if (currentUser.role !== \'admin\') {\n          addFacilityCard.style.display = \'none\';\n        }\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Pesquisar\n      searchFacility.addEventListener(\'input\', filterFacilities);\n      \n      // Adicionar unidade\n      addFacilityCard.addEventListener(\'click\', openAddFacilityModal);\n      \n      // Formulário de unidade\n      closeModal.addEventListener(\'click\', closeFacilityModal);\n      cancelButton.addEventListener(\'click\', closeFacilityModal);\n      saveButton.addEventListener(\'click\', saveFacility);\n      \n      // Modal de background\n      facilityModal.addEventListener(\'click\', function(e) {\n        if (e.target === facilityModal) {\n          closeFacilityModal();\n        }\n      });\n      \n      // Modal de visualização\n      closeViewModal.addEventListener(\'click\', closeViewFacilityModal);\n      closeDetailButton.addEventListener(\'click\', closeViewFacilityModal);\n      editFacilityButton.addEventListener(\'click\', editFacilityFromView);\n      \n      viewFacilityModal.addEventListener(\'click\', function(e) {\n        if (e.target === viewFacilityModal) {\n          closeViewFacilityModal();\n        }\n      });\n      \n      // Tabs\n      detailsTab.addEventListener(\'click\', () => switchTab(\'details\'));\n      roomsTab.addEventListener(\'click\', () => switchTab(\'rooms\'));\n      statsTab.addEventListener(\'click\', () => switchTab(\'stats\'));\n      \n      // Adicionar sala\n      addRoomButton.addEventListener(\'click\', openAddRoomModal);\n      \n      // Formulário de sala\n      closeRoomModal.addEventListener(\'click\', closeRoomModal);\n      cancelRoomButton.addEventListener(\'click\', closeRoomModal);\n      saveRoomButton.addEventListener(\'click\', saveRoom);\n      \n      roomModal.addEventListener(\'click\', function(e) {\n        if (e.target === roomModal) {\n          closeRoomModal();\n        }\n      });\n    }\n    \n    // Alternar entre as abas\n    function switchTab(tab) {\n      // Remover classe ativa de todas as abas\n      detailsTab.classList.remove(\'active\');\n      roomsTab.classList.remove(\'active\');\n      statsTab.classList.remove(\'active\');\n      \n      detailsTabContent.classList.remove(\'active\');\n      roomsTabContent.classList.remove(\'active\');\n      statsTabContent.classList.remove(\'active\');\n      \n      // Adicionar classe ativa à aba clicada\n      if (tab === \'details\') {\n        detailsTab.classList.add(\'active\');\n        detailsTabContent.classList.add(\'active\');\n      } else if (tab === \'rooms\') {\n        roomsTab.classList.add(\'active\');\n        roomsTabContent.classList.add(\'active\');\n      } else if (tab === \'stats\') {\n        statsTab.classList.add(\'active\');\n        statsTabContent.classList.add(\'active\');\n      }\n    }\n    \n    // Carregar unidades\n    async function loadFacilities() {\n      try {\n        const response = await fetch(\'/api/facilities\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar unidades\');\n        }\n        \n        facilities = await response.json();\n        renderFacilitiesGrid();\n        renderFacilitiesTable();\n      } catch (error) {\n        console.error(\'Erro ao carregar unidades:\', error);\n        facilitiesTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">Erro ao carregar unidades. Tente novamente mais tarde.</td>\n          </tr>\n        `;\n      }\n    }\n    \n    // Renderizar grid de unidades\n    function renderFacilitiesGrid() {\n      // Limpar grid, mantendo o card de adicionar\n      const addCard = document.getElementById(\'addFacilityCard\');\n      facilitiesGrid.innerHTML = \'\';\n      facilitiesGrid.appendChild(addCard);\n      \n      // Se não há unidades\n      if (facilities.length === 0) {\n        const emptyCard = document.createElement(\'div\');\n        emptyCard.className = \'empty-state\';\n        emptyCard.innerHTML = `\n          <div class="empty-icon">🏥</div>\n          <div class="empty-text">Nenhuma unidade encontrada</div>\n        `;\n        facilitiesGrid.insertBefore(emptyCard, addCard);\n        return;\n      }\n      \n      // Mostrar no máximo 3 unidades no grid\n      const displayFacilities = facilities.slice(0, 3);\n      \n      // Adicionar cards de unidades\n      displayFacilities.forEach(facility => {\n        const facilityCard = document.createElement(\'div\');\n        facilityCard.className = \'facility-card\';\n        facilityCard.innerHTML = `\n          <div class="facility-header">\n            <div>\n              <h3 class="facility-name">${facility.name}</h3>\n              <p class="facility-address">${facility.address}, ${facility.city} - ${facility.state}</p>\n            </div>\n          </div>\n          \n          <div class="facility-phone">\n            <span class="facility-icon">📞</span> ${facility.phone}\n          </div>\n          \n          <div class="facility-email">\n            <span class="facility-icon">✉️</span> ${facility.email || \'Não informado\'}\n          </div>\n          \n          <div class="facility-stats">\n            <div class="facility-stat">\n              <div class="stat-number" id="roomCount-${facility.id}">...</div>\n              <div class="stat-label">Salas</div>\n            </div>\n            \n            <div class="facility-stat">\n              <div class="stat-number" id="profCount-${facility.id}">...</div>\n              <div class="stat-label">Profissionais</div>\n            </div>\n            \n            <div class="facility-stat">\n              <div class="stat-number" id="patientCount-${facility.id}">...</div>\n              <div class="stat-label">Pacientes</div>\n            </div>\n          </div>\n          \n          <div class="facility-footer">\n            <div class="facility-status">\n              <span class="status ${facility.isActive ? \'status-active\' : \'status-inactive\'}">\n                ${facility.isActive ? \'Ativa\' : \'Inativa\'}\n              </span>\n            </div>\n            \n            <div class="facility-actions">\n              <button class="button button-outline view-facility" data-id="${facility.id}">Ver detalhes</button>\n            </div>\n          </div>\n        `;\n        \n        facilitiesGrid.insertBefore(facilityCard, addCard);\n        \n        // Carregar contagens\n        loadFacilityStats(facility.id);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => viewFacility(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Renderizar tabela de unidades\n    function renderFacilitiesTable() {\n      // Se não há unidades\n      if (facilities.length === 0) {\n        facilitiesTableBody.innerHTML = `\n          <tr>\n            <td colspan="6" class="text-center">Nenhuma unidade encontrada</td>\n          </tr>\n        `;\n        return;\n      }\n      \n      // Limpar tabela\n      facilitiesTableBody.innerHTML = \'\';\n      \n      // Adicionar linhas\n      facilities.forEach(facility => {\n        const row = document.createElement(\'tr\');\n        \n        row.innerHTML = `\n          <td>${facility.name}</td>\n          <td>${facility.address}, ${facility.city}</td>\n          <td>${facility.phone}</td>\n          <td id="table-roomCount-${facility.id}">Carregando...</td>\n          <td><span class="status ${facility.isActive ? \'status-active\' : \'status-inactive\'}">${facility.isActive ? \'Ativa\' : \'Inativa\'}</span></td>\n          <td>\n            <button class="action-button view-facility" data-id="${facility.id}">Visualizar</button>\n            <button class="action-button edit-facility" data-id="${facility.id}">Editar</button>\n          </td>\n        `;\n        \n        facilitiesTableBody.appendChild(row);\n        \n        // Carregar contagem de salas\n        loadRoomCount(facility.id);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => viewFacility(parseInt(button.dataset.id)));\n      });\n      \n      document.querySelectorAll(\'.edit-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => editFacility(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Carregar estatísticas de uma unidade\n    async function loadFacilityStats(facilityId) {\n      try {\n        // Carregar contagem de salas\n        const roomsResponse = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (roomsResponse.ok) {\n          const rooms = await roomsResponse.json();\n          document.getElementById(`roomCount-${facilityId}`).textContent = rooms.length;\n          document.getElementById(`table-roomCount-${facilityId}`).textContent = rooms.length;\n        }\n        \n        // Carregar contagem de profissionais\n        const profsResponse = await fetch(`/api/professionals?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (profsResponse.ok) {\n          const professionals = await profsResponse.json();\n          document.getElementById(`profCount-${facilityId}`).textContent = professionals.length;\n        }\n        \n        // Carregar contagem de pacientes\n        const patientsResponse = await fetch(`/api/patients?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (patientsResponse.ok) {\n          const patients = await patientsResponse.json();\n          document.getElementById(`patientCount-${facilityId}`).textContent = patients.length;\n        }\n      } catch (error) {\n        console.error(`Erro ao carregar estatísticas da unidade ${facilityId}:`, error);\n      }\n    }\n    \n    // Carregar contagem de salas\n    async function loadRoomCount(facilityId) {\n      try {\n        const response = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (response.ok) {\n          const rooms = await response.json();\n          document.getElementById(`table-roomCount-${facilityId}`).textContent = rooms.length;\n        }\n      } catch (error) {\n        console.error(`Erro ao carregar contagem de salas da unidade ${facilityId}:`, error);\n        document.getElementById(`table-roomCount-${facilityId}`).textContent = \'Erro\';\n      }\n    }\n    \n    // Filtrar unidades\n    function filterFacilities() {\n      const searchTerm = searchFacility.value.toLowerCase();\n      \n      if (!searchTerm) {\n        renderFacilitiesTable();\n        return;\n      }\n      \n      const filteredFacilities = facilities.filter(facility =>\n        facility.name.toLowerCase().includes(searchTerm) ||\n        facility.address.toLowerCase().includes(searchTerm) ||\n        facility.city.toLowerCase().includes(searchTerm) ||\n        facility.state.toLowerCase().includes(searchTerm)\n      );\n      \n      if (filteredFacilities.length === 0) {\n        facilitiesTableBody.innerHTML = `\n          <tr>\n            <td colspan="6" class="text-center">Nenhuma unidade encontrada com o termo "${searchTerm}"</td>\n          </tr>\n        `;\n        return;\n      }\n      \n      facilitiesTableBody.innerHTML = \'\';\n      \n      filteredFacilities.forEach(facility => {\n        const row = document.createElement(\'tr\');\n        \n        row.innerHTML = `\n          <td>${facility.name}</td>\n          <td>${facility.address}, ${facility.city}</td>\n          <td>${facility.phone}</td>\n          <td id="table-roomCount-${facility.id}">Carregando...</td>\n          <td><span class="status ${facility.isActive ? \'status-active\' : \'status-inactive\'}">${facility.isActive ? \'Ativa\' : \'Inativa\'}</span></td>\n          <td>\n            <button class="action-button view-facility" data-id="${facility.id}">Visualizar</button>\n            <button class="action-button edit-facility" data-id="${facility.id}">Editar</button>\n          </td>\n        `;\n        \n        facilitiesTableBody.appendChild(row);\n        \n        // Carregar contagem de salas\n        loadRoomCount(facility.id);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => viewFacility(parseInt(button.dataset.id)));\n      });\n      \n      document.querySelectorAll(\'.edit-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => editFacility(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Abrir modal para adicionar unidade\n    function openAddFacilityModal() {\n      modalTitle.textContent = \'Adicionar Unidade\';\n      facilityForm.reset();\n      facilityIdInput.value = \'\';\n      document.getElementById(\'isActive\').checked = true;\n      \n      facilityModal.classList.add(\'active\');\n    }\n    \n    // Abrir modal para editar unidade\n    function editFacility(facilityId) {\n      const facility = facilities.find(f => f.id === facilityId);\n      \n      if (!facility) {\n        alert(\'Unidade não encontrada\');\n        return;\n      }\n      \n      modalTitle.textContent = \'Editar Unidade\';\n      \n      // Preencher formulário\n      facilityIdInput.value = facility.id;\n      document.getElementById(\'name\').value = facility.name;\n      document.getElementById(\'address\').value = facility.address;\n      document.getElementById(\'city\').value = facility.city;\n      document.getElementById(\'state\').value = facility.state;\n      document.getElementById(\'zipCode\').value = facility.zipCode;\n      document.getElementById(\'phone\').value = facility.phone;\n      document.getElementById(\'email\').value = facility.email || \'\';\n      document.getElementById(\'description\').value = facility.description || \'\';\n      document.getElementById(\'openingHours\').value = facility.openingHours || \'\';\n      document.getElementById(\'isActive\').checked = facility.isActive;\n      \n      facilityModal.classList.add(\'active\');\n    }\n    \n    // Editar a partir da visualização\n    function editFacilityFromView() {\n      if (currentFacility) {\n        closeViewFacilityModal();\n        editFacility(currentFacility.id);\n      }\n    }\n    \n    // Fechar modal de unidade\n    function closeFacilityModal() {\n      facilityModal.classList.remove(\'active\');\n    }\n    \n    // Salvar unidade\n    async function saveFacility() {\n      try {\n        // Validação\n        const nameInput = document.getElementById(\'name\');\n        const addressInput = document.getElementById(\'address\');\n        const cityInput = document.getElementById(\'city\');\n        const stateInput = document.getElementById(\'state\');\n        const zipCodeInput = document.getElementById(\'zipCode\');\n        const phoneInput = document.getElementById(\'phone\');\n        \n        if (!nameInput.value) {\n          alert(\'Por favor, insira o nome da unidade\');\n          nameInput.focus();\n          return;\n        }\n        \n        if (!addressInput.value) {\n          alert(\'Por favor, insira o endereço da unidade\');\n          addressInput.focus();\n          return;\n        }\n        \n        if (!cityInput.value) {\n          alert(\'Por favor, insira a cidade da unidade\');\n          cityInput.focus();\n          return;\n        }\n        \n        if (!stateInput.value) {\n          alert(\'Por favor, insira o estado da unidade\');\n          stateInput.focus();\n          return;\n        }\n        \n        if (!zipCodeInput.value) {\n          alert(\'Por favor, insira o CEP da unidade\');\n          zipCodeInput.focus();\n          return;\n        }\n        \n        if (!phoneInput.value) {\n          alert(\'Por favor, insira o telefone da unidade\');\n          phoneInput.focus();\n          return;\n        }\n        \n        // Preparar dados da unidade\n        const facilityData = {\n          name: nameInput.value,\n          address: addressInput.value,\n          city: cityInput.value,\n          state: stateInput.value,\n          zipCode: zipCodeInput.value,\n          phone: phoneInput.value,\n          email: document.getElementById(\'email\').value,\n          description: document.getElementById(\'description\').value,\n          openingHours: document.getElementById(\'openingHours\').value,\n          isActive: document.getElementById(\'isActive\').checked\n        };\n        \n        const facilityId = facilityIdInput.value;\n        let response;\n        \n        if (facilityId) {\n          // Editar unidade existente\n          response = await fetch(`/api/facilities/${facilityId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(facilityData)\n          });\n        } else {\n          // Adicionar nova unidade\n          response = await fetch(\'/api/facilities\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(facilityData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(errorText || \'Erro ao salvar unidade\');\n        }\n        \n        // Fechar modal e recarregar unidades\n        closeFacilityModal();\n        loadFacilities();\n        \n        alert(facilityId ? \'Unidade atualizada com sucesso!\' : \'Unidade adicionada com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar unidade:\', error);\n        alert(`Erro ao salvar unidade: ${error.message}`);\n      }\n    }\n    \n    // Visualizar unidade\n    async function viewFacility(facilityId) {\n      try {\n        const response = await fetch(`/api/facilities/${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar detalhes da unidade\');\n        }\n        \n        currentFacility = await response.json();\n        \n        document.getElementById(\'viewFacilityName\').textContent = currentFacility.name;\n        document.getElementById(\'viewFacilityAddress\').textContent = `${currentFacility.address}, ${currentFacility.city} - ${currentFacility.state}, ${currentFacility.zipCode}`;\n        document.getElementById(\'viewFacilityPhone\').textContent = currentFacility.phone;\n        document.getElementById(\'viewFacilityEmail\').textContent = currentFacility.email || \'Não informado\';\n        document.getElementById(\'viewFacilityHours\').textContent = currentFacility.openingHours || \'Não informado\';\n        document.getElementById(\'viewFacilityStatus\').innerHTML = `<span class="status ${currentFacility.isActive ? \'status-active\' : \'status-inactive\'}">${currentFacility.isActive ? \'Ativa\' : \'Inativa\'}</span>`;\n        document.getElementById(\'viewFacilityDescription\').textContent = currentFacility.description || \'Sem descrição\';\n        \n        // Carregar salas\n        loadRooms(currentFacility.id);\n        \n        // Carregar estatísticas\n        loadDetailedStats(currentFacility.id);\n        \n        // Mostrar primeira aba\n        switchTab(\'details\');\n        \n        // Exibir modal\n        viewFacilityModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar unidade:\', error);\n        alert(\'Erro ao carregar detalhes da unidade. Tente novamente.\');\n      }\n    }\n    \n    // Carregar salas de uma unidade\n    async function loadRooms(facilityId) {\n      try {\n        const response = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar salas\');\n        }\n        \n        const rooms = await response.json();\n        const roomsList = document.getElementById(\'roomsList\');\n        \n        if (rooms.length === 0) {\n          roomsList.innerHTML = `\n            <div class="empty-state">\n              <div class="empty-icon">🔍</div>\n              <div class="empty-text">Nenhuma sala encontrada</div>\n            </div>\n          `;\n          return;\n        }\n        \n        roomsList.innerHTML = \'\';\n        \n        // Criar grid de salas\n        const roomGrid = document.createElement(\'div\');\n        roomGrid.className = \'room-grid\';\n        \n        rooms.forEach(room => {\n          const roomCard = document.createElement(\'div\');\n          roomCard.className = \'room-card\';\n          roomCard.innerHTML = `\n            <div class="room-card-header">\n              <div class="room-card-title">${room.name}</div>\n              <div class="room-card-capacity">Capacidade: ${room.capacity || 1}</div>\n            </div>\n            \n            <div class="room-card-detail">\n              <div class="room-card-label">Tipo:</div>\n              <div>${translateRoomType(room.type)}</div>\n            </div>\n            \n            <div class="room-card-detail">\n              <div class="room-card-label">Andar:</div>\n              <div>${room.floor || \'Não informado\'}</div>\n            </div>\n            \n            <div class="room-card-detail">\n              <div class="room-card-label">Status:</div>\n              <div>${room.isActive ? \'Ativa\' : \'Inativa\'}</div>\n            </div>\n            \n            <div class="room-card-footer">\n              <button class="action-button edit-room" data-id="${room.id}">Editar</button>\n              <button class="action-button delete delete-room" data-id="${room.id}">Excluir</button>\n            </div>\n          `;\n          \n          roomGrid.appendChild(roomCard);\n        });\n        \n        roomsList.appendChild(roomGrid);\n        \n        // Adicionar event listeners\n        document.querySelectorAll(\'.edit-room\').forEach(button => {\n          button.addEventListener(\'click\', () => editRoom(parseInt(button.dataset.id)));\n        });\n        \n        document.querySelectorAll(\'.delete-room\').forEach(button => {\n          button.addEventListener(\'click\', () => deleteRoom(parseInt(button.dataset.id)));\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar salas:\', error);\n        document.getElementById(\'roomsList\').innerHTML = `\n          <div class="empty-state">\n            <div class="empty-icon">❌</div>\n            <div class="empty-text">Erro ao carregar salas</div>\n          </div>\n        `;\n      }\n    }\n    \n    // Traduzir tipo de sala\n    function translateRoomType(type) {\n      const translations = {\n        \'therapy\': \'Terapia\',\n        \'evaluation\': \'Avaliação\',\n        \'group\': \'Grupo\',\n        \'sensory\': \'Sensorial\',\n        \'meeting\': \'Reunião\',\n        \'administration\': \'Administração\',\n        \'other\': \'Outro\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Carregar estatísticas detalhadas\n    async function loadDetailedStats(facilityId) {\n      try {\n        // Carregar contagem de salas\n        const roomsResponse = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (roomsResponse.ok) {\n          const rooms = await roomsResponse.json();\n          document.getElementById(\'viewFacilityRoomCount\').textContent = rooms.length;\n        }\n        \n        // Carregar contagem de profissionais\n        const profsResponse = await fetch(`/api/professionals?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (profsResponse.ok) {\n          const professionals = await profsResponse.json();\n          document.getElementById(\'viewFacilityProfessionalCount\').textContent = professionals.length;\n        }\n        \n        // Carregar contagem de pacientes\n        const patientsResponse = await fetch(`/api/patients?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (patientsResponse.ok) {\n          const patients = await patientsResponse.json();\n          document.getElementById(\'viewFacilityPatientCount\').textContent = patients.length;\n        }\n        \n        // Carregar contagem de agendamentos\n        const appointmentsResponse = await fetch(`/api/appointments?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (appointmentsResponse.ok) {\n          const appointments = await appointmentsResponse.json();\n          document.getElementById(\'viewFacilityAppointmentCount\').textContent = appointments.length;\n        }\n      } catch (error) {\n        console.error(`Erro ao carregar estatísticas detalhadas da unidade ${facilityId}:`, error);\n      }\n    }\n    \n    // Fechar modal de visualização\n    function closeViewFacilityModal() {\n      viewFacilityModal.classList.remove(\'active\');\n    }\n    \n    // Abrir modal para adicionar sala\n    function openAddRoomModal() {\n      if (!currentFacility) {\n        alert(\'Erro: Nenhuma unidade selecionada\');\n        return;\n      }\n      \n      roomModalTitle.textContent = \'Adicionar Sala\';\n      roomForm.reset();\n      roomIdInput.value = \'\';\n      roomFacilityIdInput.value = currentFacility.id;\n      document.getElementById(\'roomIsActive\').checked = true;\n      \n      roomModal.classList.add(\'active\');\n    }\n    \n    // Abrir modal para editar sala\n    async function editRoom(roomId) {\n      try {\n        const response = await fetch(`/api/rooms/${roomId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar detalhes da sala\');\n        }\n        \n        const room = await response.json();\n        \n        roomModalTitle.textContent = \'Editar Sala\';\n        \n        // Preencher formulário\n        roomIdInput.value = room.id;\n        roomFacilityIdInput.value = room.facilityId;\n        document.getElementById(\'roomName\').value = room.name;\n        document.getElementById(\'roomCapacity\').value = room.capacity || 1;\n        document.getElementById(\'roomType\').value = room.type || \'therapy\';\n        document.getElementById(\'roomFloor\').value = room.floor || \'\';\n        document.getElementById(\'roomDescription\').value = room.description || \'\';\n        document.getElementById(\'roomEquipment\').value = room.equipment || \'\';\n        document.getElementById(\'roomIsActive\').checked = room.isActive;\n        \n        roomModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar sala:\', error);\n        alert(\'Erro ao carregar detalhes da sala. Tente novamente.\');\n      }\n    }\n    \n    // Fechar modal de sala\n    function closeRoomModal() {\n      roomModal.classList.remove(\'active\');\n    }\n    \n    // Salvar sala\n    async function saveRoom() {\n      try {\n        // Validação\n        const nameInput = document.getElementById(\'roomName\');\n        \n        if (!nameInput.value) {\n          alert(\'Por favor, insira o nome da sala\');\n          nameInput.focus();\n          return;\n        }\n        \n        // Preparar dados da sala\n        const roomData = {\n          facilityId: parseInt(roomFacilityIdInput.value),\n          name: nameInput.value,\n          capacity: parseInt(document.getElementById(\'roomCapacity\').value) || 1,\n          type: document.getElementById(\'roomType\').value,\n          floor: document.getElementById(\'roomFloor\').value,\n          description: document.getElementById(\'roomDescription\').value,\n          equipment: document.getElementById(\'roomEquipment\').value,\n          isActive: document.getElementById(\'roomIsActive\').checked\n        };\n        \n        const roomId = roomIdInput.value;\n        let response;\n        \n        if (roomId) {\n          // Editar sala existente\n          response = await fetch(`/api/rooms/${roomId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(roomData)\n          });\n        } else {\n          // Adicionar nova sala\n          response = await fetch(\'/api/rooms\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(roomData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(errorText || \'Erro ao salvar sala\');\n        }\n        \n        // Fechar modal e recarregar salas\n        closeRoomModal();\n        loadRooms(currentFacility.id);\n        \n        alert(roomId ? \'Sala atualizada com sucesso!\' : \'Sala adicionada com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar sala:\', error);\n        alert(`Erro ao salvar sala: ${error.message}`);\n      }\n    }\n    \n    // Excluir sala\n    async function deleteRoom(roomId) {\n      if (!confirm(\'Tem certeza que deseja excluir esta sala?\')) {\n        return;\n      }\n      \n      try {\n        const response = await fetch(`/api/rooms/${roomId}`, {\n          method: \'DELETE\',\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao excluir sala\');\n        }\n        \n        // Recarregar salas\n        loadRooms(currentFacility.id);\n        \n        alert(\'Sala excluída com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao excluir sala:\', error);\n        alert(`Erro ao excluir sala: ${error.message}`);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n   $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', () => {\n      checkAuth();\n      setupEventListeners();\n      loadFacilities();\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const facilitiesGrid = document.getElementById(\'facilitiesGrid\');\n    const facilitiesTableBody = document.getElementById(\'facilitiesTableBody\');\n    const searchFacility = document.getElementById(\'searchFacility\');\n    const addFacilityCard = document.getElementById(\'addFacilityCard\');\n    \n    // Modal Facility\n    const facilityModal = document.getElementById(\'facilityModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const facilityForm = document.getElementById(\'facilityForm\');\n    const facilityIdInput = document.getElementById(\'facilityId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    \n    // Modal View Facility\n    const viewFacilityModal = document.getElementById(\'viewFacilityModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const closeDetailButton = document.getElementById(\'closeDetailButton\');\n    const editFacilityButton = document.getElementById(\'editFacilityButton\');\n    const detailsTab = document.getElementById(\'detailsTab\');\n    const roomsTab = document.getElementById(\'roomsTab\');\n    const statsTab = document.getElementById(\'statsTab\');\n    const detailsTabContent = document.getElementById(\'detailsTabContent\');\n    const roomsTabContent = document.getElementById(\'roomsTabContent\');\n    const statsTabContent = document.getElementById(\'statsTabContent\');\n    const addRoomButton = document.getElementById(\'addRoomButton\');\n    \n    // Modal Room\n    const roomModal = document.getElementById(\'roomModal\');\n    const roomModalTitle = document.getElementById(\'roomModalTitle\');\n    const roomForm = document.getElementById(\'roomForm\');\n    const roomIdInput = document.getElementById(\'roomId\');\n    const roomFacilityIdInput = document.getElementById(\'roomFacilityId\');\n    const closeRoomModal = document.getElementById(\'closeRoomModal\');\n    const cancelRoomButton = document.getElementById(\'cancelRoomButton\');\n    const saveRoomButton = document.getElementById(\'saveRoomButton\');\n    \n    // Variáveis globais\n    let currentUser = null;\n    let facilities = [];\n    let currentFacility = null;\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        currentUser = await response.json();\n        displayUserData(currentUser);\n        \n        // Configurar permissões baseadas no papel do usuário\n        if (currentUser.role !== \'admin\') {\n          addFacilityCard.style.display = \'none\';\n        }\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Pesquisar\n      searchFacility.addEventListener(\'input\', filterFacilities);\n      \n      // Adicionar unidade\n      addFacilityCard.addEventListener(\'click\', openAddFacilityModal);\n      \n      // Formulário de unidade\n      closeModal.addEventListener(\'click\', closeFacilityModal);\n      cancelButton.addEventListener(\'click\', closeFacilityModal);\n      saveButton.addEventListener(\'click\', saveFacility);\n      \n      // Modal de background\n      facilityModal.addEventListener(\'click\', function(e) {\n        if (e.target === facilityModal) {\n          closeFacilityModal();\n        }\n      });\n      \n      // Modal de visualização\n      closeViewModal.addEventListener(\'click\', closeViewFacilityModal);\n      closeDetailButton.addEventListener(\'click\', closeViewFacilityModal);\n      editFacilityButton.addEventListener(\'click\', editFacilityFromView);\n      \n      viewFacilityModal.addEventListener(\'click\', function(e) {\n        if (e.target === viewFacilityModal) {\n          closeViewFacilityModal();\n        }\n      });\n      \n      // Tabs\n      detailsTab.addEventListener(\'click\', () => switchTab(\'details\'));\n      roomsTab.addEventListener(\'click\', () => switchTab(\'rooms\'));\n      statsTab.addEventListener(\'click\', () => switchTab(\'stats\'));\n      \n      // Adicionar sala\n      addRoomButton.addEventListener(\'click\', openAddRoomModal);\n      \n      // Formulário de sala\n      closeRoomModal.addEventListener(\'click\', closeRoomModal);\n      cancelRoomButton.addEventListener(\'click\', closeRoomModal);\n      saveRoomButton.addEventListener(\'click\', saveRoom);\n      \n      roomModal.addEventListener(\'click\', function(e) {\n        if (e.target === roomModal) {\n          closeRoomModal();\n        }\n      });\n    }\n    \n    // Alternar entre as abas\n    function switchTab(tab) {\n      // Remover classe ativa de todas as abas\n      detailsTab.classList.remove(\'active\');\n      roomsTab.classList.remove(\'active\');\n      statsTab.classList.remove(\'active\');\n      \n      detailsTabContent.classList.remove(\'active\');\n      roomsTabContent.classList.remove(\'active\');\n      statsTabContent.classList.remove(\'active\');\n      \n      // Adicionar classe ativa à aba clicada\n      if (tab === \'details\') {\n        detailsTab.classList.add(\'active\');\n        detailsTabContent.classList.add(\'active\');\n      } else if (tab === \'rooms\') {\n        roomsTab.classList.add(\'active\');\n        roomsTabContent.classList.add(\'active\');\n      } else if (tab === \'stats\') {\n        statsTab.classList.add(\'active\');\n        statsTabContent.classList.add(\'active\');\n      }\n    }\n    \n    // Carregar unidades\n    async function loadFacilities() {\n      try {\n        const response = await fetch(\'/api/facilities\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar unidades\');\n        }\n        \n        facilities = await response.json();\n        renderFacilitiesGrid();\n        renderFacilitiesTable();\n      } catch (error) {\n        console.error(\'Erro ao carregar unidades:\', error);\n        facilitiesTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">Erro ao carregar unidades. Tente novamente mais tarde.</td>\n          </tr>\n        `;\n      }\n    }\n    \n    // Renderizar grid de unidades\n    function renderFacilitiesGrid() {\n      // Limpar grid, mantendo o card de adicionar\n      const addCard = document.getElementById(\'addFacilityCard\');\n      facilitiesGrid.innerHTML = \'\';\n      facilitiesGrid.appendChild(addCard);\n      \n      // Se não há unidades\n      if (facilities.length === 0) {\n        const emptyCard = document.createElement(\'div\');\n        emptyCard.className = \'empty-state\';\n        emptyCard.innerHTML = `\n          <div class="empty-icon">🏥</div>\n          <div class="empty-text">Nenhuma unidade encontrada</div>\n        `;\n        facilitiesGrid.insertBefore(emptyCard, addCard);\n        return;\n      }\n      \n      // Mostrar no máximo 3 unidades no grid\n      const displayFacilities = facilities.slice(0, 3);\n      \n      // Adicionar cards de unidades\n      displayFacilities.forEach(facility => {\n        const facilityCard = document.createElement(\'div\');\n        facilityCard.className = \'facility-card\';\n        facilityCard.innerHTML = `\n          <div class="facility-header">\n            <div>\n              <h3 class="facility-name">${facility.name}</h3>\n              <p class="facility-address">${facility.address}, ${facility.city} - ${facility.state}</p>\n            </div>\n          </div>\n          \n          <div class="facility-phone">\n            <span class="facility-icon">📞</span> ${facility.phone}\n          </div>\n          \n          <div class="facility-email">\n            <span class="facility-icon">✉️</span> ${facility.email || \'Não informado\'}\n          </div>\n          \n          <div class="facility-stats">\n            <div class="facility-stat">\n              <div class="stat-number" id="roomCount-${facility.id}">...</div>\n              <div class="stat-label">Salas</div>\n            </div>\n            \n            <div class="facility-stat">\n              <div class="stat-number" id="profCount-${facility.id}">...</div>\n              <div class="stat-label">Profissionais</div>\n            </div>\n            \n            <div class="facility-stat">\n              <div class="stat-number" id="patientCount-${facility.id}">...</div>\n              <div class="stat-label">Pacientes</div>\n            </div>\n          </div>\n          \n          <div class="facility-footer">\n            <div class="facility-status">\n              <span class="status ${facility.isActive ? \'status-active\' : \'status-inactive\'}">\n                ${facility.isActive ? \'Ativa\' : \'Inativa\'}\n              </span>\n            </div>\n            \n            <div class="facility-actions">\n              <button class="button button-outline view-facility" data-id="${facility.id}">Ver detalhes</button>\n            </div>\n          </div>\n        `;\n        \n        facilitiesGrid.insertBefore(facilityCard, addCard);\n        \n        // Carregar contagens\n        loadFacilityStats(facility.id);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => viewFacility(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Renderizar tabela de unidades\n    function renderFacilitiesTable() {\n      // Se não há unidades\n      if (facilities.length === 0) {\n        facilitiesTableBody.innerHTML = `\n          <tr>\n            <td colspan="6" class="text-center">Nenhuma unidade encontrada</td>\n          </tr>\n        `;\n        return;\n      }\n      \n      // Limpar tabela\n      facilitiesTableBody.innerHTML = \'\';\n      \n      // Adicionar linhas\n      facilities.forEach(facility => {\n        const row = document.createElement(\'tr\');\n        \n        row.innerHTML = `\n          <td>${facility.name}</td>\n          <td>${facility.address}, ${facility.city}</td>\n          <td>${facility.phone}</td>\n          <td id="table-roomCount-${facility.id}">Carregando...</td>\n          <td><span class="status ${facility.isActive ? \'status-active\' : \'status-inactive\'}">${facility.isActive ? \'Ativa\' : \'Inativa\'}</span></td>\n          <td>\n            <button class="action-button view-facility" data-id="${facility.id}">Visualizar</button>\n            <button class="action-button edit-facility" data-id="${facility.id}">Editar</button>\n          </td>\n        `;\n        \n        facilitiesTableBody.appendChild(row);\n        \n        // Carregar contagem de salas\n        loadRoomCount(facility.id);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => viewFacility(parseInt(button.dataset.id)));\n      });\n      \n      document.querySelectorAll(\'.edit-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => editFacility(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Carregar estatísticas de uma unidade\n    async function loadFacilityStats(facilityId) {\n      try {\n        // Carregar contagem de salas\n        const roomsResponse = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (roomsResponse.ok) {\n          const rooms = await roomsResponse.json();\n          document.getElementById(`roomCount-${facilityId}`).textContent = rooms.length;\n          document.getElementById(`table-roomCount-${facilityId}`).textContent = rooms.length;\n        }\n        \n        // Carregar contagem de profissionais\n        const profsResponse = await fetch(`/api/professionals?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (profsResponse.ok) {\n          const professionals = await profsResponse.json();\n          document.getElementById(`profCount-${facilityId}`).textContent = professionals.length;\n        }\n        \n        // Carregar contagem de pacientes\n        const patientsResponse = await fetch(`/api/patients?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (patientsResponse.ok) {\n          const patients = await patientsResponse.json();\n          document.getElementById(`patientCount-${facilityId}`).textContent = patients.length;\n        }\n      } catch (error) {\n        console.error(`Erro ao carregar estatísticas da unidade ${facilityId}:`, error);\n      }\n    }\n    \n    // Carregar contagem de salas\n    async function loadRoomCount(facilityId) {\n      try {\n        const response = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (response.ok) {\n          const rooms = await response.json();\n          document.getElementById(`table-roomCount-${facilityId}`).textContent = rooms.length;\n        }\n      } catch (error) {\n        console.error(`Erro ao carregar contagem de salas da unidade ${facilityId}:`, error);\n        document.getElementById(`table-roomCount-${facilityId}`).textContent = \'Erro\';\n      }\n    }\n    \n    // Filtrar unidades\n    function filterFacilities() {\n      const searchTerm = searchFacility.value.toLowerCase();\n      \n      if (!searchTerm) {\n        renderFacilitiesTable();\n        return;\n      }\n      \n      const filteredFacilities = facilities.filter(facility =>\n        facility.name.toLowerCase().includes(searchTerm) ||\n        facility.address.toLowerCase().includes(searchTerm) ||\n        facility.city.toLowerCase().includes(searchTerm) ||\n        facility.state.toLowerCase().includes(searchTerm)\n      );\n      \n      if (filteredFacilities.length === 0) {\n        facilitiesTableBody.innerHTML = `\n          <tr>\n            <td colspan="6" class="text-center">Nenhuma unidade encontrada com o termo "${searchTerm}"</td>\n          </tr>\n        `;\n        return;\n      }\n      \n      facilitiesTableBody.innerHTML = \'\';\n      \n      filteredFacilities.forEach(facility => {\n        const row = document.createElement(\'tr\');\n        \n        row.innerHTML = `\n          <td>${facility.name}</td>\n          <td>${facility.address}, ${facility.city}</td>\n          <td>${facility.phone}</td>\n          <td id="table-roomCount-${facility.id}">Carregando...</td>\n          <td><span class="status ${facility.isActive ? \'status-active\' : \'status-inactive\'}">${facility.isActive ? \'Ativa\' : \'Inativa\'}</span></td>\n          <td>\n            <button class="action-button view-facility" data-id="${facility.id}">Visualizar</button>\n            <button class="action-button edit-facility" data-id="${facility.id}">Editar</button>\n          </td>\n        `;\n        \n        facilitiesTableBody.appendChild(row);\n        \n        // Carregar contagem de salas\n        loadRoomCount(facility.id);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => viewFacility(parseInt(button.dataset.id)));\n      });\n      \n      document.querySelectorAll(\'.edit-facility\').forEach(button => {\n        button.addEventListener(\'click\', () => editFacility(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Abrir modal para adicionar unidade\n    function openAddFacilityModal() {\n      modalTitle.textContent = \'Adicionar Unidade\';\n      facilityForm.reset();\n      facilityIdInput.value = \'\';\n      document.getElementById(\'isActive\').checked = true;\n      \n      facilityModal.classList.add(\'active\');\n    }\n    \n    // Abrir modal para editar unidade\n    function editFacility(facilityId) {\n      const facility = facilities.find(f => f.id === facilityId);\n      \n      if (!facility) {\n        alert(\'Unidade não encontrada\');\n        return;\n      }\n      \n      modalTitle.textContent = \'Editar Unidade\';\n      \n      // Preencher formulário\n      facilityIdInput.value = facility.id;\n      document.getElementById(\'name\').value = facility.name;\n      document.getElementById(\'address\').value = facility.address;\n      document.getElementById(\'city\').value = facility.city;\n      document.getElementById(\'state\').value = facility.state;\n      document.getElementById(\'zipCode\').value = facility.zipCode;\n      document.getElementById(\'phone\').value = facility.phone;\n      document.getElementById(\'email\').value = facility.email || \'\';\n      document.getElementById(\'description\').value = facility.description || \'\';\n      document.getElementById(\'openingHours\').value = facility.openingHours || \'\';\n      document.getElementById(\'isActive\').checked = facility.isActive;\n      \n      facilityModal.classList.add(\'active\');\n    }\n    \n    // Editar a partir da visualização\n    function editFacilityFromView() {\n      if (currentFacility) {\n        closeViewFacilityModal();\n        editFacility(currentFacility.id);\n      }\n    }\n    \n    // Fechar modal de unidade\n    function closeFacilityModal() {\n      facilityModal.classList.remove(\'active\');\n    }\n    \n    // Salvar unidade\n    async function saveFacility() {\n      try {\n        // Validação\n        const nameInput = document.getElementById(\'name\');\n        const addressInput = document.getElementById(\'address\');\n        const cityInput = document.getElementById(\'city\');\n        const stateInput = document.getElementById(\'state\');\n        const zipCodeInput = document.getElementById(\'zipCode\');\n        const phoneInput = document.getElementById(\'phone\');\n        \n        if (!nameInput.value) {\n          alert(\'Por favor, insira o nome da unidade\');\n          nameInput.focus();\n          return;\n        }\n        \n        if (!addressInput.value) {\n          alert(\'Por favor, insira o endereço da unidade\');\n          addressInput.focus();\n          return;\n        }\n        \n        if (!cityInput.value) {\n          alert(\'Por favor, insira a cidade da unidade\');\n          cityInput.focus();\n          return;\n        }\n        \n        if (!stateInput.value) {\n          alert(\'Por favor, insira o estado da unidade\');\n          stateInput.focus();\n          return;\n        }\n        \n        if (!zipCodeInput.value) {\n          alert(\'Por favor, insira o CEP da unidade\');\n          zipCodeInput.focus();\n          return;\n        }\n        \n        if (!phoneInput.value) {\n          alert(\'Por favor, insira o telefone da unidade\');\n          phoneInput.focus();\n          return;\n        }\n        \n        // Preparar dados da unidade\n        const facilityData = {\n          name: nameInput.value,\n          address: addressInput.value,\n          city: cityInput.value,\n          state: stateInput.value,\n          zipCode: zipCodeInput.value,\n          phone: phoneInput.value,\n          email: document.getElementById(\'email\').value,\n          description: document.getElementById(\'description\').value,\n          openingHours: document.getElementById(\'openingHours\').value,\n          isActive: document.getElementById(\'isActive\').checked\n        };\n        \n        const facilityId = facilityIdInput.value;\n        let response;\n        \n        if (facilityId) {\n          // Editar unidade existente\n          response = await fetch(`/api/facilities/${facilityId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(facilityData)\n          });\n        } else {\n          // Adicionar nova unidade\n          response = await fetch(\'/api/facilities\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(facilityData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(errorText || \'Erro ao salvar unidade\');\n        }\n        \n        // Fechar modal e recarregar unidades\n        closeFacilityModal();\n        loadFacilities();\n        \n        alert(facilityId ? \'Unidade atualizada com sucesso!\' : \'Unidade adicionada com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar unidade:\', error);\n        alert(`Erro ao salvar unidade: ${error.message}`);\n      }\n    }\n    \n    // Visualizar unidade\n    async function viewFacility(facilityId) {\n      try {\n        const response = await fetch(`/api/facilities/${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar detalhes da unidade\');\n        }\n        \n        currentFacility = await response.json();\n        \n        document.getElementById(\'viewFacilityName\').textContent = currentFacility.name;\n        document.getElementById(\'viewFacilityAddress\').textContent = `${currentFacility.address}, ${currentFacility.city} - ${currentFacility.state}, ${currentFacility.zipCode}`;\n        document.getElementById(\'viewFacilityPhone\').textContent = currentFacility.phone;\n        document.getElementById(\'viewFacilityEmail\').textContent = currentFacility.email || \'Não informado\';\n        document.getElementById(\'viewFacilityHours\').textContent = currentFacility.openingHours || \'Não informado\';\n        document.getElementById(\'viewFacilityStatus\').innerHTML = `<span class="status ${currentFacility.isActive ? \'status-active\' : \'status-inactive\'}">${currentFacility.isActive ? \'Ativa\' : \'Inativa\'}</span>`;\n        document.getElementById(\'viewFacilityDescription\').textContent = currentFacility.description || \'Sem descrição\';\n        \n        // Carregar salas\n        loadRooms(currentFacility.id);\n        \n        // Carregar estatísticas\n        loadDetailedStats(currentFacility.id);\n        \n        // Mostrar primeira aba\n        switchTab(\'details\');\n        \n        // Exibir modal\n        viewFacilityModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar unidade:\', error);\n        alert(\'Erro ao carregar detalhes da unidade. Tente novamente.\');\n      }\n    }\n    \n    // Carregar salas de uma unidade\n    async function loadRooms(facilityId) {\n      try {\n        const response = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar salas\');\n        }\n        \n        const rooms = await response.json();\n        const roomsList = document.getElementById(\'roomsList\');\n        \n        if (rooms.length === 0) {\n          roomsList.innerHTML = `\n            <div class="empty-state">\n              <div class="empty-icon">🔍</div>\n              <div class="empty-text">Nenhuma sala encontrada</div>\n            </div>\n          `;\n          return;\n        }\n        \n        roomsList.innerHTML = \'\';\n        \n        // Criar grid de salas\n        const roomGrid = document.createElement(\'div\');\n        roomGrid.className = \'room-grid\';\n        \n        rooms.forEach(room => {\n          const roomCard = document.createElement(\'div\');\n          roomCard.className = \'room-card\';\n          roomCard.innerHTML = `\n            <div class="room-card-header">\n              <div class="room-card-title">${room.name}</div>\n              <div class="room-card-capacity">Capacidade: ${room.capacity || 1}</div>\n            </div>\n            \n            <div class="room-card-detail">\n              <div class="room-card-label">Tipo:</div>\n              <div>${translateRoomType(room.type)}</div>\n            </div>\n            \n            <div class="room-card-detail">\n              <div class="room-card-label">Andar:</div>\n              <div>${room.floor || \'Não informado\'}</div>\n            </div>\n            \n            <div class="room-card-detail">\n              <div class="room-card-label">Status:</div>\n              <div>${room.isActive ? \'Ativa\' : \'Inativa\'}</div>\n            </div>\n            \n            <div class="room-card-footer">\n              <button class="action-button edit-room" data-id="${room.id}">Editar</button>\n              <button class="action-button delete delete-room" data-id="${room.id}">Excluir</button>\n            </div>\n          `;\n          \n          roomGrid.appendChild(roomCard);\n        });\n        \n        roomsList.appendChild(roomGrid);\n        \n        // Adicionar event listeners\n        document.querySelectorAll(\'.edit-room\').forEach(button => {\n          button.addEventListener(\'click\', () => editRoom(parseInt(button.dataset.id)));\n        });\n        \n        document.querySelectorAll(\'.delete-room\').forEach(button => {\n          button.addEventListener(\'click\', () => deleteRoom(parseInt(button.dataset.id)));\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar salas:\', error);\n        document.getElementById(\'roomsList\').innerHTML = `\n          <div class="empty-state">\n            <div class="empty-icon">❌</div>\n            <div class="empty-text">Erro ao carregar salas</div>\n          </div>\n        `;\n      }\n    }\n    \n    // Traduzir tipo de sala\n    function translateRoomType(type) {\n      const translations = {\n        \'therapy\': \'Terapia\',\n        \'evaluation\': \'Avaliação\',\n        \'group\': \'Grupo\',\n        \'sensory\': \'Sensorial\',\n        \'meeting\': \'Reunião\',\n        \'administration\': \'Administração\',\n        \'other\': \'Outro\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Carregar estatísticas detalhadas\n    async function loadDetailedStats(facilityId) {\n      try {\n        // Carregar contagem de salas\n        const roomsResponse = await fetch(`/api/facilities/${facilityId}/rooms`, {\n          credentials: \'include\'\n        });\n        \n        if (roomsResponse.ok) {\n          const rooms = await roomsResponse.json();\n          document.getElementById(\'viewFacilityRoomCount\').textContent = rooms.length;\n        }\n        \n        // Carregar contagem de profissionais\n        const profsResponse = await fetch(`/api/professionals?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (profsResponse.ok) {\n          const professionals = await profsResponse.json();\n          document.getElementById(\'viewFacilityProfessionalCount\').textContent = professionals.length;\n        }\n        \n        // Carregar contagem de pacientes\n        const patientsResponse = await fetch(`/api/patients?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (patientsResponse.ok) {\n          const patients = await patientsResponse.json();\n          document.getElementById(\'viewFacilityPatientCount\').textContent = patients.length;\n        }\n        \n        // Carregar contagem de agendamentos\n        const appointmentsResponse = await fetch(`/api/appointments?facilityId=${facilityId}`, {\n          credentials: \'include\'\n        });\n        \n        if (appointmentsResponse.ok) {\n          const appointments = await appointmentsResponse.json();\n          document.getElementById(\'viewFacilityAppointmentCount\').textContent = appointments.length;\n        }\n      } catch (error) {\n        console.error(`Erro ao carregar estatísticas detalhadas da unidade ${facilityId}:`, error);\n      }\n    }\n    \n    // Fechar modal de visualização\n    function closeViewFacilityModal() {\n      viewFacilityModal.classList.remove(\'active\');\n    }\n    \n    // Abrir modal para adicionar sala\n    function openAddRoomModal() {\n      if (!currentFacility) {\n        alert(\'Erro: Nenhuma unidade selecionada\');\n        return;\n      }\n      \n      roomModalTitle.textContent = \'Adicionar Sala\';\n      roomForm.reset();\n      roomIdInput.value = \'\';\n      roomFacilityIdInput.value = currentFacility.id;\n      document.getElementById(\'roomIsActive\').checked = true;\n      \n      roomModal.classList.add(\'active\');\n    }\n    \n    // Abrir modal para editar sala\n    async function editRoom(roomId) {\n      try {\n        const response = await fetch(`/api/rooms/${roomId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar detalhes da sala\');\n        }\n        \n        const room = await response.json();\n        \n        roomModalTitle.textContent = \'Editar Sala\';\n        \n        // Preencher formulário\n        roomIdInput.value = room.id;\n        roomFacilityIdInput.value = room.facilityId;\n        document.getElementById(\'roomName\').value = room.name;\n        document.getElementById(\'roomCapacity\').value = room.capacity || 1;\n        document.getElementById(\'roomType\').value = room.type || \'therapy\';\n        document.getElementById(\'roomFloor\').value = room.floor || \'\';\n        document.getElementById(\'roomDescription\').value = room.description || \'\';\n        document.getElementById(\'roomEquipment\').value = room.equipment || \'\';\n        document.getElementById(\'roomIsActive\').checked = room.isActive;\n        \n        roomModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar sala:\', error);\n        alert(\'Erro ao carregar detalhes da sala. Tente novamente.\');\n      }\n    }\n    \n    // Fechar modal de sala\n    function closeRoomModal() {\n      roomModal.classList.remove(\'active\');\n    }\n    \n    // Salvar sala\n    async function saveRoom() {\n      try {\n        // Validação\n        const nameInput = document.getElementById(\'roomName\');\n        \n        if (!nameInput.value) {\n          alert(\'Por favor, insira o nome da sala\');\n          nameInput.focus();\n          return;\n        }\n        \n        // Preparar dados da sala\n        const roomData = {\n          facilityId: parseInt(roomFacilityIdInput.value),\n          name: nameInput.value,\n          capacity: parseInt(document.getElementById(\'roomCapacity\').value) || 1,\n          type: document.getElementById(\'roomType\').value,\n          floor: document.getElementById(\'roomFloor\').value,\n          description: document.getElementById(\'roomDescription\').value,\n          equipment: document.getElementById(\'roomEquipment\').value,\n          isActive: document.getElementById(\'roomIsActive\').checked\n        };\n        \n        const roomId = roomIdInput.value;\n        let response;\n        \n        if (roomId) {\n          // Editar sala existente\n          response = await fetch(`/api/rooms/${roomId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(roomData)\n          });\n        } else {\n          // Adicionar nova sala\n          response = await fetch(\'/api/rooms\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(roomData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(errorText || \'Erro ao salvar sala\');\n        }\n        \n        // Fechar modal e recarregar salas\n        closeRoomModal();\n        loadRooms(currentFacility.id);\n        \n        alert(roomId ? \'Sala atualizada com sucesso!\' : \'Sala adicionada com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar sala:\', error);\n        alert(`Erro ao salvar sala: ${error.message}`);\n      }\n    }\n    \n    // Excluir sala\n    async function deleteRoom(roomId) {\n      if (!confirm(\'Tem certeza que deseja excluir esta sala?\')) {\n        return;\n      }\n      \n      try {\n        const response = await fetch(`/api/rooms/${roomId}`, {\n          method: \'DELETE\',\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao excluir sala\');\n        }\n        \n        // Recarregar salas\n        loadRooms(currentFacility.id);\n        \n        alert(\'Sala excluída com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao excluir sala:\', error);\n        alert(`Erro ao excluir sala: ${error.message}`);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n  </script>\n', PosixPath('client/public/facilities.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 92517d33acf06d957d363d496f158649089930e1ba27dcd5f8ec70b40637bd2e1399e4db786be1730842e307b6c795acc9290f5d7e60f1213f65db77bc79f2c1_0
2025-05-07 18:31:35,223 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('client/public/patients.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 0f52c348815d9144abeaa9b38acf583a6f1eafa2e660076282cc21d8392e49f3929ab8d883fcf50710333123631b1003c4b1a5ab348b0a24ac5733333857aa0f_0
2025-05-07 18:31:35,229 - semgrep.rule_match - DEBUG - match_key = ('\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', () => {\n      checkAuth();\n      loadPatients();\n      loadInsurancePlans();\n      setupEventListeners();\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const patientsTableBody = document.getElementById(\'patientsTableBody\');\n    const searchPatientInput = document.getElementById(\'searchPatient\');\n    const addPatientBtn = document.getElementById(\'addPatientBtn\');\n    const patientModal = document.getElementById(\'patientModal\');\n    const viewPatientModal = document.getElementById(\'viewPatientModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const patientForm = document.getElementById(\'patientForm\');\n    const patientIdInput = document.getElementById(\'patientId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    const closeViewButton = document.getElementById(\'closeViewButton\');\n    const editFromViewButton = document.getElementById(\'editFromViewButton\');\n    const paginationElement = document.getElementById(\'pagination\');\n    \n    // Configuração de paginação\n    let currentPage = 1;\n    const pageSize = 10;\n    let totalPages = 1;\n    let patients = [];\n    let filteredPatients = [];\n    let insurancePlans = [];\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        const userData = await response.json();\n        displayUserData(userData);\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir gênero do inglês para português\n    function translateGender(gender) {\n      const translations = {\n        \'male\': \'Masculino\',\n        \'female\': \'Feminino\',\n        \'other\': \'Outro\',\n        \'not_inform\': \'Não informado\'\n      };\n      \n      return translations[gender] || \'Não informado\';\n    }\n    \n    // Formatar data\n    function formatDate(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleDateString(\'pt-BR\');\n    }\n    \n    // Calcular idade a partir da data de nascimento\n    function calculateAge(birthDateString) {\n      if (!birthDateString) return \'\';\n      \n      const birthDate = new Date(birthDateString);\n      const today = new Date();\n      let age = today.getFullYear() - birthDate.getFullYear();\n      const monthDiff = today.getMonth() - birthDate.getMonth();\n      \n      if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n        age--;\n      }\n      \n      return `${age} anos`;\n    }\n    \n    // Carregar lista de pacientes\n    async function loadPatients(searchTerm = \'\') {\n      try {\n        let url = \'/api/patients\';\n        if (searchTerm) {\n          url += `?search=${encodeURIComponent(searchTerm)}`;\n        }\n        \n        const response = await fetch(url, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar pacientes\');\n        }\n        \n        patients = await response.json();\n        filteredPatients = [...patients];\n        \n        // Aplicar filtragem se houver termo de pesquisa\n        if (searchTerm) {\n          filteredPatients = patients.filter(patient => \n            patient.fullName.toLowerCase().includes(searchTerm.toLowerCase())\n          );\n        }\n        \n        // Calcular número total de páginas\n        totalPages = Math.ceil(filteredPatients.length / pageSize);\n        \n        // Renderizar tabela e paginação\n        renderPatientsTable();\n        renderPagination();\n      } catch (error) {\n        console.error(\'Erro ao carregar pacientes:\', error);\n        patientsTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">\n              <div class="empty-state">\n                <div class="empty-icon">❌</div>\n                <div class="empty-text">Erro ao carregar pacientes. Tente novamente.</div>\n                <button class="button button-primary" onclick="loadPatients()">Tentar novamente</button>\n              </div>\n            </td>\n          </tr>\n        `;\n      }\n    }\n    \n    // Renderizar tabela de pacientes\n    function renderPatientsTable() {\n      // Se não há pacientes\n      if (filteredPatients.length === 0) {\n        patientsTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">\n              <div class="empty-state">\n                <div class="empty-icon">👥</div>\n                <div class="empty-text">Nenhum paciente encontrado.</div>\n                <button class="button button-primary" id="emptyAddPatientBtn">Adicionar Paciente</button>\n              </div>\n            </td>\n          </tr>\n        `;\n        \n        document.getElementById(\'emptyAddPatientBtn\')?.addEventListener(\'click\', openAddPatientModal);\n        return;\n      }\n      \n      // Calcular índices para paginação\n      const startIndex = (currentPage - 1) * pageSize;\n      const endIndex = Math.min(startIndex + pageSize, filteredPatients.length);\n      const patientsToShow = filteredPatients.slice(startIndex, endIndex);\n      \n      // Limpar tabela\n      patientsTableBody.innerHTML = \'\';\n      \n      // Adicionar linhas\n      patientsToShow.forEach(patient => {\n        const row = document.createElement(\'tr\');\n        \n        row.innerHTML = `\n          <td>${patient.fullName}</td>\n          <td>${formatDate(patient.dateOfBirth)}</td>\n          <td>${patient.cpf || \'N/A\'}</td>\n          <td>${patient.phone || \'N/A\'}</td>\n          <td>\n            <span class="status ${patient.isActive ? \'status-active\' : \'status-inactive\'}">\n              ${patient.isActive ? \'Ativo\' : \'Inativo\'}\n            </span>\n          </td>\n          <td>\n            <button class="action-button view-patient" data-id="${patient.id}">Visualizar</button>\n            <button class="action-button edit-patient" data-id="${patient.id}">Editar</button>\n          </td>\n        `;\n        \n        patientsTableBody.appendChild(row);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-patient\').forEach(button => {\n        button.addEventListener(\'click\', () => viewPatient(button.dataset.id));\n      });\n      \n      document.querySelectorAll(\'.edit-patient\').forEach(button => {\n        button.addEventListener(\'click\', () => editPatient(button.dataset.id));\n      });\n    }\n    \n    // Renderizar paginação\n    function renderPagination() {\n      if (totalPages <= 1) {\n        paginationElement.innerHTML = \'\';\n        return;\n      }\n      \n      let paginationHTML = \'\';\n      \n      // Botão anterior\n      paginationHTML += `\n        <li>\n          <a href="#" class="${currentPage === 1 ? \'disabled\' : \'\'}" \n             onclick="${currentPage > 1 ? \'changePage(\' + (currentPage - 1) + \')\' : \'return false\'}">\n            &laquo;\n          </a>\n        </li>\n      `;\n      \n      // Páginas numéricas\n      for (let i = 1; i <= totalPages; i++) {\n        paginationHTML += `\n          <li>\n            <a href="#" class="${i === currentPage ? \'active\' : \'\'}" \n               onclick="changePage(${i})">\n              ${i}\n            </a>\n          </li>\n        `;\n      }\n      \n      // Botão próximo\n      paginationHTML += `\n        <li>\n          <a href="#" class="${currentPage === totalPages ? \'disabled\' : \'\'}" \n             onclick="${currentPage < totalPages ? \'changePage(\' + (currentPage + 1) + \')\' : \'return false\'}">\n            &raquo;\n          </a>\n        </li>\n      `;\n      \n      paginationElement.innerHTML = paginationHTML;\n    }\n    \n    // Mudar página\n    function changePage(page) {\n      currentPage = page;\n      renderPatientsTable();\n      renderPagination();\n      return false; // Prevenir comportamento padrão do link\n    }\n    \n    // Carregar planos de saúde\n    async function loadInsurancePlans() {\n      try {\n        const response = await fetch(\'/api/insurance-plans\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar planos de saúde\');\n        }\n        \n        insurancePlans = await response.json();\n        const insurancePlanSelect = document.getElementById(\'insurancePlanId\');\n        \n        // Limpar select\n        insurancePlanSelect.innerHTML = \'<option value="">Selecione</option>\';\n        \n        // Adicionar opções\n        insurancePlans.forEach(plan => {\n          const option = document.createElement(\'option\');\n          option.value = plan.id;\n          option.textContent = plan.name;\n          insurancePlanSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar planos de saúde:\', error);\n      }\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Pesquisa\n      searchPatientInput.addEventListener(\'input\', debounce(function() {\n        currentPage = 1; // Voltar para a primeira página ao pesquisar\n        loadPatients(this.value);\n      }, 500));\n      \n      // Adicionar paciente\n      addPatientBtn.addEventListener(\'click\', openAddPatientModal);\n      \n      // Fechar modal\n      closeModal.addEventListener(\'click\', closePatientModal);\n      closeViewModal.addEventListener(\'click\', closeViewPatientModal);\n      cancelButton.addEventListener(\'click\', closePatientModal);\n      closeViewButton.addEventListener(\'click\', closeViewPatientModal);\n      \n      // Modal de background\n      patientModal.addEventListener(\'click\', function(e) {\n        if (e.target === patientModal) {\n          closePatientModal();\n        }\n      });\n      \n      viewPatientModal.addEventListener(\'click\', function(e) {\n        if (e.target === viewPatientModal) {\n          closeViewPatientModal();\n        }\n      });\n      \n      // Salvar paciente\n      saveButton.addEventListener(\'click\', savePatient);\n      \n      // Editar a partir da visualização\n      editFromViewButton.addEventListener(\'click\', function() {\n        closeViewPatientModal();\n        editPatient(this.dataset.patientId);\n      });\n    }\n    \n    // Abrir modal para adicionar paciente\n    function openAddPatientModal() {\n      modalTitle.textContent = \'Adicionar Paciente\';\n      patientForm.reset();\n      patientIdInput.value = \'\';\n      document.getElementById(\'isActive\').checked = true;\n      \n      patientModal.classList.add(\'active\');\n    }\n    \n    // Editar paciente\n    async function editPatient(patientId) {\n      try {\n        modalTitle.textContent = \'Editar Paciente\';\n        \n        const patient = patients.find(p => p.id == patientId);\n        \n        if (!patient) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/patients/${patientId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados do paciente\');\n          }\n          \n          const patientData = await response.json();\n          fillPatientForm(patientData);\n        } else {\n          fillPatientForm(patient);\n        }\n        \n        patientModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar paciente:\', error);\n        alert(\'Erro ao carregar dados do paciente. Tente novamente.\');\n      }\n    }\n    \n    // Preencher formulário com dados do paciente\n    function fillPatientForm(patient) {\n      patientIdInput.value = patient.id;\n      document.getElementById(\'fullName\').value = patient.fullName || \'\';\n      document.getElementById(\'dateOfBirth\').value = patient.dateOfBirth ? new Date(patient.dateOfBirth).toISOString().split(\'T\')[0] : \'\';\n      document.getElementById(\'cpf\').value = patient.cpf || \'\';\n      document.getElementById(\'rg\').value = patient.rg || \'\';\n      document.getElementById(\'gender\').value = patient.gender || \'\';\n      document.getElementById(\'phone\').value = patient.phone || \'\';\n      document.getElementById(\'email\').value = patient.email || \'\';\n      document.getElementById(\'emergencyContact\').value = patient.emergencyContact || \'\';\n      document.getElementById(\'address\').value = patient.address || \'\';\n      document.getElementById(\'city\').value = patient.city || \'\';\n      document.getElementById(\'state\').value = patient.state || \'\';\n      document.getElementById(\'zipCode\').value = patient.zipCode || \'\';\n      document.getElementById(\'insurancePlanId\').value = patient.insurancePlanId || \'\';\n      document.getElementById(\'insuranceNumber\').value = patient.insuranceNumber || \'\';\n      document.getElementById(\'insuranceExpirationDate\').value = patient.insuranceExpirationDate ? new Date(patient.insuranceExpirationDate).toISOString().split(\'T\')[0] : \'\';\n      document.getElementById(\'healthConditions\').value = patient.healthConditions || \'\';\n      document.getElementById(\'allergies\').value = patient.allergies || \'\';\n      document.getElementById(\'medications\').value = patient.medications || \'\';\n      document.getElementById(\'notes\').value = patient.notes || \'\';\n      document.getElementById(\'isActive\').checked = patient.isActive !== false; // Default to true if undefined\n    }\n    \n    // Visualizar paciente\n    async function viewPatient(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar dados do paciente\');\n        }\n        \n        const patient = await response.json();\n        \n        // Preencher dados na modal de visualização\n        document.getElementById(\'patientViewName\').textContent = patient.fullName || \'N/A\';\n        document.getElementById(\'patientViewAge\').textContent = calculateAge(patient.dateOfBirth);\n        \n        // Iniciais para o avatar\n        const initials = patient.fullName\n          ? patient.fullName.split(\' \').map(name => name.charAt(0)).join(\'\').substring(0, 2).toUpperCase()\n          : \'??\';\n        document.getElementById(\'patientViewAvatar\').textContent = initials;\n        \n        // Informações pessoais\n        document.getElementById(\'patientViewCpf\').textContent = patient.cpf || \'N/A\';\n        document.getElementById(\'patientViewRg\').textContent = patient.rg || \'N/A\';\n        document.getElementById(\'patientViewDob\').textContent = formatDate(patient.dateOfBirth);\n        document.getElementById(\'patientViewGender\').textContent = translateGender(patient.gender);\n        document.getElementById(\'patientViewPhone\').textContent = patient.phone || \'N/A\';\n        document.getElementById(\'patientViewEmail\').textContent = patient.email || \'N/A\';\n        document.getElementById(\'patientViewEmergency\').textContent = patient.emergencyContact || \'N/A\';\n        \n        const statusElement = document.getElementById(\'patientViewStatus\');\n        statusElement.textContent = patient.isActive ? \'Ativo\' : \'Inativo\';\n        statusElement.className = `status ${patient.isActive ? \'status-active\' : \'status-inactive\'}`;\n        \n        // Endereço\n        document.getElementById(\'patientViewAddress\').textContent = patient.address || \'N/A\';\n        document.getElementById(\'patientViewCity\').textContent = patient.city || \'N/A\';\n        document.getElementById(\'patientViewState\').textContent = patient.state || \'N/A\';\n        document.getElementById(\'patientViewZip\').textContent = patient.zipCode || \'N/A\';\n        \n        // Plano de saúde\n        const planName = patient.insurancePlan ? patient.insurancePlan.name : \'N/A\';\n        document.getElementById(\'patientViewPlan\').textContent = planName;\n        document.getElementById(\'patientViewPlanNumber\').textContent = patient.insuranceNumber || \'N/A\';\n        document.getElementById(\'patientViewPlanExpiration\').textContent = formatDate(patient.insuranceExpirationDate);\n        \n        // Saúde\n        document.getElementById(\'patientViewHealth\').textContent = patient.healthConditions || \'Nenhuma registrada\';\n        document.getElementById(\'patientViewAllergies\').textContent = patient.allergies || \'Nenhuma registrada\';\n        document.getElementById(\'patientViewMedications\').textContent = patient.medications || \'Nenhuma registrada\';\n        \n        // Observações\n        document.getElementById(\'patientViewNotes\').textContent = patient.notes || \'Nenhuma observação\';\n        \n        // Configurar botão de edição\n        editFromViewButton.dataset.patientId = patient.id;\n        \n        // Abrir modal\n        viewPatientModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar paciente:\', error);\n        alert(\'Erro ao carregar dados do paciente. Tente novamente.\');\n      }\n    }\n    \n    // Fechar modal\n    function closePatientModal() {\n      patientModal.classList.remove(\'active\');\n    }\n    \n    // Fechar modal de visualização\n    function closeViewPatientModal() {\n      viewPatientModal.classList.remove(\'active\');\n    }\n    \n    // Salvar paciente\n    async function savePatient() {\n      try {\n        // Validação básica\n        const fullName = document.getElementById(\'fullName\').value.trim();\n        const dateOfBirth = document.getElementById(\'dateOfBirth\').value;\n        const cpf = document.getElementById(\'cpf\').value.trim();\n        const phone = document.getElementById(\'phone\').value.trim();\n        \n        if (!fullName || !dateOfBirth || !cpf || !phone) {\n          alert(\'Por favor, preencha todos os campos obrigatórios.\');\n          return;\n        }\n        \n        // Preparar dados do paciente\n        const patientData = {\n          fullName,\n          dateOfBirth,\n          cpf,\n          rg: document.getElementById(\'rg\').value.trim(),\n          gender: document.getElementById(\'gender\').value,\n          phone,\n          email: document.getElementById(\'email\').value.trim(),\n          emergencyContact: document.getElementById(\'emergencyContact\').value.trim(),\n          address: document.getElementById(\'address\').value.trim(),\n          city: document.getElementById(\'city\').value.trim(),\n          state: document.getElementById(\'state\').value.trim(),\n          zipCode: document.getElementById(\'zipCode\').value.trim(),\n          insurancePlanId: document.getElementById(\'insurancePlanId\').value || null,\n          insuranceNumber: document.getElementById(\'insuranceNumber\').value.trim(),\n          insuranceExpirationDate: document.getElementById(\'insuranceExpirationDate\').value || null,\n          healthConditions: document.getElementById(\'healthConditions\').value.trim(),\n          allergies: document.getElementById(\'allergies\').value.trim(),\n          medications: document.getElementById(\'medications\').value.trim(),\n          notes: document.getElementById(\'notes\').value.trim(),\n          isActive: document.getElementById(\'isActive\').checked\n        };\n        \n        const patientId = patientIdInput.value;\n        let response;\n        \n        if (patientId) {\n          // Editar paciente existente\n          response = await fetch(`/api/patients/${patientId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(patientData)\n          });\n        } else {\n          // Adicionar novo paciente\n          response = await fetch(\'/api/patients\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(patientData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || \'Erro ao salvar paciente\');\n        }\n        \n        // Fechar modal e recarregar lista\n        closePatientModal();\n        loadPatients(searchPatientInput.value);\n        \n        alert(patientId ? \'Paciente atualizado com sucesso!\' : \'Paciente adicionado com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar paciente:\', error);\n        alert(`Erro ao salvar paciente: ${error.message}`);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n    \n    // Utilidade para debounce (limitar execução de função)\n    function debounce(func, wait) {\n      let timeout;\n      return function(...args) {\n        const context = this;\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(context, args), wait);\n      };\n    }\n   $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', () => {\n      checkAuth();\n      loadPatients();\n      loadInsurancePlans();\n      setupEventListeners();\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const patientsTableBody = document.getElementById(\'patientsTableBody\');\n    const searchPatientInput = document.getElementById(\'searchPatient\');\n    const addPatientBtn = document.getElementById(\'addPatientBtn\');\n    const patientModal = document.getElementById(\'patientModal\');\n    const viewPatientModal = document.getElementById(\'viewPatientModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const patientForm = document.getElementById(\'patientForm\');\n    const patientIdInput = document.getElementById(\'patientId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    const closeViewButton = document.getElementById(\'closeViewButton\');\n    const editFromViewButton = document.getElementById(\'editFromViewButton\');\n    const paginationElement = document.getElementById(\'pagination\');\n    \n    // Configuração de paginação\n    let currentPage = 1;\n    const pageSize = 10;\n    let totalPages = 1;\n    let patients = [];\n    let filteredPatients = [];\n    let insurancePlans = [];\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        const userData = await response.json();\n        displayUserData(userData);\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir gênero do inglês para português\n    function translateGender(gender) {\n      const translations = {\n        \'male\': \'Masculino\',\n        \'female\': \'Feminino\',\n        \'other\': \'Outro\',\n        \'not_inform\': \'Não informado\'\n      };\n      \n      return translations[gender] || \'Não informado\';\n    }\n    \n    // Formatar data\n    function formatDate(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleDateString(\'pt-BR\');\n    }\n    \n    // Calcular idade a partir da data de nascimento\n    function calculateAge(birthDateString) {\n      if (!birthDateString) return \'\';\n      \n      const birthDate = new Date(birthDateString);\n      const today = new Date();\n      let age = today.getFullYear() - birthDate.getFullYear();\n      const monthDiff = today.getMonth() - birthDate.getMonth();\n      \n      if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n        age--;\n      }\n      \n      return `${age} anos`;\n    }\n    \n    // Carregar lista de pacientes\n    async function loadPatients(searchTerm = \'\') {\n      try {\n        let url = \'/api/patients\';\n        if (searchTerm) {\n          url += `?search=${encodeURIComponent(searchTerm)}`;\n        }\n        \n        const response = await fetch(url, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar pacientes\');\n        }\n        \n        patients = await response.json();\n        filteredPatients = [...patients];\n        \n        // Aplicar filtragem se houver termo de pesquisa\n        if (searchTerm) {\n          filteredPatients = patients.filter(patient => \n            patient.fullName.toLowerCase().includes(searchTerm.toLowerCase())\n          );\n        }\n        \n        // Calcular número total de páginas\n        totalPages = Math.ceil(filteredPatients.length / pageSize);\n        \n        // Renderizar tabela e paginação\n        renderPatientsTable();\n        renderPagination();\n      } catch (error) {\n        console.error(\'Erro ao carregar pacientes:\', error);\n        patientsTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">\n              <div class="empty-state">\n                <div class="empty-icon">❌</div>\n                <div class="empty-text">Erro ao carregar pacientes. Tente novamente.</div>\n                <button class="button button-primary" onclick="loadPatients()">Tentar novamente</button>\n              </div>\n            </td>\n          </tr>\n        `;\n      }\n    }\n    \n    // Renderizar tabela de pacientes\n    function renderPatientsTable() {\n      // Se não há pacientes\n      if (filteredPatients.length === 0) {\n        patientsTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">\n              <div class="empty-state">\n                <div class="empty-icon">👥</div>\n                <div class="empty-text">Nenhum paciente encontrado.</div>\n                <button class="button button-primary" id="emptyAddPatientBtn">Adicionar Paciente</button>\n              </div>\n            </td>\n          </tr>\n        `;\n        \n        document.getElementById(\'emptyAddPatientBtn\')?.addEventListener(\'click\', openAddPatientModal);\n        return;\n      }\n      \n      // Calcular índices para paginação\n      const startIndex = (currentPage - 1) * pageSize;\n      const endIndex = Math.min(startIndex + pageSize, filteredPatients.length);\n      const patientsToShow = filteredPatients.slice(startIndex, endIndex);\n      \n      // Limpar tabela\n      patientsTableBody.innerHTML = \'\';\n      \n      // Adicionar linhas\n      patientsToShow.forEach(patient => {\n        const row = document.createElement(\'tr\');\n        \n        row.innerHTML = `\n          <td>${patient.fullName}</td>\n          <td>${formatDate(patient.dateOfBirth)}</td>\n          <td>${patient.cpf || \'N/A\'}</td>\n          <td>${patient.phone || \'N/A\'}</td>\n          <td>\n            <span class="status ${patient.isActive ? \'status-active\' : \'status-inactive\'}">\n              ${patient.isActive ? \'Ativo\' : \'Inativo\'}\n            </span>\n          </td>\n          <td>\n            <button class="action-button view-patient" data-id="${patient.id}">Visualizar</button>\n            <button class="action-button edit-patient" data-id="${patient.id}">Editar</button>\n          </td>\n        `;\n        \n        patientsTableBody.appendChild(row);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-patient\').forEach(button => {\n        button.addEventListener(\'click\', () => viewPatient(button.dataset.id));\n      });\n      \n      document.querySelectorAll(\'.edit-patient\').forEach(button => {\n        button.addEventListener(\'click\', () => editPatient(button.dataset.id));\n      });\n    }\n    \n    // Renderizar paginação\n    function renderPagination() {\n      if (totalPages <= 1) {\n        paginationElement.innerHTML = \'\';\n        return;\n      }\n      \n      let paginationHTML = \'\';\n      \n      // Botão anterior\n      paginationHTML += `\n        <li>\n          <a href="#" class="${currentPage === 1 ? \'disabled\' : \'\'}" \n             onclick="${currentPage > 1 ? \'changePage(\' + (currentPage - 1) + \')\' : \'return false\'}">\n            &laquo;\n          </a>\n        </li>\n      `;\n      \n      // Páginas numéricas\n      for (let i = 1; i <= totalPages; i++) {\n        paginationHTML += `\n          <li>\n            <a href="#" class="${i === currentPage ? \'active\' : \'\'}" \n               onclick="changePage(${i})">\n              ${i}\n            </a>\n          </li>\n        `;\n      }\n      \n      // Botão próximo\n      paginationHTML += `\n        <li>\n          <a href="#" class="${currentPage === totalPages ? \'disabled\' : \'\'}" \n             onclick="${currentPage < totalPages ? \'changePage(\' + (currentPage + 1) + \')\' : \'return false\'}">\n            &raquo;\n          </a>\n        </li>\n      `;\n      \n      paginationElement.innerHTML = paginationHTML;\n    }\n    \n    // Mudar página\n    function changePage(page) {\n      currentPage = page;\n      renderPatientsTable();\n      renderPagination();\n      return false; // Prevenir comportamento padrão do link\n    }\n    \n    // Carregar planos de saúde\n    async function loadInsurancePlans() {\n      try {\n        const response = await fetch(\'/api/insurance-plans\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar planos de saúde\');\n        }\n        \n        insurancePlans = await response.json();\n        const insurancePlanSelect = document.getElementById(\'insurancePlanId\');\n        \n        // Limpar select\n        insurancePlanSelect.innerHTML = \'<option value="">Selecione</option>\';\n        \n        // Adicionar opções\n        insurancePlans.forEach(plan => {\n          const option = document.createElement(\'option\');\n          option.value = plan.id;\n          option.textContent = plan.name;\n          insurancePlanSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar planos de saúde:\', error);\n      }\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Pesquisa\n      searchPatientInput.addEventListener(\'input\', debounce(function() {\n        currentPage = 1; // Voltar para a primeira página ao pesquisar\n        loadPatients(this.value);\n      }, 500));\n      \n      // Adicionar paciente\n      addPatientBtn.addEventListener(\'click\', openAddPatientModal);\n      \n      // Fechar modal\n      closeModal.addEventListener(\'click\', closePatientModal);\n      closeViewModal.addEventListener(\'click\', closeViewPatientModal);\n      cancelButton.addEventListener(\'click\', closePatientModal);\n      closeViewButton.addEventListener(\'click\', closeViewPatientModal);\n      \n      // Modal de background\n      patientModal.addEventListener(\'click\', function(e) {\n        if (e.target === patientModal) {\n          closePatientModal();\n        }\n      });\n      \n      viewPatientModal.addEventListener(\'click\', function(e) {\n        if (e.target === viewPatientModal) {\n          closeViewPatientModal();\n        }\n      });\n      \n      // Salvar paciente\n      saveButton.addEventListener(\'click\', savePatient);\n      \n      // Editar a partir da visualização\n      editFromViewButton.addEventListener(\'click\', function() {\n        closeViewPatientModal();\n        editPatient(this.dataset.patientId);\n      });\n    }\n    \n    // Abrir modal para adicionar paciente\n    function openAddPatientModal() {\n      modalTitle.textContent = \'Adicionar Paciente\';\n      patientForm.reset();\n      patientIdInput.value = \'\';\n      document.getElementById(\'isActive\').checked = true;\n      \n      patientModal.classList.add(\'active\');\n    }\n    \n    // Editar paciente\n    async function editPatient(patientId) {\n      try {\n        modalTitle.textContent = \'Editar Paciente\';\n        \n        const patient = patients.find(p => p.id == patientId);\n        \n        if (!patient) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/patients/${patientId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados do paciente\');\n          }\n          \n          const patientData = await response.json();\n          fillPatientForm(patientData);\n        } else {\n          fillPatientForm(patient);\n        }\n        \n        patientModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar paciente:\', error);\n        alert(\'Erro ao carregar dados do paciente. Tente novamente.\');\n      }\n    }\n    \n    // Preencher formulário com dados do paciente\n    function fillPatientForm(patient) {\n      patientIdInput.value = patient.id;\n      document.getElementById(\'fullName\').value = patient.fullName || \'\';\n      document.getElementById(\'dateOfBirth\').value = patient.dateOfBirth ? new Date(patient.dateOfBirth).toISOString().split(\'T\')[0] : \'\';\n      document.getElementById(\'cpf\').value = patient.cpf || \'\';\n      document.getElementById(\'rg\').value = patient.rg || \'\';\n      document.getElementById(\'gender\').value = patient.gender || \'\';\n      document.getElementById(\'phone\').value = patient.phone || \'\';\n      document.getElementById(\'email\').value = patient.email || \'\';\n      document.getElementById(\'emergencyContact\').value = patient.emergencyContact || \'\';\n      document.getElementById(\'address\').value = patient.address || \'\';\n      document.getElementById(\'city\').value = patient.city || \'\';\n      document.getElementById(\'state\').value = patient.state || \'\';\n      document.getElementById(\'zipCode\').value = patient.zipCode || \'\';\n      document.getElementById(\'insurancePlanId\').value = patient.insurancePlanId || \'\';\n      document.getElementById(\'insuranceNumber\').value = patient.insuranceNumber || \'\';\n      document.getElementById(\'insuranceExpirationDate\').value = patient.insuranceExpirationDate ? new Date(patient.insuranceExpirationDate).toISOString().split(\'T\')[0] : \'\';\n      document.getElementById(\'healthConditions\').value = patient.healthConditions || \'\';\n      document.getElementById(\'allergies\').value = patient.allergies || \'\';\n      document.getElementById(\'medications\').value = patient.medications || \'\';\n      document.getElementById(\'notes\').value = patient.notes || \'\';\n      document.getElementById(\'isActive\').checked = patient.isActive !== false; // Default to true if undefined\n    }\n    \n    // Visualizar paciente\n    async function viewPatient(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar dados do paciente\');\n        }\n        \n        const patient = await response.json();\n        \n        // Preencher dados na modal de visualização\n        document.getElementById(\'patientViewName\').textContent = patient.fullName || \'N/A\';\n        document.getElementById(\'patientViewAge\').textContent = calculateAge(patient.dateOfBirth);\n        \n        // Iniciais para o avatar\n        const initials = patient.fullName\n          ? patient.fullName.split(\' \').map(name => name.charAt(0)).join(\'\').substring(0, 2).toUpperCase()\n          : \'??\';\n        document.getElementById(\'patientViewAvatar\').textContent = initials;\n        \n        // Informações pessoais\n        document.getElementById(\'patientViewCpf\').textContent = patient.cpf || \'N/A\';\n        document.getElementById(\'patientViewRg\').textContent = patient.rg || \'N/A\';\n        document.getElementById(\'patientViewDob\').textContent = formatDate(patient.dateOfBirth);\n        document.getElementById(\'patientViewGender\').textContent = translateGender(patient.gender);\n        document.getElementById(\'patientViewPhone\').textContent = patient.phone || \'N/A\';\n        document.getElementById(\'patientViewEmail\').textContent = patient.email || \'N/A\';\n        document.getElementById(\'patientViewEmergency\').textContent = patient.emergencyContact || \'N/A\';\n        \n        const statusElement = document.getElementById(\'patientViewStatus\');\n        statusElement.textContent = patient.isActive ? \'Ativo\' : \'Inativo\';\n        statusElement.className = `status ${patient.isActive ? \'status-active\' : \'status-inactive\'}`;\n        \n        // Endereço\n        document.getElementById(\'patientViewAddress\').textContent = patient.address || \'N/A\';\n        document.getElementById(\'patientViewCity\').textContent = patient.city || \'N/A\';\n        document.getElementById(\'patientViewState\').textContent = patient.state || \'N/A\';\n        document.getElementById(\'patientViewZip\').textContent = patient.zipCode || \'N/A\';\n        \n        // Plano de saúde\n        const planName = patient.insurancePlan ? patient.insurancePlan.name : \'N/A\';\n        document.getElementById(\'patientViewPlan\').textContent = planName;\n        document.getElementById(\'patientViewPlanNumber\').textContent = patient.insuranceNumber || \'N/A\';\n        document.getElementById(\'patientViewPlanExpiration\').textContent = formatDate(patient.insuranceExpirationDate);\n        \n        // Saúde\n        document.getElementById(\'patientViewHealth\').textContent = patient.healthConditions || \'Nenhuma registrada\';\n        document.getElementById(\'patientViewAllergies\').textContent = patient.allergies || \'Nenhuma registrada\';\n        document.getElementById(\'patientViewMedications\').textContent = patient.medications || \'Nenhuma registrada\';\n        \n        // Observações\n        document.getElementById(\'patientViewNotes\').textContent = patient.notes || \'Nenhuma observação\';\n        \n        // Configurar botão de edição\n        editFromViewButton.dataset.patientId = patient.id;\n        \n        // Abrir modal\n        viewPatientModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar paciente:\', error);\n        alert(\'Erro ao carregar dados do paciente. Tente novamente.\');\n      }\n    }\n    \n    // Fechar modal\n    function closePatientModal() {\n      patientModal.classList.remove(\'active\');\n    }\n    \n    // Fechar modal de visualização\n    function closeViewPatientModal() {\n      viewPatientModal.classList.remove(\'active\');\n    }\n    \n    // Salvar paciente\n    async function savePatient() {\n      try {\n        // Validação básica\n        const fullName = document.getElementById(\'fullName\').value.trim();\n        const dateOfBirth = document.getElementById(\'dateOfBirth\').value;\n        const cpf = document.getElementById(\'cpf\').value.trim();\n        const phone = document.getElementById(\'phone\').value.trim();\n        \n        if (!fullName || !dateOfBirth || !cpf || !phone) {\n          alert(\'Por favor, preencha todos os campos obrigatórios.\');\n          return;\n        }\n        \n        // Preparar dados do paciente\n        const patientData = {\n          fullName,\n          dateOfBirth,\n          cpf,\n          rg: document.getElementById(\'rg\').value.trim(),\n          gender: document.getElementById(\'gender\').value,\n          phone,\n          email: document.getElementById(\'email\').value.trim(),\n          emergencyContact: document.getElementById(\'emergencyContact\').value.trim(),\n          address: document.getElementById(\'address\').value.trim(),\n          city: document.getElementById(\'city\').value.trim(),\n          state: document.getElementById(\'state\').value.trim(),\n          zipCode: document.getElementById(\'zipCode\').value.trim(),\n          insurancePlanId: document.getElementById(\'insurancePlanId\').value || null,\n          insuranceNumber: document.getElementById(\'insuranceNumber\').value.trim(),\n          insuranceExpirationDate: document.getElementById(\'insuranceExpirationDate\').value || null,\n          healthConditions: document.getElementById(\'healthConditions\').value.trim(),\n          allergies: document.getElementById(\'allergies\').value.trim(),\n          medications: document.getElementById(\'medications\').value.trim(),\n          notes: document.getElementById(\'notes\').value.trim(),\n          isActive: document.getElementById(\'isActive\').checked\n        };\n        \n        const patientId = patientIdInput.value;\n        let response;\n        \n        if (patientId) {\n          // Editar paciente existente\n          response = await fetch(`/api/patients/${patientId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(patientData)\n          });\n        } else {\n          // Adicionar novo paciente\n          response = await fetch(\'/api/patients\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(patientData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || \'Erro ao salvar paciente\');\n        }\n        \n        // Fechar modal e recarregar lista\n        closePatientModal();\n        loadPatients(searchPatientInput.value);\n        \n        alert(patientId ? \'Paciente atualizado com sucesso!\' : \'Paciente adicionado com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar paciente:\', error);\n        alert(`Erro ao salvar paciente: ${error.message}`);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n    \n    // Utilidade para debounce (limitar execução de função)\n    function debounce(func, wait) {\n      let timeout;\n      return function(...args) {\n        const context = this;\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(context, args), wait);\n      };\n    }\n  </script>\n', PosixPath('client/public/patients.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 2249c0027b56fc8ef70ca141f8927c175c8ac692ea423d235d5a97ad1b9ef115d87d95af92ab362ad31e475d14ce9d0455cba0972d360c67303822425c880c1d_0
2025-05-07 18:31:35,234 - semgrep.rule_match - DEBUG - match_key = ('\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', () => {\n      checkAuth();\n      loadPatients();\n      loadInsurancePlans();\n      setupEventListeners();\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const patientsTableBody = document.getElementById(\'patientsTableBody\');\n    const searchPatientInput = document.getElementById(\'searchPatient\');\n    const addPatientBtn = document.getElementById(\'addPatientBtn\');\n    const patientModal = document.getElementById(\'patientModal\');\n    const viewPatientModal = document.getElementById(\'viewPatientModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const patientForm = document.getElementById(\'patientForm\');\n    const patientIdInput = document.getElementById(\'patientId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    const closeViewButton = document.getElementById(\'closeViewButton\');\n    const editFromViewButton = document.getElementById(\'editFromViewButton\');\n    const paginationElement = document.getElementById(\'pagination\');\n    \n    // Configuração de paginação\n    let currentPage = 1;\n    const pageSize = 10;\n    let totalPages = 1;\n    let patients = [];\n    let filteredPatients = [];\n    let insurancePlans = [];\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        const userData = await response.json();\n        displayUserData(userData);\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir gênero do inglês para português\n    function translateGender(gender) {\n      const translations = {\n        \'male\': \'Masculino\',\n        \'female\': \'Feminino\',\n        \'other\': \'Outro\',\n        \'not_inform\': \'Não informado\'\n      };\n      \n      return translations[gender] || \'Não informado\';\n    }\n    \n    // Formatar data\n    function formatDate(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleDateString(\'pt-BR\');\n    }\n    \n    // Calcular idade a partir da data de nascimento\n    function calculateAge(birthDateString) {\n      if (!birthDateString) return \'\';\n      \n      const birthDate = new Date(birthDateString);\n      const today = new Date();\n      let age = today.getFullYear() - birthDate.getFullYear();\n      const monthDiff = today.getMonth() - birthDate.getMonth();\n      \n      if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n        age--;\n      }\n      \n      return `${age} anos`;\n    }\n    \n    // Carregar lista de pacientes\n    async function loadPatients(searchTerm = \'\') {\n      try {\n        let url = \'/api/patients\';\n        if (searchTerm) {\n          url += `?search=${encodeURIComponent(searchTerm)}`;\n        }\n        \n        const response = await fetch(url, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar pacientes\');\n        }\n        \n        patients = await response.json();\n        filteredPatients = [...patients];\n        \n        // Aplicar filtragem se houver termo de pesquisa\n        if (searchTerm) {\n          filteredPatients = patients.filter(patient => \n            patient.fullName.toLowerCase().includes(searchTerm.toLowerCase())\n          );\n        }\n        \n        // Calcular número total de páginas\n        totalPages = Math.ceil(filteredPatients.length / pageSize);\n        \n        // Renderizar tabela e paginação\n        renderPatientsTable();\n        renderPagination();\n      } catch (error) {\n        console.error(\'Erro ao carregar pacientes:\', error);\n        patientsTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">\n              <div class="empty-state">\n                <div class="empty-icon">❌</div>\n                <div class="empty-text">Erro ao carregar pacientes. Tente novamente.</div>\n                <button class="button button-primary" onclick="loadPatients()">Tentar novamente</button>\n              </div>\n            </td>\n          </tr>\n        `;\n      }\n    }\n    \n    // Renderizar tabela de pacientes\n    function renderPatientsTable() {\n      // Se não há pacientes\n      if (filteredPatients.length === 0) {\n        patientsTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">\n              <div class="empty-state">\n                <div class="empty-icon">👥</div>\n                <div class="empty-text">Nenhum paciente encontrado.</div>\n                <button class="button button-primary" id="emptyAddPatientBtn">Adicionar Paciente</button>\n              </div>\n            </td>\n          </tr>\n        `;\n        \n        document.getElementById(\'emptyAddPatientBtn\')?.addEventListener(\'click\', openAddPatientModal);\n        return;\n      }\n      \n      // Calcular índices para paginação\n      const startIndex = (currentPage - 1) * pageSize;\n      const endIndex = Math.min(startIndex + pageSize, filteredPatients.length);\n      const patientsToShow = filteredPatients.slice(startIndex, endIndex);\n      \n      // Limpar tabela\n      patientsTableBody.innerHTML = \'\';\n      \n      // Adicionar linhas\n      patientsToShow.forEach(patient => {\n        const row = document.createElement(\'tr\');\n        \n        row.innerHTML = `\n          <td>${patient.fullName}</td>\n          <td>${formatDate(patient.dateOfBirth)}</td>\n          <td>${patient.cpf || \'N/A\'}</td>\n          <td>${patient.phone || \'N/A\'}</td>\n          <td>\n            <span class="status ${patient.isActive ? \'status-active\' : \'status-inactive\'}">\n              ${patient.isActive ? \'Ativo\' : \'Inativo\'}\n            </span>\n          </td>\n          <td>\n            <button class="action-button view-patient" data-id="${patient.id}">Visualizar</button>\n            <button class="action-button edit-patient" data-id="${patient.id}">Editar</button>\n          </td>\n        `;\n        \n        patientsTableBody.appendChild(row);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-patient\').forEach(button => {\n        button.addEventListener(\'click\', () => viewPatient(button.dataset.id));\n      });\n      \n      document.querySelectorAll(\'.edit-patient\').forEach(button => {\n        button.addEventListener(\'click\', () => editPatient(button.dataset.id));\n      });\n    }\n    \n    // Renderizar paginação\n    function renderPagination() {\n      if (totalPages <= 1) {\n        paginationElement.innerHTML = \'\';\n        return;\n      }\n      \n      let paginationHTML = \'\';\n      \n      // Botão anterior\n      paginationHTML += `\n        <li>\n          <a href="#" class="${currentPage === 1 ? \'disabled\' : \'\'}" \n             onclick="${currentPage > 1 ? \'changePage(\' + (currentPage - 1) + \')\' : \'return false\'}">\n            &laquo;\n          </a>\n        </li>\n      `;\n      \n      // Páginas numéricas\n      for (let i = 1; i <= totalPages; i++) {\n        paginationHTML += `\n          <li>\n            <a href="#" class="${i === currentPage ? \'active\' : \'\'}" \n               onclick="changePage(${i})">\n              ${i}\n            </a>\n          </li>\n        `;\n      }\n      \n      // Botão próximo\n      paginationHTML += `\n        <li>\n          <a href="#" class="${currentPage === totalPages ? \'disabled\' : \'\'}" \n             onclick="${currentPage < totalPages ? \'changePage(\' + (currentPage + 1) + \')\' : \'return false\'}">\n            &raquo;\n          </a>\n        </li>\n      `;\n      \n      paginationElement.innerHTML = paginationHTML;\n    }\n    \n    // Mudar página\n    function changePage(page) {\n      currentPage = page;\n      renderPatientsTable();\n      renderPagination();\n      return false; // Prevenir comportamento padrão do link\n    }\n    \n    // Carregar planos de saúde\n    async function loadInsurancePlans() {\n      try {\n        const response = await fetch(\'/api/insurance-plans\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar planos de saúde\');\n        }\n        \n        insurancePlans = await response.json();\n        const insurancePlanSelect = document.getElementById(\'insurancePlanId\');\n        \n        // Limpar select\n        insurancePlanSelect.innerHTML = \'<option value="">Selecione</option>\';\n        \n        // Adicionar opções\n        insurancePlans.forEach(plan => {\n          const option = document.createElement(\'option\');\n          option.value = plan.id;\n          option.textContent = plan.name;\n          insurancePlanSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar planos de saúde:\', error);\n      }\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Pesquisa\n      searchPatientInput.addEventListener(\'input\', debounce(function() {\n        currentPage = 1; // Voltar para a primeira página ao pesquisar\n        loadPatients(this.value);\n      }, 500));\n      \n      // Adicionar paciente\n      addPatientBtn.addEventListener(\'click\', openAddPatientModal);\n      \n      // Fechar modal\n      closeModal.addEventListener(\'click\', closePatientModal);\n      closeViewModal.addEventListener(\'click\', closeViewPatientModal);\n      cancelButton.addEventListener(\'click\', closePatientModal);\n      closeViewButton.addEventListener(\'click\', closeViewPatientModal);\n      \n      // Modal de background\n      patientModal.addEventListener(\'click\', function(e) {\n        if (e.target === patientModal) {\n          closePatientModal();\n        }\n      });\n      \n      viewPatientModal.addEventListener(\'click\', function(e) {\n        if (e.target === viewPatientModal) {\n          closeViewPatientModal();\n        }\n      });\n      \n      // Salvar paciente\n      saveButton.addEventListener(\'click\', savePatient);\n      \n      // Editar a partir da visualização\n      editFromViewButton.addEventListener(\'click\', function() {\n        closeViewPatientModal();\n        editPatient(this.dataset.patientId);\n      });\n    }\n    \n    // Abrir modal para adicionar paciente\n    function openAddPatientModal() {\n      modalTitle.textContent = \'Adicionar Paciente\';\n      patientForm.reset();\n      patientIdInput.value = \'\';\n      document.getElementById(\'isActive\').checked = true;\n      \n      patientModal.classList.add(\'active\');\n    }\n    \n    // Editar paciente\n    async function editPatient(patientId) {\n      try {\n        modalTitle.textContent = \'Editar Paciente\';\n        \n        const patient = patients.find(p => p.id == patientId);\n        \n        if (!patient) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/patients/${patientId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados do paciente\');\n          }\n          \n          const patientData = await response.json();\n          fillPatientForm(patientData);\n        } else {\n          fillPatientForm(patient);\n        }\n        \n        patientModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar paciente:\', error);\n        alert(\'Erro ao carregar dados do paciente. Tente novamente.\');\n      }\n    }\n    \n    // Preencher formulário com dados do paciente\n    function fillPatientForm(patient) {\n      patientIdInput.value = patient.id;\n      document.getElementById(\'fullName\').value = patient.fullName || \'\';\n      document.getElementById(\'dateOfBirth\').value = patient.dateOfBirth ? new Date(patient.dateOfBirth).toISOString().split(\'T\')[0] : \'\';\n      document.getElementById(\'cpf\').value = patient.cpf || \'\';\n      document.getElementById(\'rg\').value = patient.rg || \'\';\n      document.getElementById(\'gender\').value = patient.gender || \'\';\n      document.getElementById(\'phone\').value = patient.phone || \'\';\n      document.getElementById(\'email\').value = patient.email || \'\';\n      document.getElementById(\'emergencyContact\').value = patient.emergencyContact || \'\';\n      document.getElementById(\'address\').value = patient.address || \'\';\n      document.getElementById(\'city\').value = patient.city || \'\';\n      document.getElementById(\'state\').value = patient.state || \'\';\n      document.getElementById(\'zipCode\').value = patient.zipCode || \'\';\n      document.getElementById(\'insurancePlanId\').value = patient.insurancePlanId || \'\';\n      document.getElementById(\'insuranceNumber\').value = patient.insuranceNumber || \'\';\n      document.getElementById(\'insuranceExpirationDate\').value = patient.insuranceExpirationDate ? new Date(patient.insuranceExpirationDate).toISOString().split(\'T\')[0] : \'\';\n      document.getElementById(\'healthConditions\').value = patient.healthConditions || \'\';\n      document.getElementById(\'allergies\').value = patient.allergies || \'\';\n      document.getElementById(\'medications\').value = patient.medications || \'\';\n      document.getElementById(\'notes\').value = patient.notes || \'\';\n      document.getElementById(\'isActive\').checked = patient.isActive !== false; // Default to true if undefined\n    }\n    \n    // Visualizar paciente\n    async function viewPatient(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar dados do paciente\');\n        }\n        \n        const patient = await response.json();\n        \n        // Preencher dados na modal de visualização\n        document.getElementById(\'patientViewName\').textContent = patient.fullName || \'N/A\';\n        document.getElementById(\'patientViewAge\').textContent = calculateAge(patient.dateOfBirth);\n        \n        // Iniciais para o avatar\n        const initials = patient.fullName\n          ? patient.fullName.split(\' \').map(name => name.charAt(0)).join(\'\').substring(0, 2).toUpperCase()\n          : \'??\';\n        document.getElementById(\'patientViewAvatar\').textContent = initials;\n        \n        // Informações pessoais\n        document.getElementById(\'patientViewCpf\').textContent = patient.cpf || \'N/A\';\n        document.getElementById(\'patientViewRg\').textContent = patient.rg || \'N/A\';\n        document.getElementById(\'patientViewDob\').textContent = formatDate(patient.dateOfBirth);\n        document.getElementById(\'patientViewGender\').textContent = translateGender(patient.gender);\n        document.getElementById(\'patientViewPhone\').textContent = patient.phone || \'N/A\';\n        document.getElementById(\'patientViewEmail\').textContent = patient.email || \'N/A\';\n        document.getElementById(\'patientViewEmergency\').textContent = patient.emergencyContact || \'N/A\';\n        \n        const statusElement = document.getElementById(\'patientViewStatus\');\n        statusElement.textContent = patient.isActive ? \'Ativo\' : \'Inativo\';\n        statusElement.className = `status ${patient.isActive ? \'status-active\' : \'status-inactive\'}`;\n        \n        // Endereço\n        document.getElementById(\'patientViewAddress\').textContent = patient.address || \'N/A\';\n        document.getElementById(\'patientViewCity\').textContent = patient.city || \'N/A\';\n        document.getElementById(\'patientViewState\').textContent = patient.state || \'N/A\';\n        document.getElementById(\'patientViewZip\').textContent = patient.zipCode || \'N/A\';\n        \n        // Plano de saúde\n        const planName = patient.insurancePlan ? patient.insurancePlan.name : \'N/A\';\n        document.getElementById(\'patientViewPlan\').textContent = planName;\n        document.getElementById(\'patientViewPlanNumber\').textContent = patient.insuranceNumber || \'N/A\';\n        document.getElementById(\'patientViewPlanExpiration\').textContent = formatDate(patient.insuranceExpirationDate);\n        \n        // Saúde\n        document.getElementById(\'patientViewHealth\').textContent = patient.healthConditions || \'Nenhuma registrada\';\n        document.getElementById(\'patientViewAllergies\').textContent = patient.allergies || \'Nenhuma registrada\';\n        document.getElementById(\'patientViewMedications\').textContent = patient.medications || \'Nenhuma registrada\';\n        \n        // Observações\n        document.getElementById(\'patientViewNotes\').textContent = patient.notes || \'Nenhuma observação\';\n        \n        // Configurar botão de edição\n        editFromViewButton.dataset.patientId = patient.id;\n        \n        // Abrir modal\n        viewPatientModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar paciente:\', error);\n        alert(\'Erro ao carregar dados do paciente. Tente novamente.\');\n      }\n    }\n    \n    // Fechar modal\n    function closePatientModal() {\n      patientModal.classList.remove(\'active\');\n    }\n    \n    // Fechar modal de visualização\n    function closeViewPatientModal() {\n      viewPatientModal.classList.remove(\'active\');\n    }\n    \n    // Salvar paciente\n    async function savePatient() {\n      try {\n        // Validação básica\n        const fullName = document.getElementById(\'fullName\').value.trim();\n        const dateOfBirth = document.getElementById(\'dateOfBirth\').value;\n        const cpf = document.getElementById(\'cpf\').value.trim();\n        const phone = document.getElementById(\'phone\').value.trim();\n        \n        if (!fullName || !dateOfBirth || !cpf || !phone) {\n          alert(\'Por favor, preencha todos os campos obrigatórios.\');\n          return;\n        }\n        \n        // Preparar dados do paciente\n        const patientData = {\n          fullName,\n          dateOfBirth,\n          cpf,\n          rg: document.getElementById(\'rg\').value.trim(),\n          gender: document.getElementById(\'gender\').value,\n          phone,\n          email: document.getElementById(\'email\').value.trim(),\n          emergencyContact: document.getElementById(\'emergencyContact\').value.trim(),\n          address: document.getElementById(\'address\').value.trim(),\n          city: document.getElementById(\'city\').value.trim(),\n          state: document.getElementById(\'state\').value.trim(),\n          zipCode: document.getElementById(\'zipCode\').value.trim(),\n          insurancePlanId: document.getElementById(\'insurancePlanId\').value || null,\n          insuranceNumber: document.getElementById(\'insuranceNumber\').value.trim(),\n          insuranceExpirationDate: document.getElementById(\'insuranceExpirationDate\').value || null,\n          healthConditions: document.getElementById(\'healthConditions\').value.trim(),\n          allergies: document.getElementById(\'allergies\').value.trim(),\n          medications: document.getElementById(\'medications\').value.trim(),\n          notes: document.getElementById(\'notes\').value.trim(),\n          isActive: document.getElementById(\'isActive\').checked\n        };\n        \n        const patientId = patientIdInput.value;\n        let response;\n        \n        if (patientId) {\n          // Editar paciente existente\n          response = await fetch(`/api/patients/${patientId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(patientData)\n          });\n        } else {\n          // Adicionar novo paciente\n          response = await fetch(\'/api/patients\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(patientData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || \'Erro ao salvar paciente\');\n        }\n        \n        // Fechar modal e recarregar lista\n        closePatientModal();\n        loadPatients(searchPatientInput.value);\n        \n        alert(patientId ? \'Paciente atualizado com sucesso!\' : \'Paciente adicionado com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar paciente:\', error);\n        alert(`Erro ao salvar paciente: ${error.message}`);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n    \n    // Utilidade para debounce (limitar execução de função)\n    function debounce(func, wait) {\n      let timeout;\n      return function(...args) {\n        const context = this;\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(context, args), wait);\n      };\n    }\n   $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', () => {\n      checkAuth();\n      loadPatients();\n      loadInsurancePlans();\n      setupEventListeners();\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const patientsTableBody = document.getElementById(\'patientsTableBody\');\n    const searchPatientInput = document.getElementById(\'searchPatient\');\n    const addPatientBtn = document.getElementById(\'addPatientBtn\');\n    const patientModal = document.getElementById(\'patientModal\');\n    const viewPatientModal = document.getElementById(\'viewPatientModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const patientForm = document.getElementById(\'patientForm\');\n    const patientIdInput = document.getElementById(\'patientId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    const closeViewButton = document.getElementById(\'closeViewButton\');\n    const editFromViewButton = document.getElementById(\'editFromViewButton\');\n    const paginationElement = document.getElementById(\'pagination\');\n    \n    // Configuração de paginação\n    let currentPage = 1;\n    const pageSize = 10;\n    let totalPages = 1;\n    let patients = [];\n    let filteredPatients = [];\n    let insurancePlans = [];\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        const userData = await response.json();\n        displayUserData(userData);\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir gênero do inglês para português\n    function translateGender(gender) {\n      const translations = {\n        \'male\': \'Masculino\',\n        \'female\': \'Feminino\',\n        \'other\': \'Outro\',\n        \'not_inform\': \'Não informado\'\n      };\n      \n      return translations[gender] || \'Não informado\';\n    }\n    \n    // Formatar data\n    function formatDate(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleDateString(\'pt-BR\');\n    }\n    \n    // Calcular idade a partir da data de nascimento\n    function calculateAge(birthDateString) {\n      if (!birthDateString) return \'\';\n      \n      const birthDate = new Date(birthDateString);\n      const today = new Date();\n      let age = today.getFullYear() - birthDate.getFullYear();\n      const monthDiff = today.getMonth() - birthDate.getMonth();\n      \n      if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n        age--;\n      }\n      \n      return `${age} anos`;\n    }\n    \n    // Carregar lista de pacientes\n    async function loadPatients(searchTerm = \'\') {\n      try {\n        let url = \'/api/patients\';\n        if (searchTerm) {\n          url += `?search=${encodeURIComponent(searchTerm)}`;\n        }\n        \n        const response = await fetch(url, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar pacientes\');\n        }\n        \n        patients = await response.json();\n        filteredPatients = [...patients];\n        \n        // Aplicar filtragem se houver termo de pesquisa\n        if (searchTerm) {\n          filteredPatients = patients.filter(patient => \n            patient.fullName.toLowerCase().includes(searchTerm.toLowerCase())\n          );\n        }\n        \n        // Calcular número total de páginas\n        totalPages = Math.ceil(filteredPatients.length / pageSize);\n        \n        // Renderizar tabela e paginação\n        renderPatientsTable();\n        renderPagination();\n      } catch (error) {\n        console.error(\'Erro ao carregar pacientes:\', error);\n        patientsTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">\n              <div class="empty-state">\n                <div class="empty-icon">❌</div>\n                <div class="empty-text">Erro ao carregar pacientes. Tente novamente.</div>\n                <button class="button button-primary" onclick="loadPatients()">Tentar novamente</button>\n              </div>\n            </td>\n          </tr>\n        `;\n      }\n    }\n    \n    // Renderizar tabela de pacientes\n    function renderPatientsTable() {\n      // Se não há pacientes\n      if (filteredPatients.length === 0) {\n        patientsTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">\n              <div class="empty-state">\n                <div class="empty-icon">👥</div>\n                <div class="empty-text">Nenhum paciente encontrado.</div>\n                <button class="button button-primary" id="emptyAddPatientBtn">Adicionar Paciente</button>\n              </div>\n            </td>\n          </tr>\n        `;\n        \n        document.getElementById(\'emptyAddPatientBtn\')?.addEventListener(\'click\', openAddPatientModal);\n        return;\n      }\n      \n      // Calcular índices para paginação\n      const startIndex = (currentPage - 1) * pageSize;\n      const endIndex = Math.min(startIndex + pageSize, filteredPatients.length);\n      const patientsToShow = filteredPatients.slice(startIndex, endIndex);\n      \n      // Limpar tabela\n      patientsTableBody.innerHTML = \'\';\n      \n      // Adicionar linhas\n      patientsToShow.forEach(patient => {\n        const row = document.createElement(\'tr\');\n        \n        row.innerHTML = `\n          <td>${patient.fullName}</td>\n          <td>${formatDate(patient.dateOfBirth)}</td>\n          <td>${patient.cpf || \'N/A\'}</td>\n          <td>${patient.phone || \'N/A\'}</td>\n          <td>\n            <span class="status ${patient.isActive ? \'status-active\' : \'status-inactive\'}">\n              ${patient.isActive ? \'Ativo\' : \'Inativo\'}\n            </span>\n          </td>\n          <td>\n            <button class="action-button view-patient" data-id="${patient.id}">Visualizar</button>\n            <button class="action-button edit-patient" data-id="${patient.id}">Editar</button>\n          </td>\n        `;\n        \n        patientsTableBody.appendChild(row);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-patient\').forEach(button => {\n        button.addEventListener(\'click\', () => viewPatient(button.dataset.id));\n      });\n      \n      document.querySelectorAll(\'.edit-patient\').forEach(button => {\n        button.addEventListener(\'click\', () => editPatient(button.dataset.id));\n      });\n    }\n    \n    // Renderizar paginação\n    function renderPagination() {\n      if (totalPages <= 1) {\n        paginationElement.innerHTML = \'\';\n        return;\n      }\n      \n      let paginationHTML = \'\';\n      \n      // Botão anterior\n      paginationHTML += `\n        <li>\n          <a href="#" class="${currentPage === 1 ? \'disabled\' : \'\'}" \n             onclick="${currentPage > 1 ? \'changePage(\' + (currentPage - 1) + \')\' : \'return false\'}">\n            &laquo;\n          </a>\n        </li>\n      `;\n      \n      // Páginas numéricas\n      for (let i = 1; i <= totalPages; i++) {\n        paginationHTML += `\n          <li>\n            <a href="#" class="${i === currentPage ? \'active\' : \'\'}" \n               onclick="changePage(${i})">\n              ${i}\n            </a>\n          </li>\n        `;\n      }\n      \n      // Botão próximo\n      paginationHTML += `\n        <li>\n          <a href="#" class="${currentPage === totalPages ? \'disabled\' : \'\'}" \n             onclick="${currentPage < totalPages ? \'changePage(\' + (currentPage + 1) + \')\' : \'return false\'}">\n            &raquo;\n          </a>\n        </li>\n      `;\n      \n      paginationElement.innerHTML = paginationHTML;\n    }\n    \n    // Mudar página\n    function changePage(page) {\n      currentPage = page;\n      renderPatientsTable();\n      renderPagination();\n      return false; // Prevenir comportamento padrão do link\n    }\n    \n    // Carregar planos de saúde\n    async function loadInsurancePlans() {\n      try {\n        const response = await fetch(\'/api/insurance-plans\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar planos de saúde\');\n        }\n        \n        insurancePlans = await response.json();\n        const insurancePlanSelect = document.getElementById(\'insurancePlanId\');\n        \n        // Limpar select\n        insurancePlanSelect.innerHTML = \'<option value="">Selecione</option>\';\n        \n        // Adicionar opções\n        insurancePlans.forEach(plan => {\n          const option = document.createElement(\'option\');\n          option.value = plan.id;\n          option.textContent = plan.name;\n          insurancePlanSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar planos de saúde:\', error);\n      }\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Pesquisa\n      searchPatientInput.addEventListener(\'input\', debounce(function() {\n        currentPage = 1; // Voltar para a primeira página ao pesquisar\n        loadPatients(this.value);\n      }, 500));\n      \n      // Adicionar paciente\n      addPatientBtn.addEventListener(\'click\', openAddPatientModal);\n      \n      // Fechar modal\n      closeModal.addEventListener(\'click\', closePatientModal);\n      closeViewModal.addEventListener(\'click\', closeViewPatientModal);\n      cancelButton.addEventListener(\'click\', closePatientModal);\n      closeViewButton.addEventListener(\'click\', closeViewPatientModal);\n      \n      // Modal de background\n      patientModal.addEventListener(\'click\', function(e) {\n        if (e.target === patientModal) {\n          closePatientModal();\n        }\n      });\n      \n      viewPatientModal.addEventListener(\'click\', function(e) {\n        if (e.target === viewPatientModal) {\n          closeViewPatientModal();\n        }\n      });\n      \n      // Salvar paciente\n      saveButton.addEventListener(\'click\', savePatient);\n      \n      // Editar a partir da visualização\n      editFromViewButton.addEventListener(\'click\', function() {\n        closeViewPatientModal();\n        editPatient(this.dataset.patientId);\n      });\n    }\n    \n    // Abrir modal para adicionar paciente\n    function openAddPatientModal() {\n      modalTitle.textContent = \'Adicionar Paciente\';\n      patientForm.reset();\n      patientIdInput.value = \'\';\n      document.getElementById(\'isActive\').checked = true;\n      \n      patientModal.classList.add(\'active\');\n    }\n    \n    // Editar paciente\n    async function editPatient(patientId) {\n      try {\n        modalTitle.textContent = \'Editar Paciente\';\n        \n        const patient = patients.find(p => p.id == patientId);\n        \n        if (!patient) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/patients/${patientId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados do paciente\');\n          }\n          \n          const patientData = await response.json();\n          fillPatientForm(patientData);\n        } else {\n          fillPatientForm(patient);\n        }\n        \n        patientModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar paciente:\', error);\n        alert(\'Erro ao carregar dados do paciente. Tente novamente.\');\n      }\n    }\n    \n    // Preencher formulário com dados do paciente\n    function fillPatientForm(patient) {\n      patientIdInput.value = patient.id;\n      document.getElementById(\'fullName\').value = patient.fullName || \'\';\n      document.getElementById(\'dateOfBirth\').value = patient.dateOfBirth ? new Date(patient.dateOfBirth).toISOString().split(\'T\')[0] : \'\';\n      document.getElementById(\'cpf\').value = patient.cpf || \'\';\n      document.getElementById(\'rg\').value = patient.rg || \'\';\n      document.getElementById(\'gender\').value = patient.gender || \'\';\n      document.getElementById(\'phone\').value = patient.phone || \'\';\n      document.getElementById(\'email\').value = patient.email || \'\';\n      document.getElementById(\'emergencyContact\').value = patient.emergencyContact || \'\';\n      document.getElementById(\'address\').value = patient.address || \'\';\n      document.getElementById(\'city\').value = patient.city || \'\';\n      document.getElementById(\'state\').value = patient.state || \'\';\n      document.getElementById(\'zipCode\').value = patient.zipCode || \'\';\n      document.getElementById(\'insurancePlanId\').value = patient.insurancePlanId || \'\';\n      document.getElementById(\'insuranceNumber\').value = patient.insuranceNumber || \'\';\n      document.getElementById(\'insuranceExpirationDate\').value = patient.insuranceExpirationDate ? new Date(patient.insuranceExpirationDate).toISOString().split(\'T\')[0] : \'\';\n      document.getElementById(\'healthConditions\').value = patient.healthConditions || \'\';\n      document.getElementById(\'allergies\').value = patient.allergies || \'\';\n      document.getElementById(\'medications\').value = patient.medications || \'\';\n      document.getElementById(\'notes\').value = patient.notes || \'\';\n      document.getElementById(\'isActive\').checked = patient.isActive !== false; // Default to true if undefined\n    }\n    \n    // Visualizar paciente\n    async function viewPatient(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar dados do paciente\');\n        }\n        \n        const patient = await response.json();\n        \n        // Preencher dados na modal de visualização\n        document.getElementById(\'patientViewName\').textContent = patient.fullName || \'N/A\';\n        document.getElementById(\'patientViewAge\').textContent = calculateAge(patient.dateOfBirth);\n        \n        // Iniciais para o avatar\n        const initials = patient.fullName\n          ? patient.fullName.split(\' \').map(name => name.charAt(0)).join(\'\').substring(0, 2).toUpperCase()\n          : \'??\';\n        document.getElementById(\'patientViewAvatar\').textContent = initials;\n        \n        // Informações pessoais\n        document.getElementById(\'patientViewCpf\').textContent = patient.cpf || \'N/A\';\n        document.getElementById(\'patientViewRg\').textContent = patient.rg || \'N/A\';\n        document.getElementById(\'patientViewDob\').textContent = formatDate(patient.dateOfBirth);\n        document.getElementById(\'patientViewGender\').textContent = translateGender(patient.gender);\n        document.getElementById(\'patientViewPhone\').textContent = patient.phone || \'N/A\';\n        document.getElementById(\'patientViewEmail\').textContent = patient.email || \'N/A\';\n        document.getElementById(\'patientViewEmergency\').textContent = patient.emergencyContact || \'N/A\';\n        \n        const statusElement = document.getElementById(\'patientViewStatus\');\n        statusElement.textContent = patient.isActive ? \'Ativo\' : \'Inativo\';\n        statusElement.className = `status ${patient.isActive ? \'status-active\' : \'status-inactive\'}`;\n        \n        // Endereço\n        document.getElementById(\'patientViewAddress\').textContent = patient.address || \'N/A\';\n        document.getElementById(\'patientViewCity\').textContent = patient.city || \'N/A\';\n        document.getElementById(\'patientViewState\').textContent = patient.state || \'N/A\';\n        document.getElementById(\'patientViewZip\').textContent = patient.zipCode || \'N/A\';\n        \n        // Plano de saúde\n        const planName = patient.insurancePlan ? patient.insurancePlan.name : \'N/A\';\n        document.getElementById(\'patientViewPlan\').textContent = planName;\n        document.getElementById(\'patientViewPlanNumber\').textContent = patient.insuranceNumber || \'N/A\';\n        document.getElementById(\'patientViewPlanExpiration\').textContent = formatDate(patient.insuranceExpirationDate);\n        \n        // Saúde\n        document.getElementById(\'patientViewHealth\').textContent = patient.healthConditions || \'Nenhuma registrada\';\n        document.getElementById(\'patientViewAllergies\').textContent = patient.allergies || \'Nenhuma registrada\';\n        document.getElementById(\'patientViewMedications\').textContent = patient.medications || \'Nenhuma registrada\';\n        \n        // Observações\n        document.getElementById(\'patientViewNotes\').textContent = patient.notes || \'Nenhuma observação\';\n        \n        // Configurar botão de edição\n        editFromViewButton.dataset.patientId = patient.id;\n        \n        // Abrir modal\n        viewPatientModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar paciente:\', error);\n        alert(\'Erro ao carregar dados do paciente. Tente novamente.\');\n      }\n    }\n    \n    // Fechar modal\n    function closePatientModal() {\n      patientModal.classList.remove(\'active\');\n    }\n    \n    // Fechar modal de visualização\n    function closeViewPatientModal() {\n      viewPatientModal.classList.remove(\'active\');\n    }\n    \n    // Salvar paciente\n    async function savePatient() {\n      try {\n        // Validação básica\n        const fullName = document.getElementById(\'fullName\').value.trim();\n        const dateOfBirth = document.getElementById(\'dateOfBirth\').value;\n        const cpf = document.getElementById(\'cpf\').value.trim();\n        const phone = document.getElementById(\'phone\').value.trim();\n        \n        if (!fullName || !dateOfBirth || !cpf || !phone) {\n          alert(\'Por favor, preencha todos os campos obrigatórios.\');\n          return;\n        }\n        \n        // Preparar dados do paciente\n        const patientData = {\n          fullName,\n          dateOfBirth,\n          cpf,\n          rg: document.getElementById(\'rg\').value.trim(),\n          gender: document.getElementById(\'gender\').value,\n          phone,\n          email: document.getElementById(\'email\').value.trim(),\n          emergencyContact: document.getElementById(\'emergencyContact\').value.trim(),\n          address: document.getElementById(\'address\').value.trim(),\n          city: document.getElementById(\'city\').value.trim(),\n          state: document.getElementById(\'state\').value.trim(),\n          zipCode: document.getElementById(\'zipCode\').value.trim(),\n          insurancePlanId: document.getElementById(\'insurancePlanId\').value || null,\n          insuranceNumber: document.getElementById(\'insuranceNumber\').value.trim(),\n          insuranceExpirationDate: document.getElementById(\'insuranceExpirationDate\').value || null,\n          healthConditions: document.getElementById(\'healthConditions\').value.trim(),\n          allergies: document.getElementById(\'allergies\').value.trim(),\n          medications: document.getElementById(\'medications\').value.trim(),\n          notes: document.getElementById(\'notes\').value.trim(),\n          isActive: document.getElementById(\'isActive\').checked\n        };\n        \n        const patientId = patientIdInput.value;\n        let response;\n        \n        if (patientId) {\n          // Editar paciente existente\n          response = await fetch(`/api/patients/${patientId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(patientData)\n          });\n        } else {\n          // Adicionar novo paciente\n          response = await fetch(\'/api/patients\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(patientData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || \'Erro ao salvar paciente\');\n        }\n        \n        // Fechar modal e recarregar lista\n        closePatientModal();\n        loadPatients(searchPatientInput.value);\n        \n        alert(patientId ? \'Paciente atualizado com sucesso!\' : \'Paciente adicionado com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar paciente:\', error);\n        alert(`Erro ao salvar paciente: ${error.message}`);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n    \n    // Utilidade para debounce (limitar execução de função)\n    function debounce(func, wait) {\n      let timeout;\n      return function(...args) {\n        const context = this;\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(context, args), wait);\n      };\n    }\n  </script>\n', PosixPath('client/public/patients.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 2249c0027b56fc8ef70ca141f8927c175c8ac692ea423d235d5a97ad1b9ef115d87d95af92ab362ad31e475d14ce9d0455cba0972d360c67303822425c880c1d_0
2025-05-07 18:31:35,240 - semgrep.rule_match - DEBUG - match_key = ('\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', () => {\n      checkAuth();\n      loadPatients();\n      loadInsurancePlans();\n      setupEventListeners();\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const patientsTableBody = document.getElementById(\'patientsTableBody\');\n    const searchPatientInput = document.getElementById(\'searchPatient\');\n    const addPatientBtn = document.getElementById(\'addPatientBtn\');\n    const patientModal = document.getElementById(\'patientModal\');\n    const viewPatientModal = document.getElementById(\'viewPatientModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const patientForm = document.getElementById(\'patientForm\');\n    const patientIdInput = document.getElementById(\'patientId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    const closeViewButton = document.getElementById(\'closeViewButton\');\n    const editFromViewButton = document.getElementById(\'editFromViewButton\');\n    const paginationElement = document.getElementById(\'pagination\');\n    \n    // Configuração de paginação\n    let currentPage = 1;\n    const pageSize = 10;\n    let totalPages = 1;\n    let patients = [];\n    let filteredPatients = [];\n    let insurancePlans = [];\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        const userData = await response.json();\n        displayUserData(userData);\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir gênero do inglês para português\n    function translateGender(gender) {\n      const translations = {\n        \'male\': \'Masculino\',\n        \'female\': \'Feminino\',\n        \'other\': \'Outro\',\n        \'not_inform\': \'Não informado\'\n      };\n      \n      return translations[gender] || \'Não informado\';\n    }\n    \n    // Formatar data\n    function formatDate(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleDateString(\'pt-BR\');\n    }\n    \n    // Calcular idade a partir da data de nascimento\n    function calculateAge(birthDateString) {\n      if (!birthDateString) return \'\';\n      \n      const birthDate = new Date(birthDateString);\n      const today = new Date();\n      let age = today.getFullYear() - birthDate.getFullYear();\n      const monthDiff = today.getMonth() - birthDate.getMonth();\n      \n      if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n        age--;\n      }\n      \n      return `${age} anos`;\n    }\n    \n    // Carregar lista de pacientes\n    async function loadPatients(searchTerm = \'\') {\n      try {\n        let url = \'/api/patients\';\n        if (searchTerm) {\n          url += `?search=${encodeURIComponent(searchTerm)}`;\n        }\n        \n        const response = await fetch(url, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar pacientes\');\n        }\n        \n        patients = await response.json();\n        filteredPatients = [...patients];\n        \n        // Aplicar filtragem se houver termo de pesquisa\n        if (searchTerm) {\n          filteredPatients = patients.filter(patient => \n            patient.fullName.toLowerCase().includes(searchTerm.toLowerCase())\n          );\n        }\n        \n        // Calcular número total de páginas\n        totalPages = Math.ceil(filteredPatients.length / pageSize);\n        \n        // Renderizar tabela e paginação\n        renderPatientsTable();\n        renderPagination();\n      } catch (error) {\n        console.error(\'Erro ao carregar pacientes:\', error);\n        patientsTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">\n              <div class="empty-state">\n                <div class="empty-icon">❌</div>\n                <div class="empty-text">Erro ao carregar pacientes. Tente novamente.</div>\n                <button class="button button-primary" onclick="loadPatients()">Tentar novamente</button>\n              </div>\n            </td>\n          </tr>\n        `;\n      }\n    }\n    \n    // Renderizar tabela de pacientes\n    function renderPatientsTable() {\n      // Se não há pacientes\n      if (filteredPatients.length === 0) {\n        patientsTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">\n              <div class="empty-state">\n                <div class="empty-icon">👥</div>\n                <div class="empty-text">Nenhum paciente encontrado.</div>\n                <button class="button button-primary" id="emptyAddPatientBtn">Adicionar Paciente</button>\n              </div>\n            </td>\n          </tr>\n        `;\n        \n        document.getElementById(\'emptyAddPatientBtn\')?.addEventListener(\'click\', openAddPatientModal);\n        return;\n      }\n      \n      // Calcular índices para paginação\n      const startIndex = (currentPage - 1) * pageSize;\n      const endIndex = Math.min(startIndex + pageSize, filteredPatients.length);\n      const patientsToShow = filteredPatients.slice(startIndex, endIndex);\n      \n      // Limpar tabela\n      patientsTableBody.innerHTML = \'\';\n      \n      // Adicionar linhas\n      patientsToShow.forEach(patient => {\n        const row = document.createElement(\'tr\');\n        \n        row.innerHTML = `\n          <td>${patient.fullName}</td>\n          <td>${formatDate(patient.dateOfBirth)}</td>\n          <td>${patient.cpf || \'N/A\'}</td>\n          <td>${patient.phone || \'N/A\'}</td>\n          <td>\n            <span class="status ${patient.isActive ? \'status-active\' : \'status-inactive\'}">\n              ${patient.isActive ? \'Ativo\' : \'Inativo\'}\n            </span>\n          </td>\n          <td>\n            <button class="action-button view-patient" data-id="${patient.id}">Visualizar</button>\n            <button class="action-button edit-patient" data-id="${patient.id}">Editar</button>\n          </td>\n        `;\n        \n        patientsTableBody.appendChild(row);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-patient\').forEach(button => {\n        button.addEventListener(\'click\', () => viewPatient(button.dataset.id));\n      });\n      \n      document.querySelectorAll(\'.edit-patient\').forEach(button => {\n        button.addEventListener(\'click\', () => editPatient(button.dataset.id));\n      });\n    }\n    \n    // Renderizar paginação\n    function renderPagination() {\n      if (totalPages <= 1) {\n        paginationElement.innerHTML = \'\';\n        return;\n      }\n      \n      let paginationHTML = \'\';\n      \n      // Botão anterior\n      paginationHTML += `\n        <li>\n          <a href="#" class="${currentPage === 1 ? \'disabled\' : \'\'}" \n             onclick="${currentPage > 1 ? \'changePage(\' + (currentPage - 1) + \')\' : \'return false\'}">\n            &laquo;\n          </a>\n        </li>\n      `;\n      \n      // Páginas numéricas\n      for (let i = 1; i <= totalPages; i++) {\n        paginationHTML += `\n          <li>\n            <a href="#" class="${i === currentPage ? \'active\' : \'\'}" \n               onclick="changePage(${i})">\n              ${i}\n            </a>\n          </li>\n        `;\n      }\n      \n      // Botão próximo\n      paginationHTML += `\n        <li>\n          <a href="#" class="${currentPage === totalPages ? \'disabled\' : \'\'}" \n             onclick="${currentPage < totalPages ? \'changePage(\' + (currentPage + 1) + \')\' : \'return false\'}">\n            &raquo;\n          </a>\n        </li>\n      `;\n      \n      paginationElement.innerHTML = paginationHTML;\n    }\n    \n    // Mudar página\n    function changePage(page) {\n      currentPage = page;\n      renderPatientsTable();\n      renderPagination();\n      return false; // Prevenir comportamento padrão do link\n    }\n    \n    // Carregar planos de saúde\n    async function loadInsurancePlans() {\n      try {\n        const response = await fetch(\'/api/insurance-plans\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar planos de saúde\');\n        }\n        \n        insurancePlans = await response.json();\n        const insurancePlanSelect = document.getElementById(\'insurancePlanId\');\n        \n        // Limpar select\n        insurancePlanSelect.innerHTML = \'<option value="">Selecione</option>\';\n        \n        // Adicionar opções\n        insurancePlans.forEach(plan => {\n          const option = document.createElement(\'option\');\n          option.value = plan.id;\n          option.textContent = plan.name;\n          insurancePlanSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar planos de saúde:\', error);\n      }\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Pesquisa\n      searchPatientInput.addEventListener(\'input\', debounce(function() {\n        currentPage = 1; // Voltar para a primeira página ao pesquisar\n        loadPatients(this.value);\n      }, 500));\n      \n      // Adicionar paciente\n      addPatientBtn.addEventListener(\'click\', openAddPatientModal);\n      \n      // Fechar modal\n      closeModal.addEventListener(\'click\', closePatientModal);\n      closeViewModal.addEventListener(\'click\', closeViewPatientModal);\n      cancelButton.addEventListener(\'click\', closePatientModal);\n      closeViewButton.addEventListener(\'click\', closeViewPatientModal);\n      \n      // Modal de background\n      patientModal.addEventListener(\'click\', function(e) {\n        if (e.target === patientModal) {\n          closePatientModal();\n        }\n      });\n      \n      viewPatientModal.addEventListener(\'click\', function(e) {\n        if (e.target === viewPatientModal) {\n          closeViewPatientModal();\n        }\n      });\n      \n      // Salvar paciente\n      saveButton.addEventListener(\'click\', savePatient);\n      \n      // Editar a partir da visualização\n      editFromViewButton.addEventListener(\'click\', function() {\n        closeViewPatientModal();\n        editPatient(this.dataset.patientId);\n      });\n    }\n    \n    // Abrir modal para adicionar paciente\n    function openAddPatientModal() {\n      modalTitle.textContent = \'Adicionar Paciente\';\n      patientForm.reset();\n      patientIdInput.value = \'\';\n      document.getElementById(\'isActive\').checked = true;\n      \n      patientModal.classList.add(\'active\');\n    }\n    \n    // Editar paciente\n    async function editPatient(patientId) {\n      try {\n        modalTitle.textContent = \'Editar Paciente\';\n        \n        const patient = patients.find(p => p.id == patientId);\n        \n        if (!patient) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/patients/${patientId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados do paciente\');\n          }\n          \n          const patientData = await response.json();\n          fillPatientForm(patientData);\n        } else {\n          fillPatientForm(patient);\n        }\n        \n        patientModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar paciente:\', error);\n        alert(\'Erro ao carregar dados do paciente. Tente novamente.\');\n      }\n    }\n    \n    // Preencher formulário com dados do paciente\n    function fillPatientForm(patient) {\n      patientIdInput.value = patient.id;\n      document.getElementById(\'fullName\').value = patient.fullName || \'\';\n      document.getElementById(\'dateOfBirth\').value = patient.dateOfBirth ? new Date(patient.dateOfBirth).toISOString().split(\'T\')[0] : \'\';\n      document.getElementById(\'cpf\').value = patient.cpf || \'\';\n      document.getElementById(\'rg\').value = patient.rg || \'\';\n      document.getElementById(\'gender\').value = patient.gender || \'\';\n      document.getElementById(\'phone\').value = patient.phone || \'\';\n      document.getElementById(\'email\').value = patient.email || \'\';\n      document.getElementById(\'emergencyContact\').value = patient.emergencyContact || \'\';\n      document.getElementById(\'address\').value = patient.address || \'\';\n      document.getElementById(\'city\').value = patient.city || \'\';\n      document.getElementById(\'state\').value = patient.state || \'\';\n      document.getElementById(\'zipCode\').value = patient.zipCode || \'\';\n      document.getElementById(\'insurancePlanId\').value = patient.insurancePlanId || \'\';\n      document.getElementById(\'insuranceNumber\').value = patient.insuranceNumber || \'\';\n      document.getElementById(\'insuranceExpirationDate\').value = patient.insuranceExpirationDate ? new Date(patient.insuranceExpirationDate).toISOString().split(\'T\')[0] : \'\';\n      document.getElementById(\'healthConditions\').value = patient.healthConditions || \'\';\n      document.getElementById(\'allergies\').value = patient.allergies || \'\';\n      document.getElementById(\'medications\').value = patient.medications || \'\';\n      document.getElementById(\'notes\').value = patient.notes || \'\';\n      document.getElementById(\'isActive\').checked = patient.isActive !== false; // Default to true if undefined\n    }\n    \n    // Visualizar paciente\n    async function viewPatient(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar dados do paciente\');\n        }\n        \n        const patient = await response.json();\n        \n        // Preencher dados na modal de visualização\n        document.getElementById(\'patientViewName\').textContent = patient.fullName || \'N/A\';\n        document.getElementById(\'patientViewAge\').textContent = calculateAge(patient.dateOfBirth);\n        \n        // Iniciais para o avatar\n        const initials = patient.fullName\n          ? patient.fullName.split(\' \').map(name => name.charAt(0)).join(\'\').substring(0, 2).toUpperCase()\n          : \'??\';\n        document.getElementById(\'patientViewAvatar\').textContent = initials;\n        \n        // Informações pessoais\n        document.getElementById(\'patientViewCpf\').textContent = patient.cpf || \'N/A\';\n        document.getElementById(\'patientViewRg\').textContent = patient.rg || \'N/A\';\n        document.getElementById(\'patientViewDob\').textContent = formatDate(patient.dateOfBirth);\n        document.getElementById(\'patientViewGender\').textContent = translateGender(patient.gender);\n        document.getElementById(\'patientViewPhone\').textContent = patient.phone || \'N/A\';\n        document.getElementById(\'patientViewEmail\').textContent = patient.email || \'N/A\';\n        document.getElementById(\'patientViewEmergency\').textContent = patient.emergencyContact || \'N/A\';\n        \n        const statusElement = document.getElementById(\'patientViewStatus\');\n        statusElement.textContent = patient.isActive ? \'Ativo\' : \'Inativo\';\n        statusElement.className = `status ${patient.isActive ? \'status-active\' : \'status-inactive\'}`;\n        \n        // Endereço\n        document.getElementById(\'patientViewAddress\').textContent = patient.address || \'N/A\';\n        document.getElementById(\'patientViewCity\').textContent = patient.city || \'N/A\';\n        document.getElementById(\'patientViewState\').textContent = patient.state || \'N/A\';\n        document.getElementById(\'patientViewZip\').textContent = patient.zipCode || \'N/A\';\n        \n        // Plano de saúde\n        const planName = patient.insurancePlan ? patient.insurancePlan.name : \'N/A\';\n        document.getElementById(\'patientViewPlan\').textContent = planName;\n        document.getElementById(\'patientViewPlanNumber\').textContent = patient.insuranceNumber || \'N/A\';\n        document.getElementById(\'patientViewPlanExpiration\').textContent = formatDate(patient.insuranceExpirationDate);\n        \n        // Saúde\n        document.getElementById(\'patientViewHealth\').textContent = patient.healthConditions || \'Nenhuma registrada\';\n        document.getElementById(\'patientViewAllergies\').textContent = patient.allergies || \'Nenhuma registrada\';\n        document.getElementById(\'patientViewMedications\').textContent = patient.medications || \'Nenhuma registrada\';\n        \n        // Observações\n        document.getElementById(\'patientViewNotes\').textContent = patient.notes || \'Nenhuma observação\';\n        \n        // Configurar botão de edição\n        editFromViewButton.dataset.patientId = patient.id;\n        \n        // Abrir modal\n        viewPatientModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar paciente:\', error);\n        alert(\'Erro ao carregar dados do paciente. Tente novamente.\');\n      }\n    }\n    \n    // Fechar modal\n    function closePatientModal() {\n      patientModal.classList.remove(\'active\');\n    }\n    \n    // Fechar modal de visualização\n    function closeViewPatientModal() {\n      viewPatientModal.classList.remove(\'active\');\n    }\n    \n    // Salvar paciente\n    async function savePatient() {\n      try {\n        // Validação básica\n        const fullName = document.getElementById(\'fullName\').value.trim();\n        const dateOfBirth = document.getElementById(\'dateOfBirth\').value;\n        const cpf = document.getElementById(\'cpf\').value.trim();\n        const phone = document.getElementById(\'phone\').value.trim();\n        \n        if (!fullName || !dateOfBirth || !cpf || !phone) {\n          alert(\'Por favor, preencha todos os campos obrigatórios.\');\n          return;\n        }\n        \n        // Preparar dados do paciente\n        const patientData = {\n          fullName,\n          dateOfBirth,\n          cpf,\n          rg: document.getElementById(\'rg\').value.trim(),\n          gender: document.getElementById(\'gender\').value,\n          phone,\n          email: document.getElementById(\'email\').value.trim(),\n          emergencyContact: document.getElementById(\'emergencyContact\').value.trim(),\n          address: document.getElementById(\'address\').value.trim(),\n          city: document.getElementById(\'city\').value.trim(),\n          state: document.getElementById(\'state\').value.trim(),\n          zipCode: document.getElementById(\'zipCode\').value.trim(),\n          insurancePlanId: document.getElementById(\'insurancePlanId\').value || null,\n          insuranceNumber: document.getElementById(\'insuranceNumber\').value.trim(),\n          insuranceExpirationDate: document.getElementById(\'insuranceExpirationDate\').value || null,\n          healthConditions: document.getElementById(\'healthConditions\').value.trim(),\n          allergies: document.getElementById(\'allergies\').value.trim(),\n          medications: document.getElementById(\'medications\').value.trim(),\n          notes: document.getElementById(\'notes\').value.trim(),\n          isActive: document.getElementById(\'isActive\').checked\n        };\n        \n        const patientId = patientIdInput.value;\n        let response;\n        \n        if (patientId) {\n          // Editar paciente existente\n          response = await fetch(`/api/patients/${patientId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(patientData)\n          });\n        } else {\n          // Adicionar novo paciente\n          response = await fetch(\'/api/patients\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(patientData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || \'Erro ao salvar paciente\');\n        }\n        \n        // Fechar modal e recarregar lista\n        closePatientModal();\n        loadPatients(searchPatientInput.value);\n        \n        alert(patientId ? \'Paciente atualizado com sucesso!\' : \'Paciente adicionado com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar paciente:\', error);\n        alert(`Erro ao salvar paciente: ${error.message}`);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n    \n    // Utilidade para debounce (limitar execução de função)\n    function debounce(func, wait) {\n      let timeout;\n      return function(...args) {\n        const context = this;\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(context, args), wait);\n      };\n    }\n   $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', () => {\n      checkAuth();\n      loadPatients();\n      loadInsurancePlans();\n      setupEventListeners();\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const patientsTableBody = document.getElementById(\'patientsTableBody\');\n    const searchPatientInput = document.getElementById(\'searchPatient\');\n    const addPatientBtn = document.getElementById(\'addPatientBtn\');\n    const patientModal = document.getElementById(\'patientModal\');\n    const viewPatientModal = document.getElementById(\'viewPatientModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const patientForm = document.getElementById(\'patientForm\');\n    const patientIdInput = document.getElementById(\'patientId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    const closeViewButton = document.getElementById(\'closeViewButton\');\n    const editFromViewButton = document.getElementById(\'editFromViewButton\');\n    const paginationElement = document.getElementById(\'pagination\');\n    \n    // Configuração de paginação\n    let currentPage = 1;\n    const pageSize = 10;\n    let totalPages = 1;\n    let patients = [];\n    let filteredPatients = [];\n    let insurancePlans = [];\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        const userData = await response.json();\n        displayUserData(userData);\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir gênero do inglês para português\n    function translateGender(gender) {\n      const translations = {\n        \'male\': \'Masculino\',\n        \'female\': \'Feminino\',\n        \'other\': \'Outro\',\n        \'not_inform\': \'Não informado\'\n      };\n      \n      return translations[gender] || \'Não informado\';\n    }\n    \n    // Formatar data\n    function formatDate(dateString) {\n      if (!dateString) return \'N/A\';\n      \n      const date = new Date(dateString);\n      return date.toLocaleDateString(\'pt-BR\');\n    }\n    \n    // Calcular idade a partir da data de nascimento\n    function calculateAge(birthDateString) {\n      if (!birthDateString) return \'\';\n      \n      const birthDate = new Date(birthDateString);\n      const today = new Date();\n      let age = today.getFullYear() - birthDate.getFullYear();\n      const monthDiff = today.getMonth() - birthDate.getMonth();\n      \n      if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n        age--;\n      }\n      \n      return `${age} anos`;\n    }\n    \n    // Carregar lista de pacientes\n    async function loadPatients(searchTerm = \'\') {\n      try {\n        let url = \'/api/patients\';\n        if (searchTerm) {\n          url += `?search=${encodeURIComponent(searchTerm)}`;\n        }\n        \n        const response = await fetch(url, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar pacientes\');\n        }\n        \n        patients = await response.json();\n        filteredPatients = [...patients];\n        \n        // Aplicar filtragem se houver termo de pesquisa\n        if (searchTerm) {\n          filteredPatients = patients.filter(patient => \n            patient.fullName.toLowerCase().includes(searchTerm.toLowerCase())\n          );\n        }\n        \n        // Calcular número total de páginas\n        totalPages = Math.ceil(filteredPatients.length / pageSize);\n        \n        // Renderizar tabela e paginação\n        renderPatientsTable();\n        renderPagination();\n      } catch (error) {\n        console.error(\'Erro ao carregar pacientes:\', error);\n        patientsTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">\n              <div class="empty-state">\n                <div class="empty-icon">❌</div>\n                <div class="empty-text">Erro ao carregar pacientes. Tente novamente.</div>\n                <button class="button button-primary" onclick="loadPatients()">Tentar novamente</button>\n              </div>\n            </td>\n          </tr>\n        `;\n      }\n    }\n    \n    // Renderizar tabela de pacientes\n    function renderPatientsTable() {\n      // Se não há pacientes\n      if (filteredPatients.length === 0) {\n        patientsTableBody.innerHTML = `\n          <tr>\n            <td colspan="6">\n              <div class="empty-state">\n                <div class="empty-icon">👥</div>\n                <div class="empty-text">Nenhum paciente encontrado.</div>\n                <button class="button button-primary" id="emptyAddPatientBtn">Adicionar Paciente</button>\n              </div>\n            </td>\n          </tr>\n        `;\n        \n        document.getElementById(\'emptyAddPatientBtn\')?.addEventListener(\'click\', openAddPatientModal);\n        return;\n      }\n      \n      // Calcular índices para paginação\n      const startIndex = (currentPage - 1) * pageSize;\n      const endIndex = Math.min(startIndex + pageSize, filteredPatients.length);\n      const patientsToShow = filteredPatients.slice(startIndex, endIndex);\n      \n      // Limpar tabela\n      patientsTableBody.innerHTML = \'\';\n      \n      // Adicionar linhas\n      patientsToShow.forEach(patient => {\n        const row = document.createElement(\'tr\');\n        \n        row.innerHTML = `\n          <td>${patient.fullName}</td>\n          <td>${formatDate(patient.dateOfBirth)}</td>\n          <td>${patient.cpf || \'N/A\'}</td>\n          <td>${patient.phone || \'N/A\'}</td>\n          <td>\n            <span class="status ${patient.isActive ? \'status-active\' : \'status-inactive\'}">\n              ${patient.isActive ? \'Ativo\' : \'Inativo\'}\n            </span>\n          </td>\n          <td>\n            <button class="action-button view-patient" data-id="${patient.id}">Visualizar</button>\n            <button class="action-button edit-patient" data-id="${patient.id}">Editar</button>\n          </td>\n        `;\n        \n        patientsTableBody.appendChild(row);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-patient\').forEach(button => {\n        button.addEventListener(\'click\', () => viewPatient(button.dataset.id));\n      });\n      \n      document.querySelectorAll(\'.edit-patient\').forEach(button => {\n        button.addEventListener(\'click\', () => editPatient(button.dataset.id));\n      });\n    }\n    \n    // Renderizar paginação\n    function renderPagination() {\n      if (totalPages <= 1) {\n        paginationElement.innerHTML = \'\';\n        return;\n      }\n      \n      let paginationHTML = \'\';\n      \n      // Botão anterior\n      paginationHTML += `\n        <li>\n          <a href="#" class="${currentPage === 1 ? \'disabled\' : \'\'}" \n             onclick="${currentPage > 1 ? \'changePage(\' + (currentPage - 1) + \')\' : \'return false\'}">\n            &laquo;\n          </a>\n        </li>\n      `;\n      \n      // Páginas numéricas\n      for (let i = 1; i <= totalPages; i++) {\n        paginationHTML += `\n          <li>\n            <a href="#" class="${i === currentPage ? \'active\' : \'\'}" \n               onclick="changePage(${i})">\n              ${i}\n            </a>\n          </li>\n        `;\n      }\n      \n      // Botão próximo\n      paginationHTML += `\n        <li>\n          <a href="#" class="${currentPage === totalPages ? \'disabled\' : \'\'}" \n             onclick="${currentPage < totalPages ? \'changePage(\' + (currentPage + 1) + \')\' : \'return false\'}">\n            &raquo;\n          </a>\n        </li>\n      `;\n      \n      paginationElement.innerHTML = paginationHTML;\n    }\n    \n    // Mudar página\n    function changePage(page) {\n      currentPage = page;\n      renderPatientsTable();\n      renderPagination();\n      return false; // Prevenir comportamento padrão do link\n    }\n    \n    // Carregar planos de saúde\n    async function loadInsurancePlans() {\n      try {\n        const response = await fetch(\'/api/insurance-plans\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar planos de saúde\');\n        }\n        \n        insurancePlans = await response.json();\n        const insurancePlanSelect = document.getElementById(\'insurancePlanId\');\n        \n        // Limpar select\n        insurancePlanSelect.innerHTML = \'<option value="">Selecione</option>\';\n        \n        // Adicionar opções\n        insurancePlans.forEach(plan => {\n          const option = document.createElement(\'option\');\n          option.value = plan.id;\n          option.textContent = plan.name;\n          insurancePlanSelect.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar planos de saúde:\', error);\n      }\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Pesquisa\n      searchPatientInput.addEventListener(\'input\', debounce(function() {\n        currentPage = 1; // Voltar para a primeira página ao pesquisar\n        loadPatients(this.value);\n      }, 500));\n      \n      // Adicionar paciente\n      addPatientBtn.addEventListener(\'click\', openAddPatientModal);\n      \n      // Fechar modal\n      closeModal.addEventListener(\'click\', closePatientModal);\n      closeViewModal.addEventListener(\'click\', closeViewPatientModal);\n      cancelButton.addEventListener(\'click\', closePatientModal);\n      closeViewButton.addEventListener(\'click\', closeViewPatientModal);\n      \n      // Modal de background\n      patientModal.addEventListener(\'click\', function(e) {\n        if (e.target === patientModal) {\n          closePatientModal();\n        }\n      });\n      \n      viewPatientModal.addEventListener(\'click\', function(e) {\n        if (e.target === viewPatientModal) {\n          closeViewPatientModal();\n        }\n      });\n      \n      // Salvar paciente\n      saveButton.addEventListener(\'click\', savePatient);\n      \n      // Editar a partir da visualização\n      editFromViewButton.addEventListener(\'click\', function() {\n        closeViewPatientModal();\n        editPatient(this.dataset.patientId);\n      });\n    }\n    \n    // Abrir modal para adicionar paciente\n    function openAddPatientModal() {\n      modalTitle.textContent = \'Adicionar Paciente\';\n      patientForm.reset();\n      patientIdInput.value = \'\';\n      document.getElementById(\'isActive\').checked = true;\n      \n      patientModal.classList.add(\'active\');\n    }\n    \n    // Editar paciente\n    async function editPatient(patientId) {\n      try {\n        modalTitle.textContent = \'Editar Paciente\';\n        \n        const patient = patients.find(p => p.id == patientId);\n        \n        if (!patient) {\n          // Se não encontrar no cache, buscar do servidor\n          const response = await fetch(`/api/patients/${patientId}`, {\n            credentials: \'include\'\n          });\n          \n          if (!response.ok) {\n            throw new Error(\'Erro ao carregar dados do paciente\');\n          }\n          \n          const patientData = await response.json();\n          fillPatientForm(patientData);\n        } else {\n          fillPatientForm(patient);\n        }\n        \n        patientModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar paciente:\', error);\n        alert(\'Erro ao carregar dados do paciente. Tente novamente.\');\n      }\n    }\n    \n    // Preencher formulário com dados do paciente\n    function fillPatientForm(patient) {\n      patientIdInput.value = patient.id;\n      document.getElementById(\'fullName\').value = patient.fullName || \'\';\n      document.getElementById(\'dateOfBirth\').value = patient.dateOfBirth ? new Date(patient.dateOfBirth).toISOString().split(\'T\')[0] : \'\';\n      document.getElementById(\'cpf\').value = patient.cpf || \'\';\n      document.getElementById(\'rg\').value = patient.rg || \'\';\n      document.getElementById(\'gender\').value = patient.gender || \'\';\n      document.getElementById(\'phone\').value = patient.phone || \'\';\n      document.getElementById(\'email\').value = patient.email || \'\';\n      document.getElementById(\'emergencyContact\').value = patient.emergencyContact || \'\';\n      document.getElementById(\'address\').value = patient.address || \'\';\n      document.getElementById(\'city\').value = patient.city || \'\';\n      document.getElementById(\'state\').value = patient.state || \'\';\n      document.getElementById(\'zipCode\').value = patient.zipCode || \'\';\n      document.getElementById(\'insurancePlanId\').value = patient.insurancePlanId || \'\';\n      document.getElementById(\'insuranceNumber\').value = patient.insuranceNumber || \'\';\n      document.getElementById(\'insuranceExpirationDate\').value = patient.insuranceExpirationDate ? new Date(patient.insuranceExpirationDate).toISOString().split(\'T\')[0] : \'\';\n      document.getElementById(\'healthConditions\').value = patient.healthConditions || \'\';\n      document.getElementById(\'allergies\').value = patient.allergies || \'\';\n      document.getElementById(\'medications\').value = patient.medications || \'\';\n      document.getElementById(\'notes\').value = patient.notes || \'\';\n      document.getElementById(\'isActive\').checked = patient.isActive !== false; // Default to true if undefined\n    }\n    \n    // Visualizar paciente\n    async function viewPatient(patientId) {\n      try {\n        const response = await fetch(`/api/patients/${patientId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar dados do paciente\');\n        }\n        \n        const patient = await response.json();\n        \n        // Preencher dados na modal de visualização\n        document.getElementById(\'patientViewName\').textContent = patient.fullName || \'N/A\';\n        document.getElementById(\'patientViewAge\').textContent = calculateAge(patient.dateOfBirth);\n        \n        // Iniciais para o avatar\n        const initials = patient.fullName\n          ? patient.fullName.split(\' \').map(name => name.charAt(0)).join(\'\').substring(0, 2).toUpperCase()\n          : \'??\';\n        document.getElementById(\'patientViewAvatar\').textContent = initials;\n        \n        // Informações pessoais\n        document.getElementById(\'patientViewCpf\').textContent = patient.cpf || \'N/A\';\n        document.getElementById(\'patientViewRg\').textContent = patient.rg || \'N/A\';\n        document.getElementById(\'patientViewDob\').textContent = formatDate(patient.dateOfBirth);\n        document.getElementById(\'patientViewGender\').textContent = translateGender(patient.gender);\n        document.getElementById(\'patientViewPhone\').textContent = patient.phone || \'N/A\';\n        document.getElementById(\'patientViewEmail\').textContent = patient.email || \'N/A\';\n        document.getElementById(\'patientViewEmergency\').textContent = patient.emergencyContact || \'N/A\';\n        \n        const statusElement = document.getElementById(\'patientViewStatus\');\n        statusElement.textContent = patient.isActive ? \'Ativo\' : \'Inativo\';\n        statusElement.className = `status ${patient.isActive ? \'status-active\' : \'status-inactive\'}`;\n        \n        // Endereço\n        document.getElementById(\'patientViewAddress\').textContent = patient.address || \'N/A\';\n        document.getElementById(\'patientViewCity\').textContent = patient.city || \'N/A\';\n        document.getElementById(\'patientViewState\').textContent = patient.state || \'N/A\';\n        document.getElementById(\'patientViewZip\').textContent = patient.zipCode || \'N/A\';\n        \n        // Plano de saúde\n        const planName = patient.insurancePlan ? patient.insurancePlan.name : \'N/A\';\n        document.getElementById(\'patientViewPlan\').textContent = planName;\n        document.getElementById(\'patientViewPlanNumber\').textContent = patient.insuranceNumber || \'N/A\';\n        document.getElementById(\'patientViewPlanExpiration\').textContent = formatDate(patient.insuranceExpirationDate);\n        \n        // Saúde\n        document.getElementById(\'patientViewHealth\').textContent = patient.healthConditions || \'Nenhuma registrada\';\n        document.getElementById(\'patientViewAllergies\').textContent = patient.allergies || \'Nenhuma registrada\';\n        document.getElementById(\'patientViewMedications\').textContent = patient.medications || \'Nenhuma registrada\';\n        \n        // Observações\n        document.getElementById(\'patientViewNotes\').textContent = patient.notes || \'Nenhuma observação\';\n        \n        // Configurar botão de edição\n        editFromViewButton.dataset.patientId = patient.id;\n        \n        // Abrir modal\n        viewPatientModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar paciente:\', error);\n        alert(\'Erro ao carregar dados do paciente. Tente novamente.\');\n      }\n    }\n    \n    // Fechar modal\n    function closePatientModal() {\n      patientModal.classList.remove(\'active\');\n    }\n    \n    // Fechar modal de visualização\n    function closeViewPatientModal() {\n      viewPatientModal.classList.remove(\'active\');\n    }\n    \n    // Salvar paciente\n    async function savePatient() {\n      try {\n        // Validação básica\n        const fullName = document.getElementById(\'fullName\').value.trim();\n        const dateOfBirth = document.getElementById(\'dateOfBirth\').value;\n        const cpf = document.getElementById(\'cpf\').value.trim();\n        const phone = document.getElementById(\'phone\').value.trim();\n        \n        if (!fullName || !dateOfBirth || !cpf || !phone) {\n          alert(\'Por favor, preencha todos os campos obrigatórios.\');\n          return;\n        }\n        \n        // Preparar dados do paciente\n        const patientData = {\n          fullName,\n          dateOfBirth,\n          cpf,\n          rg: document.getElementById(\'rg\').value.trim(),\n          gender: document.getElementById(\'gender\').value,\n          phone,\n          email: document.getElementById(\'email\').value.trim(),\n          emergencyContact: document.getElementById(\'emergencyContact\').value.trim(),\n          address: document.getElementById(\'address\').value.trim(),\n          city: document.getElementById(\'city\').value.trim(),\n          state: document.getElementById(\'state\').value.trim(),\n          zipCode: document.getElementById(\'zipCode\').value.trim(),\n          insurancePlanId: document.getElementById(\'insurancePlanId\').value || null,\n          insuranceNumber: document.getElementById(\'insuranceNumber\').value.trim(),\n          insuranceExpirationDate: document.getElementById(\'insuranceExpirationDate\').value || null,\n          healthConditions: document.getElementById(\'healthConditions\').value.trim(),\n          allergies: document.getElementById(\'allergies\').value.trim(),\n          medications: document.getElementById(\'medications\').value.trim(),\n          notes: document.getElementById(\'notes\').value.trim(),\n          isActive: document.getElementById(\'isActive\').checked\n        };\n        \n        const patientId = patientIdInput.value;\n        let response;\n        \n        if (patientId) {\n          // Editar paciente existente\n          response = await fetch(`/api/patients/${patientId}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(patientData)\n          });\n        } else {\n          // Adicionar novo paciente\n          response = await fetch(\'/api/patients\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(patientData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || \'Erro ao salvar paciente\');\n        }\n        \n        // Fechar modal e recarregar lista\n        closePatientModal();\n        loadPatients(searchPatientInput.value);\n        \n        alert(patientId ? \'Paciente atualizado com sucesso!\' : \'Paciente adicionado com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar paciente:\', error);\n        alert(`Erro ao salvar paciente: ${error.message}`);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n    \n    // Utilidade para debounce (limitar execução de função)\n    function debounce(func, wait) {\n      let timeout;\n      return function(...args) {\n        const context = this;\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(context, args), wait);\n      };\n    }\n  </script>\n', PosixPath('client/public/patients.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 2249c0027b56fc8ef70ca141f8927c175c8ac692ea423d235d5a97ad1b9ef115d87d95af92ab362ad31e475d14ce9d0455cba0972d360c67303822425c880c1d_0
2025-05-07 18:31:35,249 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('client/public/professionals.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 043f1880700020a0f7b0a9eb9af62e10c906034a67b8a45f1621cbfe1848507f7e7105933f458ccd084243a03a95bb359306b6e71d15be1bb4f04e016520fb22_0
2025-05-07 18:31:35,258 - semgrep.rule_match - DEBUG - match_key = ('\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', async () => {\n      await checkAuth();\n      setupEventListeners();\n      await Promise.all([\n        loadFacilities(),\n        loadProfessionals()\n      ]);\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const professionalGrid = document.getElementById(\'professionalGrid\');\n    const professionalsTableBody = document.getElementById(\'professionalsTableBody\');\n    const searchProfessional = document.getElementById(\'searchProfessional\');\n    const addProfessionalCard = document.getElementById(\'addProfessionalCard\');\n    const paginationElement = document.getElementById(\'pagination\');\n    \n    // Modal Professional\n    const professionalModal = document.getElementById(\'professionalModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const professionalForm = document.getElementById(\'professionalForm\');\n    const professionalIdInput = document.getElementById(\'professionalId\');\n    const userIdInput = document.getElementById(\'userId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    const passwordGroup = document.getElementById(\'passwordGroup\');\n    \n    // Elementos para a imagem de perfil\n    const profileImageUpload = document.getElementById(\'profileImageUpload\');\n    const profileImageInput = document.getElementById(\'profileImage\');\n    const profileImageUrlInput = document.getElementById(\'profileImageUrl\');\n    \n    // Modal View Professional\n    const viewProfessionalModal = document.getElementById(\'viewProfessionalModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const closeDetailButton = document.getElementById(\'closeDetailButton\');\n    const editProfessionalButton = document.getElementById(\'editProfessionalButton\');\n    \n    // Tabs\n    const infoTab = document.getElementById(\'infoTab\');\n    const internsTab = document.getElementById(\'internsTab\');\n    const scheduleTab = document.getElementById(\'scheduleTab\');\n    const infoTabContent = document.getElementById(\'infoTabContent\');\n    const internsTabContent = document.getElementById(\'internsTabContent\');\n    const scheduleTabContent = document.getElementById(\'scheduleTabContent\');\n    \n    // Filtros\n    const typeFilter = document.getElementById(\'typeFilter\');\n    const facilityFilter = document.getElementById(\'facilityFilter\');\n    const roleFilter = document.getElementById(\'roleFilter\');\n    const statusFilter = document.getElementById(\'statusFilter\');\n    const filterButton = document.getElementById(\'filterButton\');\n    \n    // Variáveis globais\n    let currentUser = null;\n    let professionals = [];\n    let facilities = [];\n    let currentProfessional = null;\n    let currentPage = 1;\n    const itemsPerPage = 10;\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        currentUser = await response.json();\n        displayUserData(currentUser);\n        \n        // Configurar permissões baseadas no papel do usuário\n        if (![\'admin\', \'coordinator\'].includes(currentUser.role)) {\n          addProfessionalCard.style.display = \'none\';\n        }\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir tipo de profissional\n    function translateProfessionalType(type) {\n      const translations = {\n        \'psychologist\': \'Psicologia\',\n        \'physiotherapist\': \'Fisioterapia\',\n        \'speech_therapist\': \'Fonoaudiologia\',\n        \'occupational_therapist\': \'Terapia Ocupacional\',\n        \'other\': \'Outro\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Traduzir tipo de contratação\n    function translateEmploymentType(type) {\n      const translations = {\n        \'employee\': \'CLT\',\n        \'contractor\': \'Terceirizado/PJ\',\n        \'freelancer\': \'Autônomo\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Pesquisar\n      searchProfessional.addEventListener(\'input\', filterProfessionals);\n      \n      // Adicionar profissional\n      addProfessionalCard.addEventListener(\'click\', openAddProfessionalModal);\n      \n      // Formulário de profissional\n      closeModal.addEventListener(\'click\', closeProfessionalModal);\n      cancelButton.addEventListener(\'click\', closeProfessionalModal);\n      saveButton.addEventListener(\'click\', saveProfessional);\n      \n      // Upload de imagem\n      profileImageUpload.addEventListener(\'click\', () => profileImageInput.click());\n      profileImageInput.addEventListener(\'change\', handleProfileImageUpload);\n      \n      // Modal de visualização\n      closeViewModal.addEventListener(\'click\', closeViewProfessionalModal);\n      closeDetailButton.addEventListener(\'click\', closeViewProfessionalModal);\n      editProfessionalButton.addEventListener(\'click\', editProfessionalFromView);\n      \n      // Tabs\n      infoTab.addEventListener(\'click\', () => switchTab(\'info\'));\n      internsTab.addEventListener(\'click\', () => switchTab(\'interns\'));\n      scheduleTab.addEventListener(\'click\', () => switchTab(\'schedule\'));\n      \n      // Filtros\n      filterButton.addEventListener(\'click\', applyFilters);\n      \n      // Fechar modais ao clicar fora\n      professionalModal.addEventListener(\'click\', e => {\n        if (e.target === professionalModal) closeProfessionalModal();\n      });\n      \n      viewProfessionalModal.addEventListener(\'click\', e => {\n        if (e.target === viewProfessionalModal) closeViewProfessionalModal();\n      });\n    }\n    \n    // Carregar unidades para filtros e formulário\n    async function loadFacilities() {\n      try {\n        const response = await fetch(\'/api/facilities\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar unidades\');\n        }\n        \n        facilities = await response.json();\n        \n        // Preencher select de unidade no formulário\n        const facilityIdSelect = document.getElementById(\'facilityId\');\n        facilityIdSelect.innerHTML = \'<option value="">Selecione</option>\';\n        \n        facilities.forEach(facility => {\n          const option = document.createElement(\'option\');\n          option.value = facility.id;\n          option.textContent = facility.name;\n          facilityIdSelect.appendChild(option);\n        });\n        \n        // Preencher select de unidade no filtro\n        facilityFilter.innerHTML = \'<option value="">Todas as unidades</option>\';\n        \n        facilities.forEach(facility => {\n          const option = document.createElement(\'option\');\n          option.value = facility.id;\n          option.textContent = facility.name;\n          facilityFilter.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar unidades:\', error);\n      }\n    }\n    \n    // Carregar profissionais\n    async function loadProfessionals() {\n      try {\n        const response = await fetch(\'/api/professionals\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar profissionais\');\n        }\n        \n        professionals = await response.json();\n        renderProfessionalsGrid();\n        renderProfessionalsTable();\n        \n        // Preencher supervisores no formulário\n        const supervisorIdSelect = document.getElementById(\'supervisorId\');\n        supervisorIdSelect.innerHTML = \'<option value="">Selecione (se aplicável)</option>\';\n        \n        professionals\n          .filter(p => [\'admin\', \'coordinator\', \'professional\'].includes(p.user.role))\n          .forEach(professional => {\n            const option = document.createElement(\'option\');\n            option.value = professional.id;\n            option.textContent = professional.user.fullName;\n            supervisorIdSelect.appendChild(option);\n          });\n      } catch (error) {\n        console.error(\'Erro ao carregar profissionais:\', error);\n        professionalsTableBody.innerHTML = `\n          <tr>\n            <td colspan="7">Erro ao carregar profissionais. Tente novamente mais tarde.</td>\n          </tr>\n        `;\n      }\n    }\n    \n    // Renderizar grid de profissionais\n    function renderProfessionalsGrid() {\n      // Limpar grid, mantendo o card de adicionar\n      const addCard = document.getElementById(\'addProfessionalCard\');\n      professionalGrid.innerHTML = \'\';\n      professionalGrid.appendChild(addCard);\n      \n      // Se não há profissionais\n      if (professionals.length === 0) {\n        const emptyCard = document.createElement(\'div\');\n        emptyCard.className = \'empty-state\';\n        emptyCard.innerHTML = `\n          <div class="empty-icon">👨\u200d⚕️</div>\n          <div class="empty-text">Nenhum profissional encontrado</div>\n        `;\n        professionalGrid.insertBefore(emptyCard, addCard);\n        return;\n      }\n      \n      // Mostrar no máximo 4 profissionais no grid\n      const displayProfessionals = professionals.slice(0, 4);\n      \n      // Adicionar cards de profissionais\n      displayProfessionals.forEach(professional => {\n        const card = document.createElement(\'div\');\n        card.className = \'professional-card\';\n        \n        const initials = professional.user.fullName\n          .split(\' \')\n          .map(name => name.charAt(0))\n          .join(\'\')\n          .substring(0, 2)\n          .toUpperCase();\n        \n        card.innerHTML = `\n          <div class="professional-header">\n            ${professional.user.profileImageUrl\n              ? `<img src="${professional.user.profileImageUrl}" alt="${professional.user.fullName}" class="professional-photo">`\n              : `<div class="professional-avatar">${initials}</div>`\n            }\n            <div class="professional-info">\n              <h3 class="professional-name">${professional.user.fullName}</h3>\n              <div class="professional-type">${translateProfessionalType(professional.professionalType)}</div>\n              <div class="professional-license">${professional.licenseNumber ? `${professional.licenseType || \'\'} ${professional.licenseNumber}` : \'\'}</div>\n            </div>\n          </div>\n          \n          <div class="professional-contact">\n            <span class="professional-icon">📧</span> ${professional.user.email}\n          </div>\n          \n          <div class="professional-contact">\n            <span class="professional-icon">📞</span> ${professional.user.phone || \'Não informado\'}\n          </div>\n          \n          <div class="professional-specialization">\n            <div class="specialization-title">Especialização</div>\n            <div class="specialization-text">${professional.specialization || \'Não informado\'}</div>\n          </div>\n          \n          <div class="professional-footer">\n            <div>\n              <span class="status ${professional.user.isActive ? \'status-active\' : \'status-inactive\'}">\n                ${professional.user.isActive ? \'Ativo\' : \'Inativo\'}\n              </span>\n            </div>\n            \n            <div class="professional-actions">\n              <button class="button button-outline view-professional" data-id="${professional.id}">Ver detalhes</button>\n            </div>\n          </div>\n        `;\n        \n        professionalGrid.insertBefore(card, addCard);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-professional\').forEach(button => {\n        button.addEventListener(\'click\', () => viewProfessional(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Renderizar tabela de profissionais\n    function renderProfessionalsTable() {\n      // Se não há profissionais\n      if (professionals.length === 0) {\n        professionalsTableBody.innerHTML = `\n          <tr>\n            <td colspan="7" class="text-center">Nenhum profissional encontrado</td>\n          </tr>\n        `;\n        paginationElement.innerHTML = \'\';\n        return;\n      }\n      \n      // Calcular paginação\n      const totalPages = Math.ceil(professionals.length / itemsPerPage);\n      const start = (currentPage - 1) * itemsPerPage;\n      const end = Math.min(start + itemsPerPage, professionals.length);\n      const paginatedProfessionals = professionals.slice(start, end);\n      \n      // Limpar tabela\n      professionalsTableBody.innerHTML = \'\';\n      \n      // Adicionar linhas\n      paginatedProfessionals.forEach(professional => {\n        const row = document.createElement(\'tr\');\n        \n        // Encontrar unidade\n        const facility = facilities.find(f => f.id === professional.user.facilityId);\n        \n        row.innerHTML = `\n          <td>${professional.user.fullName}</td>\n          <td>${translateProfessionalType(professional.professionalType)}</td>\n          <td>${professional.licenseNumber ? `${professional.licenseType || \'\'} ${professional.licenseNumber}` : \'-\'}</td>\n          <td>${professional.user.email}<br>${professional.user.phone || \'\'}</td>\n          <td>${facility ? facility.name : \'-\'}</td>\n          <td><span class="status ${professional.user.isActive ? \'status-active\' : \'status-inactive\'}">${professional.user.isActive ? \'Ativo\' : \'Inativo\'}</span></td>\n          <td>\n            <button class="action-button view-professional" data-id="${professional.id}">Visualizar</button>\n            <button class="action-button edit-professional" data-id="${professional.id}">Editar</button>\n          </td>\n        `;\n        \n        professionalsTableBody.appendChild(row);\n      });\n      \n      // Adicionar paginação\n      renderPagination(totalPages);\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-professional\').forEach(button => {\n        button.addEventListener(\'click\', () => viewProfessional(parseInt(button.dataset.id)));\n      });\n      \n      document.querySelectorAll(\'.edit-professional\').forEach(button => {\n        button.addEventListener(\'click\', () => editProfessional(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Renderizar paginação\n    function renderPagination(totalPages) {\n      if (totalPages <= 1) {\n        paginationElement.innerHTML = \'\';\n        return;\n      }\n      \n      let paginationHTML = \'\';\n      \n      // Botão anterior\n      paginationHTML += `\n        <li class="pagination-item">\n          <a href="#" class="pagination-link ${currentPage === 1 ? \'disabled\' : \'\'}" data-page="${currentPage - 1}">\n            &laquo;\n          </a>\n        </li>\n      `;\n      \n      // Páginas\n      for (let i = 1; i <= totalPages; i++) {\n        paginationHTML += `\n          <li class="pagination-item">\n            <a href="#" class="pagination-link ${i === currentPage ? \'active\' : \'\'}" data-page="${i}">\n              ${i}\n            </a>\n          </li>\n        `;\n      }\n      \n      // Botão próximo\n      paginationHTML += `\n        <li class="pagination-item">\n          <a href="#" class="pagination-link ${currentPage === totalPages ? \'disabled\' : \'\'}" data-page="${currentPage + 1}">\n            &raquo;\n          </a>\n        </li>\n      `;\n      \n      paginationElement.innerHTML = paginationHTML;\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.pagination-link:not(.disabled)\').forEach(link => {\n        link.addEventListener(\'click\', (e) => {\n          e.preventDefault();\n          currentPage = parseInt(link.dataset.page);\n          renderProfessionalsTable();\n        });\n      });\n    }\n    \n    // Filtrar profissionais\n    function filterProfessionals() {\n      const searchTerm = searchProfessional.value.toLowerCase();\n      \n      if (!searchTerm) {\n        renderProfessionalsTable();\n        return;\n      }\n      \n      const filteredProfessionals = professionals.filter(professional =>\n        professional.user.fullName.toLowerCase().includes(searchTerm) ||\n        professional.user.email.toLowerCase().includes(searchTerm) ||\n        (professional.licenseNumber && professional.licenseNumber.toLowerCase().includes(searchTerm))\n      );\n      \n      // Atualizar temporariamente a lista\n      const originalProfessionals = professionals;\n      professionals = filteredProfessionals;\n      currentPage = 1;\n      \n      renderProfessionalsTable();\n      \n      // Restaurar a lista original\n      professionals = originalProfessionals;\n    }\n    \n    // Aplicar filtros\n    function applyFilters() {\n      const professionalType = typeFilter.value;\n      const facilityId = facilityFilter.value;\n      const role = roleFilter.value;\n      const isActive = statusFilter.value;\n      \n      // Fazer uma nova requisição com os filtros\n      let url = \'/api/professionals?\';\n      const params = [];\n      \n      if (professionalType) params.push(`professionalType=${professionalType}`);\n      if (facilityId) params.push(`facilityId=${facilityId}`);\n      if (role) params.push(`role=${role}`);\n      if (isActive === \'active\') params.push(\'isActive=true\');\n      if (isActive === \'inactive\') params.push(\'isActive=false\');\n      \n      url += params.join(\'&\');\n      \n      fetch(url, { credentials: \'include\' })\n        .then(response => {\n          if (!response.ok) throw new Error(\'Erro ao filtrar profissionais\');\n          return response.json();\n        })\n        .then(data => {\n          professionals = data;\n          currentPage = 1;\n          renderProfessionalsGrid();\n          renderProfessionalsTable();\n        })\n        .catch(error => {\n          console.error(\'Erro ao aplicar filtros:\', error);\n          alert(\'Erro ao aplicar filtros. Tente novamente.\');\n        });\n    }\n    \n    // Abrir modal para adicionar profissional\n    function openAddProfessionalModal() {\n      modalTitle.textContent = \'Adicionar Profissional\';\n      professionalForm.reset();\n      professionalIdInput.value = \'\';\n      userIdInput.value = \'\';\n      passwordGroup.style.display = \'block\';\n      \n      // Resetar imagem de perfil\n      profileImageUpload.style.backgroundImage = \'\';\n      profileImageUpload.classList.remove(\'has-image\');\n      profileImageUrlInput.value = \'\';\n      \n      document.getElementById(\'isActive\').checked = true;\n      \n      professionalModal.classList.add(\'active\');\n    }\n    \n    // Abrir modal para editar profissional\n    async function editProfessional(professionalId) {\n      try {\n        const response = await fetch(`/api/professionals/${professionalId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar detalhes do profissional\');\n        }\n        \n        const professional = await response.json();\n        \n        modalTitle.textContent = \'Editar Profissional\';\n        \n        // Ocultar campo de senha para edição\n        passwordGroup.style.display = \'none\';\n        \n        // Preencher formulário\n        professionalIdInput.value = professional.id;\n        userIdInput.value = professional.user.id;\n        document.getElementById(\'fullName\').value = professional.user.fullName;\n        document.getElementById(\'username\').value = professional.user.username;\n        document.getElementById(\'email\').value = professional.user.email;\n        document.getElementById(\'phone\').value = professional.user.phone || \'\';\n        document.getElementById(\'role\').value = professional.user.role;\n        document.getElementById(\'facilityId\').value = professional.user.facilityId;\n        document.getElementById(\'professionalType\').value = professional.professionalType;\n        document.getElementById(\'licenseNumber\').value = professional.licenseNumber || \'\';\n        document.getElementById(\'licenseType\').value = professional.licenseType || \'\';\n        document.getElementById(\'specialization\').value = professional.specialization || \'\';\n        document.getElementById(\'employmentType\').value = professional.employmentType || \'\';\n        document.getElementById(\'hourlyRate\').value = professional.hourlyRate || \'\';\n        document.getElementById(\'supervisorId\').value = professional.supervisorId || \'\';\n        document.getElementById(\'bio\').value = professional.bio || \'\';\n        document.getElementById(\'isActive\').checked = professional.user.isActive;\n        \n        // Definir imagem de perfil\n        if (professional.user.profileImageUrl) {\n          profileImageUpload.style.backgroundImage = `url("${professional.user.profileImageUrl}")`;\n          profileImageUpload.classList.add(\'has-image\');\n          profileImageUrlInput.value = professional.user.profileImageUrl;\n        } else {\n          profileImageUpload.style.backgroundImage = \'\';\n          profileImageUpload.classList.remove(\'has-image\');\n          profileImageUrlInput.value = \'\';\n        }\n        \n        professionalModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar profissional:\', error);\n        alert(\'Erro ao carregar detalhes do profissional. Tente novamente.\');\n      }\n    }\n    \n    // Editar a partir da visualização\n    function editProfessionalFromView() {\n      closeViewProfessionalModal();\n      if (currentProfessional) {\n        editProfessional(currentProfessional.id);\n      }\n    }\n    \n    // Fechar modal de profissional\n    function closeProfessionalModal() {\n      professionalModal.classList.remove(\'active\');\n    }\n    \n    // Fechar modal de visualização\n    function closeViewProfessionalModal() {\n      viewProfessionalModal.classList.remove(\'active\');\n    }\n    \n    // Alternar entre as abas\n    function switchTab(tab) {\n      // Remover classe ativa de todas as abas\n      infoTab.classList.remove(\'active\');\n      internsTab.classList.remove(\'active\');\n      scheduleTab.classList.remove(\'active\');\n      \n      infoTabContent.classList.remove(\'active\');\n      internsTabContent.classList.remove(\'active\');\n      scheduleTabContent.classList.remove(\'active\');\n      \n      // Adicionar classe ativa à aba clicada\n      if (tab === \'info\') {\n        infoTab.classList.add(\'active\');\n        infoTabContent.classList.add(\'active\');\n      } else if (tab === \'interns\') {\n        internsTab.classList.add(\'active\');\n        internsTabContent.classList.add(\'active\');\n      } else if (tab === \'schedule\') {\n        scheduleTab.classList.add(\'active\');\n        scheduleTabContent.classList.add(\'active\');\n      }\n    }\n    \n    // Manipular upload de imagem\n    function handleProfileImageUpload(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n      \n      // Tipos de arquivo permitidos\n      const allowedTypes = [\'image/jpeg\', \'image/png\', \'image/gif\'];\n      if (!allowedTypes.includes(file.type)) {\n        alert(\'Tipo de arquivo não suportado. Por favor, utilize JPG, PNG ou GIF.\');\n        return;\n      }\n      \n      // Tamanho máximo: 2MB\n      const maxSize = 2 * 1024 * 1024;\n      if (file.size > maxSize) {\n        alert(\'Arquivo muito grande. O tamanho máximo é 2MB.\');\n        return;\n      }\n      \n      const reader = new FileReader();\n      reader.onload = function(e) {\n        profileImageUpload.style.backgroundImage = `url("${e.target.result}")`;\n        profileImageUpload.classList.add(\'has-image\');\n        \n        // Aqui você poderia fazer upload para um serviço de armazenamento\n        // Por ora, vamos usar a URL de dados diretamente\n        profileImageUrlInput.value = e.target.result;\n      };\n      reader.readAsDataURL(file);\n    }\n    \n    // Salvar profissional\n    async function saveProfessional() {\n      try {\n        // Validação básica\n        const fullNameInput = document.getElementById(\'fullName\');\n        const usernameInput = document.getElementById(\'username\');\n        const emailInput = document.getElementById(\'email\');\n        const phoneInput = document.getElementById(\'phone\');\n        const roleInput = document.getElementById(\'role\');\n        const facilityIdInput = document.getElementById(\'facilityId\');\n        const professionalTypeInput = document.getElementById(\'professionalType\');\n        const passwordInput = document.getElementById(\'password\');\n        \n        if (!fullNameInput.value) {\n          alert(\'Por favor, insira o nome completo\');\n          fullNameInput.focus();\n          return;\n        }\n        \n        if (!usernameInput.value) {\n          alert(\'Por favor, insira o nome de usuário\');\n          usernameInput.focus();\n          return;\n        }\n        \n        if (!professionalIdInput.value && !passwordInput.value) {\n          alert(\'Por favor, insira uma senha\');\n          passwordInput.focus();\n          return;\n        }\n        \n        if (!emailInput.value) {\n          alert(\'Por favor, insira o e-mail\');\n          emailInput.focus();\n          return;\n        }\n        \n        if (!phoneInput.value) {\n          alert(\'Por favor, insira o telefone\');\n          phoneInput.focus();\n          return;\n        }\n        \n        if (!roleInput.value) {\n          alert(\'Por favor, selecione a função\');\n          roleInput.focus();\n          return;\n        }\n        \n        if (!facilityIdInput.value) {\n          alert(\'Por favor, selecione a unidade\');\n          facilityIdInput.focus();\n          return;\n        }\n        \n        if (!professionalTypeInput.value) {\n          alert(\'Por favor, selecione a especialidade\');\n          professionalTypeInput.focus();\n          return;\n        }\n        \n        // Preparar dados do profissional\n        const professionalData = {\n          username: usernameInput.value,\n          fullName: fullNameInput.value,\n          email: emailInput.value,\n          phone: phoneInput.value,\n          role: roleInput.value,\n          facilityId: parseInt(facilityIdInput.value),\n          profileImageUrl: profileImageUrlInput.value,\n          isActive: document.getElementById(\'isActive\').checked,\n          professionalType: professionalTypeInput.value,\n          licenseNumber: document.getElementById(\'licenseNumber\').value,\n          licenseType: document.getElementById(\'licenseType\').value,\n          specialization: document.getElementById(\'specialization\').value,\n          employmentType: document.getElementById(\'employmentType\').value,\n          hourlyRate: document.getElementById(\'hourlyRate\').value \n            ? parseFloat(document.getElementById(\'hourlyRate\').value) \n            : null,\n          supervisorId: document.getElementById(\'supervisorId\').value\n            ? parseInt(document.getElementById(\'supervisorId\').value)\n            : null,\n          bio: document.getElementById(\'bio\').value\n        };\n        \n        // Adicionar senha apenas para novos profissionais\n        if (!professionalIdInput.value) {\n          professionalData.password = passwordInput.value;\n        }\n        \n        let response;\n        \n        if (professionalIdInput.value) {\n          // Editar profissional existente\n          response = await fetch(`/api/professionals/${professionalIdInput.value}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(professionalData)\n          });\n        } else {\n          // Adicionar novo profissional\n          response = await fetch(\'/api/professionals\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(professionalData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(errorText || \'Erro ao salvar profissional\');\n        }\n        \n        // Fechar modal e recarregar profissionais\n        closeProfessionalModal();\n        await loadProfessionals();\n        \n        alert(professionalIdInput.value ? \'Profissional atualizado com sucesso!\' : \'Profissional adicionado com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar profissional:\', error);\n        alert(`Erro ao salvar profissional: ${error.message}`);\n      }\n    }\n    \n    // Visualizar profissional\n    async function viewProfessional(professionalId) {\n      try {\n        const response = await fetch(`/api/professionals/${professionalId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar detalhes do profissional\');\n        }\n        \n        currentProfessional = await response.json();\n        \n        // Encontrar unidade\n        const facility = facilities.find(f => f.id === currentProfessional.user.facilityId);\n        \n        // Encontrar supervisor\n        let supervisor = null;\n        if (currentProfessional.supervisorId) {\n          supervisor = professionals.find(p => p.id === currentProfessional.supervisorId);\n        }\n        \n        // Iniciais do profissional para o avatar\n        const initials = currentProfessional.user.fullName\n          .split(\' \')\n          .map(name => name.charAt(0))\n          .join(\'\')\n          .substring(0, 2)\n          .toUpperCase();\n        \n        // Avatar\n        if (currentProfessional.user.profileImageUrl) {\n          document.getElementById(\'viewProfessionalAvatar\').style.display = \'none\';\n          \n          // Criar elemento de imagem ou atualizar existente\n          let photoElement = document.querySelector(\'.professional-view-photo\');\n          if (!photoElement) {\n            photoElement = document.createElement(\'img\');\n            photoElement.className = \'professional-view-photo\';\n            photoElement.alt = currentProfessional.user.fullName;\n            document.querySelector(\'.professional-view-header\').insertBefore(\n              photoElement,\n              document.querySelector(\'.professional-view-info\')\n            );\n          }\n          \n          photoElement.src = currentProfessional.user.profileImageUrl;\n        } else {\n          // Remover foto se existir\n          const photoElement = document.querySelector(\'.professional-view-photo\');\n          if (photoElement) photoElement.remove();\n          \n          document.getElementById(\'viewProfessionalAvatar\').style.display = \'flex\';\n          document.getElementById(\'viewProfessionalAvatar\').textContent = initials;\n        }\n        \n        // Informações básicas\n        document.getElementById(\'viewProfessionalName\').textContent = currentProfessional.user.fullName;\n        document.getElementById(\'viewProfessionalType\').textContent = translateProfessionalType(currentProfessional.professionalType);\n        document.getElementById(\'viewProfessionalLicense\').textContent = currentProfessional.licenseNumber\n          ? `${currentProfessional.licenseType || \'\'} ${currentProfessional.licenseNumber}`\n          : \'\';\n        \n        // Informações de contato\n        document.getElementById(\'viewEmail\').textContent = currentProfessional.user.email;\n        document.getElementById(\'viewPhone\').textContent = currentProfessional.user.phone || \'Não informado\';\n        document.getElementById(\'viewFacility\').textContent = facility ? facility.name : \'Não definida\';\n        document.getElementById(\'viewStatus\').innerHTML = `\n          <span class="status ${currentProfessional.user.isActive ? \'status-active\' : \'status-inactive\'}">\n            ${currentProfessional.user.isActive ? \'Ativo\' : \'Inativo\'}\n          </span>\n        `;\n        \n        // Informações profissionais\n        document.getElementById(\'viewRole\').textContent = translateRole(currentProfessional.user.role);\n        document.getElementById(\'viewProfessionalTypeDetail\').textContent = translateProfessionalType(currentProfessional.professionalType);\n        document.getElementById(\'viewEmploymentType\').textContent = currentProfessional.employmentType\n          ? translateEmploymentType(currentProfessional.employmentType)\n          : \'Não informado\';\n        document.getElementById(\'viewHourlyRate\').textContent = currentProfessional.hourlyRate\n          ? `R$ ${parseFloat(currentProfessional.hourlyRate).toFixed(2)}`\n          : \'Não informado\';\n        document.getElementById(\'viewSpecialization\').textContent = currentProfessional.specialization || \'Não informado\';\n        document.getElementById(\'viewSupervisor\').textContent = supervisor\n          ? supervisor.user.fullName\n          : \'Não possui\';\n        \n        // Biografia\n        document.getElementById(\'viewBio\').textContent = currentProfessional.bio || \'Nenhuma biografia adicionada.\';\n        \n        // Estagiários\n        if (currentProfessional.interns && currentProfessional.interns.length > 0) {\n          document.getElementById(\'internsList\').innerHTML = \'\';\n          document.getElementById(\'noInternsMessage\').style.display = \'none\';\n          document.getElementById(\'internsSection\').style.display = \'block\';\n          \n          currentProfessional.interns.forEach(intern => {\n            const internInitials = intern.user.fullName\n              .split(\' \')\n              .map(name => name.charAt(0))\n              .join(\'\')\n              .substring(0, 2)\n              .toUpperCase();\n            \n            const internElement = document.createElement(\'div\');\n            internElement.className = \'intern-item\';\n            internElement.innerHTML = `\n              <div class="intern-avatar">${internInitials}</div>\n              <div class="intern-info">\n                <div class="intern-name">${intern.user.fullName}</div>\n                <div class="intern-email">${intern.user.email}</div>\n              </div>\n            `;\n            \n            document.getElementById(\'internsList\').appendChild(internElement);\n          });\n        } else {\n          document.getElementById(\'internsSection\').style.display = \'none\';\n          document.getElementById(\'noInternsMessage\').style.display = \'block\';\n        }\n        \n        // Estatísticas\n        loadProfessionalStats(currentProfessional.id);\n        \n        // Mostrar primeira aba\n        switchTab(\'info\');\n        \n        // Exibir modal\n        viewProfessionalModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar profissional:\', error);\n        alert(\'Erro ao carregar detalhes do profissional. Tente novamente.\');\n      }\n    }\n    \n    // Carregar estatísticas do profissional\n    async function loadProfessionalStats(professionalId) {\n      try {\n        // Obter estatísticas de agendamentos\n        const appointmentsResponse = await fetch(`/api/professionals/${professionalId}/stats`, {\n          credentials: \'include\'\n        });\n        \n        if (appointmentsResponse.ok) {\n          const stats = await appointmentsResponse.json();\n          \n          // Estatísticas por tipo (mês atual)\n          document.getElementById(\'viewAppointmentsCount\').textContent = stats.totalAppointments || 0;\n          document.getElementById(\'viewTotalHours\').textContent = stats.totalHours \n            ? `${stats.totalHours}h` \n            : \'0h\';\n          \n          // Total de pacientes atendidos\n          document.getElementById(\'viewPatientCount\').textContent = stats.patientCount || 0;\n          \n          // Evoluções\n          document.getElementById(\'viewEvolutionsCount\').textContent = stats.evolutionCount || 0;\n        }\n      } catch (error) {\n        console.error(\'Erro ao carregar estatísticas do profissional:\', error);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n   $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', async () => {\n      await checkAuth();\n      setupEventListeners();\n      await Promise.all([\n        loadFacilities(),\n        loadProfessionals()\n      ]);\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const professionalGrid = document.getElementById(\'professionalGrid\');\n    const professionalsTableBody = document.getElementById(\'professionalsTableBody\');\n    const searchProfessional = document.getElementById(\'searchProfessional\');\n    const addProfessionalCard = document.getElementById(\'addProfessionalCard\');\n    const paginationElement = document.getElementById(\'pagination\');\n    \n    // Modal Professional\n    const professionalModal = document.getElementById(\'professionalModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const professionalForm = document.getElementById(\'professionalForm\');\n    const professionalIdInput = document.getElementById(\'professionalId\');\n    const userIdInput = document.getElementById(\'userId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    const passwordGroup = document.getElementById(\'passwordGroup\');\n    \n    // Elementos para a imagem de perfil\n    const profileImageUpload = document.getElementById(\'profileImageUpload\');\n    const profileImageInput = document.getElementById(\'profileImage\');\n    const profileImageUrlInput = document.getElementById(\'profileImageUrl\');\n    \n    // Modal View Professional\n    const viewProfessionalModal = document.getElementById(\'viewProfessionalModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const closeDetailButton = document.getElementById(\'closeDetailButton\');\n    const editProfessionalButton = document.getElementById(\'editProfessionalButton\');\n    \n    // Tabs\n    const infoTab = document.getElementById(\'infoTab\');\n    const internsTab = document.getElementById(\'internsTab\');\n    const scheduleTab = document.getElementById(\'scheduleTab\');\n    const infoTabContent = document.getElementById(\'infoTabContent\');\n    const internsTabContent = document.getElementById(\'internsTabContent\');\n    const scheduleTabContent = document.getElementById(\'scheduleTabContent\');\n    \n    // Filtros\n    const typeFilter = document.getElementById(\'typeFilter\');\n    const facilityFilter = document.getElementById(\'facilityFilter\');\n    const roleFilter = document.getElementById(\'roleFilter\');\n    const statusFilter = document.getElementById(\'statusFilter\');\n    const filterButton = document.getElementById(\'filterButton\');\n    \n    // Variáveis globais\n    let currentUser = null;\n    let professionals = [];\n    let facilities = [];\n    let currentProfessional = null;\n    let currentPage = 1;\n    const itemsPerPage = 10;\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        currentUser = await response.json();\n        displayUserData(currentUser);\n        \n        // Configurar permissões baseadas no papel do usuário\n        if (![\'admin\', \'coordinator\'].includes(currentUser.role)) {\n          addProfessionalCard.style.display = \'none\';\n        }\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir tipo de profissional\n    function translateProfessionalType(type) {\n      const translations = {\n        \'psychologist\': \'Psicologia\',\n        \'physiotherapist\': \'Fisioterapia\',\n        \'speech_therapist\': \'Fonoaudiologia\',\n        \'occupational_therapist\': \'Terapia Ocupacional\',\n        \'other\': \'Outro\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Traduzir tipo de contratação\n    function translateEmploymentType(type) {\n      const translations = {\n        \'employee\': \'CLT\',\n        \'contractor\': \'Terceirizado/PJ\',\n        \'freelancer\': \'Autônomo\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Pesquisar\n      searchProfessional.addEventListener(\'input\', filterProfessionals);\n      \n      // Adicionar profissional\n      addProfessionalCard.addEventListener(\'click\', openAddProfessionalModal);\n      \n      // Formulário de profissional\n      closeModal.addEventListener(\'click\', closeProfessionalModal);\n      cancelButton.addEventListener(\'click\', closeProfessionalModal);\n      saveButton.addEventListener(\'click\', saveProfessional);\n      \n      // Upload de imagem\n      profileImageUpload.addEventListener(\'click\', () => profileImageInput.click());\n      profileImageInput.addEventListener(\'change\', handleProfileImageUpload);\n      \n      // Modal de visualização\n      closeViewModal.addEventListener(\'click\', closeViewProfessionalModal);\n      closeDetailButton.addEventListener(\'click\', closeViewProfessionalModal);\n      editProfessionalButton.addEventListener(\'click\', editProfessionalFromView);\n      \n      // Tabs\n      infoTab.addEventListener(\'click\', () => switchTab(\'info\'));\n      internsTab.addEventListener(\'click\', () => switchTab(\'interns\'));\n      scheduleTab.addEventListener(\'click\', () => switchTab(\'schedule\'));\n      \n      // Filtros\n      filterButton.addEventListener(\'click\', applyFilters);\n      \n      // Fechar modais ao clicar fora\n      professionalModal.addEventListener(\'click\', e => {\n        if (e.target === professionalModal) closeProfessionalModal();\n      });\n      \n      viewProfessionalModal.addEventListener(\'click\', e => {\n        if (e.target === viewProfessionalModal) closeViewProfessionalModal();\n      });\n    }\n    \n    // Carregar unidades para filtros e formulário\n    async function loadFacilities() {\n      try {\n        const response = await fetch(\'/api/facilities\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar unidades\');\n        }\n        \n        facilities = await response.json();\n        \n        // Preencher select de unidade no formulário\n        const facilityIdSelect = document.getElementById(\'facilityId\');\n        facilityIdSelect.innerHTML = \'<option value="">Selecione</option>\';\n        \n        facilities.forEach(facility => {\n          const option = document.createElement(\'option\');\n          option.value = facility.id;\n          option.textContent = facility.name;\n          facilityIdSelect.appendChild(option);\n        });\n        \n        // Preencher select de unidade no filtro\n        facilityFilter.innerHTML = \'<option value="">Todas as unidades</option>\';\n        \n        facilities.forEach(facility => {\n          const option = document.createElement(\'option\');\n          option.value = facility.id;\n          option.textContent = facility.name;\n          facilityFilter.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar unidades:\', error);\n      }\n    }\n    \n    // Carregar profissionais\n    async function loadProfessionals() {\n      try {\n        const response = await fetch(\'/api/professionals\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar profissionais\');\n        }\n        \n        professionals = await response.json();\n        renderProfessionalsGrid();\n        renderProfessionalsTable();\n        \n        // Preencher supervisores no formulário\n        const supervisorIdSelect = document.getElementById(\'supervisorId\');\n        supervisorIdSelect.innerHTML = \'<option value="">Selecione (se aplicável)</option>\';\n        \n        professionals\n          .filter(p => [\'admin\', \'coordinator\', \'professional\'].includes(p.user.role))\n          .forEach(professional => {\n            const option = document.createElement(\'option\');\n            option.value = professional.id;\n            option.textContent = professional.user.fullName;\n            supervisorIdSelect.appendChild(option);\n          });\n      } catch (error) {\n        console.error(\'Erro ao carregar profissionais:\', error);\n        professionalsTableBody.innerHTML = `\n          <tr>\n            <td colspan="7">Erro ao carregar profissionais. Tente novamente mais tarde.</td>\n          </tr>\n        `;\n      }\n    }\n    \n    // Renderizar grid de profissionais\n    function renderProfessionalsGrid() {\n      // Limpar grid, mantendo o card de adicionar\n      const addCard = document.getElementById(\'addProfessionalCard\');\n      professionalGrid.innerHTML = \'\';\n      professionalGrid.appendChild(addCard);\n      \n      // Se não há profissionais\n      if (professionals.length === 0) {\n        const emptyCard = document.createElement(\'div\');\n        emptyCard.className = \'empty-state\';\n        emptyCard.innerHTML = `\n          <div class="empty-icon">👨\u200d⚕️</div>\n          <div class="empty-text">Nenhum profissional encontrado</div>\n        `;\n        professionalGrid.insertBefore(emptyCard, addCard);\n        return;\n      }\n      \n      // Mostrar no máximo 4 profissionais no grid\n      const displayProfessionals = professionals.slice(0, 4);\n      \n      // Adicionar cards de profissionais\n      displayProfessionals.forEach(professional => {\n        const card = document.createElement(\'div\');\n        card.className = \'professional-card\';\n        \n        const initials = professional.user.fullName\n          .split(\' \')\n          .map(name => name.charAt(0))\n          .join(\'\')\n          .substring(0, 2)\n          .toUpperCase();\n        \n        card.innerHTML = `\n          <div class="professional-header">\n            ${professional.user.profileImageUrl\n              ? `<img src="${professional.user.profileImageUrl}" alt="${professional.user.fullName}" class="professional-photo">`\n              : `<div class="professional-avatar">${initials}</div>`\n            }\n            <div class="professional-info">\n              <h3 class="professional-name">${professional.user.fullName}</h3>\n              <div class="professional-type">${translateProfessionalType(professional.professionalType)}</div>\n              <div class="professional-license">${professional.licenseNumber ? `${professional.licenseType || \'\'} ${professional.licenseNumber}` : \'\'}</div>\n            </div>\n          </div>\n          \n          <div class="professional-contact">\n            <span class="professional-icon">📧</span> ${professional.user.email}\n          </div>\n          \n          <div class="professional-contact">\n            <span class="professional-icon">📞</span> ${professional.user.phone || \'Não informado\'}\n          </div>\n          \n          <div class="professional-specialization">\n            <div class="specialization-title">Especialização</div>\n            <div class="specialization-text">${professional.specialization || \'Não informado\'}</div>\n          </div>\n          \n          <div class="professional-footer">\n            <div>\n              <span class="status ${professional.user.isActive ? \'status-active\' : \'status-inactive\'}">\n                ${professional.user.isActive ? \'Ativo\' : \'Inativo\'}\n              </span>\n            </div>\n            \n            <div class="professional-actions">\n              <button class="button button-outline view-professional" data-id="${professional.id}">Ver detalhes</button>\n            </div>\n          </div>\n        `;\n        \n        professionalGrid.insertBefore(card, addCard);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-professional\').forEach(button => {\n        button.addEventListener(\'click\', () => viewProfessional(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Renderizar tabela de profissionais\n    function renderProfessionalsTable() {\n      // Se não há profissionais\n      if (professionals.length === 0) {\n        professionalsTableBody.innerHTML = `\n          <tr>\n            <td colspan="7" class="text-center">Nenhum profissional encontrado</td>\n          </tr>\n        `;\n        paginationElement.innerHTML = \'\';\n        return;\n      }\n      \n      // Calcular paginação\n      const totalPages = Math.ceil(professionals.length / itemsPerPage);\n      const start = (currentPage - 1) * itemsPerPage;\n      const end = Math.min(start + itemsPerPage, professionals.length);\n      const paginatedProfessionals = professionals.slice(start, end);\n      \n      // Limpar tabela\n      professionalsTableBody.innerHTML = \'\';\n      \n      // Adicionar linhas\n      paginatedProfessionals.forEach(professional => {\n        const row = document.createElement(\'tr\');\n        \n        // Encontrar unidade\n        const facility = facilities.find(f => f.id === professional.user.facilityId);\n        \n        row.innerHTML = `\n          <td>${professional.user.fullName}</td>\n          <td>${translateProfessionalType(professional.professionalType)}</td>\n          <td>${professional.licenseNumber ? `${professional.licenseType || \'\'} ${professional.licenseNumber}` : \'-\'}</td>\n          <td>${professional.user.email}<br>${professional.user.phone || \'\'}</td>\n          <td>${facility ? facility.name : \'-\'}</td>\n          <td><span class="status ${professional.user.isActive ? \'status-active\' : \'status-inactive\'}">${professional.user.isActive ? \'Ativo\' : \'Inativo\'}</span></td>\n          <td>\n            <button class="action-button view-professional" data-id="${professional.id}">Visualizar</button>\n            <button class="action-button edit-professional" data-id="${professional.id}">Editar</button>\n          </td>\n        `;\n        \n        professionalsTableBody.appendChild(row);\n      });\n      \n      // Adicionar paginação\n      renderPagination(totalPages);\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-professional\').forEach(button => {\n        button.addEventListener(\'click\', () => viewProfessional(parseInt(button.dataset.id)));\n      });\n      \n      document.querySelectorAll(\'.edit-professional\').forEach(button => {\n        button.addEventListener(\'click\', () => editProfessional(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Renderizar paginação\n    function renderPagination(totalPages) {\n      if (totalPages <= 1) {\n        paginationElement.innerHTML = \'\';\n        return;\n      }\n      \n      let paginationHTML = \'\';\n      \n      // Botão anterior\n      paginationHTML += `\n        <li class="pagination-item">\n          <a href="#" class="pagination-link ${currentPage === 1 ? \'disabled\' : \'\'}" data-page="${currentPage - 1}">\n            &laquo;\n          </a>\n        </li>\n      `;\n      \n      // Páginas\n      for (let i = 1; i <= totalPages; i++) {\n        paginationHTML += `\n          <li class="pagination-item">\n            <a href="#" class="pagination-link ${i === currentPage ? \'active\' : \'\'}" data-page="${i}">\n              ${i}\n            </a>\n          </li>\n        `;\n      }\n      \n      // Botão próximo\n      paginationHTML += `\n        <li class="pagination-item">\n          <a href="#" class="pagination-link ${currentPage === totalPages ? \'disabled\' : \'\'}" data-page="${currentPage + 1}">\n            &raquo;\n          </a>\n        </li>\n      `;\n      \n      paginationElement.innerHTML = paginationHTML;\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.pagination-link:not(.disabled)\').forEach(link => {\n        link.addEventListener(\'click\', (e) => {\n          e.preventDefault();\n          currentPage = parseInt(link.dataset.page);\n          renderProfessionalsTable();\n        });\n      });\n    }\n    \n    // Filtrar profissionais\n    function filterProfessionals() {\n      const searchTerm = searchProfessional.value.toLowerCase();\n      \n      if (!searchTerm) {\n        renderProfessionalsTable();\n        return;\n      }\n      \n      const filteredProfessionals = professionals.filter(professional =>\n        professional.user.fullName.toLowerCase().includes(searchTerm) ||\n        professional.user.email.toLowerCase().includes(searchTerm) ||\n        (professional.licenseNumber && professional.licenseNumber.toLowerCase().includes(searchTerm))\n      );\n      \n      // Atualizar temporariamente a lista\n      const originalProfessionals = professionals;\n      professionals = filteredProfessionals;\n      currentPage = 1;\n      \n      renderProfessionalsTable();\n      \n      // Restaurar a lista original\n      professionals = originalProfessionals;\n    }\n    \n    // Aplicar filtros\n    function applyFilters() {\n      const professionalType = typeFilter.value;\n      const facilityId = facilityFilter.value;\n      const role = roleFilter.value;\n      const isActive = statusFilter.value;\n      \n      // Fazer uma nova requisição com os filtros\n      let url = \'/api/professionals?\';\n      const params = [];\n      \n      if (professionalType) params.push(`professionalType=${professionalType}`);\n      if (facilityId) params.push(`facilityId=${facilityId}`);\n      if (role) params.push(`role=${role}`);\n      if (isActive === \'active\') params.push(\'isActive=true\');\n      if (isActive === \'inactive\') params.push(\'isActive=false\');\n      \n      url += params.join(\'&\');\n      \n      fetch(url, { credentials: \'include\' })\n        .then(response => {\n          if (!response.ok) throw new Error(\'Erro ao filtrar profissionais\');\n          return response.json();\n        })\n        .then(data => {\n          professionals = data;\n          currentPage = 1;\n          renderProfessionalsGrid();\n          renderProfessionalsTable();\n        })\n        .catch(error => {\n          console.error(\'Erro ao aplicar filtros:\', error);\n          alert(\'Erro ao aplicar filtros. Tente novamente.\');\n        });\n    }\n    \n    // Abrir modal para adicionar profissional\n    function openAddProfessionalModal() {\n      modalTitle.textContent = \'Adicionar Profissional\';\n      professionalForm.reset();\n      professionalIdInput.value = \'\';\n      userIdInput.value = \'\';\n      passwordGroup.style.display = \'block\';\n      \n      // Resetar imagem de perfil\n      profileImageUpload.style.backgroundImage = \'\';\n      profileImageUpload.classList.remove(\'has-image\');\n      profileImageUrlInput.value = \'\';\n      \n      document.getElementById(\'isActive\').checked = true;\n      \n      professionalModal.classList.add(\'active\');\n    }\n    \n    // Abrir modal para editar profissional\n    async function editProfessional(professionalId) {\n      try {\n        const response = await fetch(`/api/professionals/${professionalId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar detalhes do profissional\');\n        }\n        \n        const professional = await response.json();\n        \n        modalTitle.textContent = \'Editar Profissional\';\n        \n        // Ocultar campo de senha para edição\n        passwordGroup.style.display = \'none\';\n        \n        // Preencher formulário\n        professionalIdInput.value = professional.id;\n        userIdInput.value = professional.user.id;\n        document.getElementById(\'fullName\').value = professional.user.fullName;\n        document.getElementById(\'username\').value = professional.user.username;\n        document.getElementById(\'email\').value = professional.user.email;\n        document.getElementById(\'phone\').value = professional.user.phone || \'\';\n        document.getElementById(\'role\').value = professional.user.role;\n        document.getElementById(\'facilityId\').value = professional.user.facilityId;\n        document.getElementById(\'professionalType\').value = professional.professionalType;\n        document.getElementById(\'licenseNumber\').value = professional.licenseNumber || \'\';\n        document.getElementById(\'licenseType\').value = professional.licenseType || \'\';\n        document.getElementById(\'specialization\').value = professional.specialization || \'\';\n        document.getElementById(\'employmentType\').value = professional.employmentType || \'\';\n        document.getElementById(\'hourlyRate\').value = professional.hourlyRate || \'\';\n        document.getElementById(\'supervisorId\').value = professional.supervisorId || \'\';\n        document.getElementById(\'bio\').value = professional.bio || \'\';\n        document.getElementById(\'isActive\').checked = professional.user.isActive;\n        \n        // Definir imagem de perfil\n        if (professional.user.profileImageUrl) {\n          profileImageUpload.style.backgroundImage = `url("${professional.user.profileImageUrl}")`;\n          profileImageUpload.classList.add(\'has-image\');\n          profileImageUrlInput.value = professional.user.profileImageUrl;\n        } else {\n          profileImageUpload.style.backgroundImage = \'\';\n          profileImageUpload.classList.remove(\'has-image\');\n          profileImageUrlInput.value = \'\';\n        }\n        \n        professionalModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar profissional:\', error);\n        alert(\'Erro ao carregar detalhes do profissional. Tente novamente.\');\n      }\n    }\n    \n    // Editar a partir da visualização\n    function editProfessionalFromView() {\n      closeViewProfessionalModal();\n      if (currentProfessional) {\n        editProfessional(currentProfessional.id);\n      }\n    }\n    \n    // Fechar modal de profissional\n    function closeProfessionalModal() {\n      professionalModal.classList.remove(\'active\');\n    }\n    \n    // Fechar modal de visualização\n    function closeViewProfessionalModal() {\n      viewProfessionalModal.classList.remove(\'active\');\n    }\n    \n    // Alternar entre as abas\n    function switchTab(tab) {\n      // Remover classe ativa de todas as abas\n      infoTab.classList.remove(\'active\');\n      internsTab.classList.remove(\'active\');\n      scheduleTab.classList.remove(\'active\');\n      \n      infoTabContent.classList.remove(\'active\');\n      internsTabContent.classList.remove(\'active\');\n      scheduleTabContent.classList.remove(\'active\');\n      \n      // Adicionar classe ativa à aba clicada\n      if (tab === \'info\') {\n        infoTab.classList.add(\'active\');\n        infoTabContent.classList.add(\'active\');\n      } else if (tab === \'interns\') {\n        internsTab.classList.add(\'active\');\n        internsTabContent.classList.add(\'active\');\n      } else if (tab === \'schedule\') {\n        scheduleTab.classList.add(\'active\');\n        scheduleTabContent.classList.add(\'active\');\n      }\n    }\n    \n    // Manipular upload de imagem\n    function handleProfileImageUpload(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n      \n      // Tipos de arquivo permitidos\n      const allowedTypes = [\'image/jpeg\', \'image/png\', \'image/gif\'];\n      if (!allowedTypes.includes(file.type)) {\n        alert(\'Tipo de arquivo não suportado. Por favor, utilize JPG, PNG ou GIF.\');\n        return;\n      }\n      \n      // Tamanho máximo: 2MB\n      const maxSize = 2 * 1024 * 1024;\n      if (file.size > maxSize) {\n        alert(\'Arquivo muito grande. O tamanho máximo é 2MB.\');\n        return;\n      }\n      \n      const reader = new FileReader();\n      reader.onload = function(e) {\n        profileImageUpload.style.backgroundImage = `url("${e.target.result}")`;\n        profileImageUpload.classList.add(\'has-image\');\n        \n        // Aqui você poderia fazer upload para um serviço de armazenamento\n        // Por ora, vamos usar a URL de dados diretamente\n        profileImageUrlInput.value = e.target.result;\n      };\n      reader.readAsDataURL(file);\n    }\n    \n    // Salvar profissional\n    async function saveProfessional() {\n      try {\n        // Validação básica\n        const fullNameInput = document.getElementById(\'fullName\');\n        const usernameInput = document.getElementById(\'username\');\n        const emailInput = document.getElementById(\'email\');\n        const phoneInput = document.getElementById(\'phone\');\n        const roleInput = document.getElementById(\'role\');\n        const facilityIdInput = document.getElementById(\'facilityId\');\n        const professionalTypeInput = document.getElementById(\'professionalType\');\n        const passwordInput = document.getElementById(\'password\');\n        \n        if (!fullNameInput.value) {\n          alert(\'Por favor, insira o nome completo\');\n          fullNameInput.focus();\n          return;\n        }\n        \n        if (!usernameInput.value) {\n          alert(\'Por favor, insira o nome de usuário\');\n          usernameInput.focus();\n          return;\n        }\n        \n        if (!professionalIdInput.value && !passwordInput.value) {\n          alert(\'Por favor, insira uma senha\');\n          passwordInput.focus();\n          return;\n        }\n        \n        if (!emailInput.value) {\n          alert(\'Por favor, insira o e-mail\');\n          emailInput.focus();\n          return;\n        }\n        \n        if (!phoneInput.value) {\n          alert(\'Por favor, insira o telefone\');\n          phoneInput.focus();\n          return;\n        }\n        \n        if (!roleInput.value) {\n          alert(\'Por favor, selecione a função\');\n          roleInput.focus();\n          return;\n        }\n        \n        if (!facilityIdInput.value) {\n          alert(\'Por favor, selecione a unidade\');\n          facilityIdInput.focus();\n          return;\n        }\n        \n        if (!professionalTypeInput.value) {\n          alert(\'Por favor, selecione a especialidade\');\n          professionalTypeInput.focus();\n          return;\n        }\n        \n        // Preparar dados do profissional\n        const professionalData = {\n          username: usernameInput.value,\n          fullName: fullNameInput.value,\n          email: emailInput.value,\n          phone: phoneInput.value,\n          role: roleInput.value,\n          facilityId: parseInt(facilityIdInput.value),\n          profileImageUrl: profileImageUrlInput.value,\n          isActive: document.getElementById(\'isActive\').checked,\n          professionalType: professionalTypeInput.value,\n          licenseNumber: document.getElementById(\'licenseNumber\').value,\n          licenseType: document.getElementById(\'licenseType\').value,\n          specialization: document.getElementById(\'specialization\').value,\n          employmentType: document.getElementById(\'employmentType\').value,\n          hourlyRate: document.getElementById(\'hourlyRate\').value \n            ? parseFloat(document.getElementById(\'hourlyRate\').value) \n            : null,\n          supervisorId: document.getElementById(\'supervisorId\').value\n            ? parseInt(document.getElementById(\'supervisorId\').value)\n            : null,\n          bio: document.getElementById(\'bio\').value\n        };\n        \n        // Adicionar senha apenas para novos profissionais\n        if (!professionalIdInput.value) {\n          professionalData.password = passwordInput.value;\n        }\n        \n        let response;\n        \n        if (professionalIdInput.value) {\n          // Editar profissional existente\n          response = await fetch(`/api/professionals/${professionalIdInput.value}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(professionalData)\n          });\n        } else {\n          // Adicionar novo profissional\n          response = await fetch(\'/api/professionals\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(professionalData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(errorText || \'Erro ao salvar profissional\');\n        }\n        \n        // Fechar modal e recarregar profissionais\n        closeProfessionalModal();\n        await loadProfessionals();\n        \n        alert(professionalIdInput.value ? \'Profissional atualizado com sucesso!\' : \'Profissional adicionado com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar profissional:\', error);\n        alert(`Erro ao salvar profissional: ${error.message}`);\n      }\n    }\n    \n    // Visualizar profissional\n    async function viewProfessional(professionalId) {\n      try {\n        const response = await fetch(`/api/professionals/${professionalId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar detalhes do profissional\');\n        }\n        \n        currentProfessional = await response.json();\n        \n        // Encontrar unidade\n        const facility = facilities.find(f => f.id === currentProfessional.user.facilityId);\n        \n        // Encontrar supervisor\n        let supervisor = null;\n        if (currentProfessional.supervisorId) {\n          supervisor = professionals.find(p => p.id === currentProfessional.supervisorId);\n        }\n        \n        // Iniciais do profissional para o avatar\n        const initials = currentProfessional.user.fullName\n          .split(\' \')\n          .map(name => name.charAt(0))\n          .join(\'\')\n          .substring(0, 2)\n          .toUpperCase();\n        \n        // Avatar\n        if (currentProfessional.user.profileImageUrl) {\n          document.getElementById(\'viewProfessionalAvatar\').style.display = \'none\';\n          \n          // Criar elemento de imagem ou atualizar existente\n          let photoElement = document.querySelector(\'.professional-view-photo\');\n          if (!photoElement) {\n            photoElement = document.createElement(\'img\');\n            photoElement.className = \'professional-view-photo\';\n            photoElement.alt = currentProfessional.user.fullName;\n            document.querySelector(\'.professional-view-header\').insertBefore(\n              photoElement,\n              document.querySelector(\'.professional-view-info\')\n            );\n          }\n          \n          photoElement.src = currentProfessional.user.profileImageUrl;\n        } else {\n          // Remover foto se existir\n          const photoElement = document.querySelector(\'.professional-view-photo\');\n          if (photoElement) photoElement.remove();\n          \n          document.getElementById(\'viewProfessionalAvatar\').style.display = \'flex\';\n          document.getElementById(\'viewProfessionalAvatar\').textContent = initials;\n        }\n        \n        // Informações básicas\n        document.getElementById(\'viewProfessionalName\').textContent = currentProfessional.user.fullName;\n        document.getElementById(\'viewProfessionalType\').textContent = translateProfessionalType(currentProfessional.professionalType);\n        document.getElementById(\'viewProfessionalLicense\').textContent = currentProfessional.licenseNumber\n          ? `${currentProfessional.licenseType || \'\'} ${currentProfessional.licenseNumber}`\n          : \'\';\n        \n        // Informações de contato\n        document.getElementById(\'viewEmail\').textContent = currentProfessional.user.email;\n        document.getElementById(\'viewPhone\').textContent = currentProfessional.user.phone || \'Não informado\';\n        document.getElementById(\'viewFacility\').textContent = facility ? facility.name : \'Não definida\';\n        document.getElementById(\'viewStatus\').innerHTML = `\n          <span class="status ${currentProfessional.user.isActive ? \'status-active\' : \'status-inactive\'}">\n            ${currentProfessional.user.isActive ? \'Ativo\' : \'Inativo\'}\n          </span>\n        `;\n        \n        // Informações profissionais\n        document.getElementById(\'viewRole\').textContent = translateRole(currentProfessional.user.role);\n        document.getElementById(\'viewProfessionalTypeDetail\').textContent = translateProfessionalType(currentProfessional.professionalType);\n        document.getElementById(\'viewEmploymentType\').textContent = currentProfessional.employmentType\n          ? translateEmploymentType(currentProfessional.employmentType)\n          : \'Não informado\';\n        document.getElementById(\'viewHourlyRate\').textContent = currentProfessional.hourlyRate\n          ? `R$ ${parseFloat(currentProfessional.hourlyRate).toFixed(2)}`\n          : \'Não informado\';\n        document.getElementById(\'viewSpecialization\').textContent = currentProfessional.specialization || \'Não informado\';\n        document.getElementById(\'viewSupervisor\').textContent = supervisor\n          ? supervisor.user.fullName\n          : \'Não possui\';\n        \n        // Biografia\n        document.getElementById(\'viewBio\').textContent = currentProfessional.bio || \'Nenhuma biografia adicionada.\';\n        \n        // Estagiários\n        if (currentProfessional.interns && currentProfessional.interns.length > 0) {\n          document.getElementById(\'internsList\').innerHTML = \'\';\n          document.getElementById(\'noInternsMessage\').style.display = \'none\';\n          document.getElementById(\'internsSection\').style.display = \'block\';\n          \n          currentProfessional.interns.forEach(intern => {\n            const internInitials = intern.user.fullName\n              .split(\' \')\n              .map(name => name.charAt(0))\n              .join(\'\')\n              .substring(0, 2)\n              .toUpperCase();\n            \n            const internElement = document.createElement(\'div\');\n            internElement.className = \'intern-item\';\n            internElement.innerHTML = `\n              <div class="intern-avatar">${internInitials}</div>\n              <div class="intern-info">\n                <div class="intern-name">${intern.user.fullName}</div>\n                <div class="intern-email">${intern.user.email}</div>\n              </div>\n            `;\n            \n            document.getElementById(\'internsList\').appendChild(internElement);\n          });\n        } else {\n          document.getElementById(\'internsSection\').style.display = \'none\';\n          document.getElementById(\'noInternsMessage\').style.display = \'block\';\n        }\n        \n        // Estatísticas\n        loadProfessionalStats(currentProfessional.id);\n        \n        // Mostrar primeira aba\n        switchTab(\'info\');\n        \n        // Exibir modal\n        viewProfessionalModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar profissional:\', error);\n        alert(\'Erro ao carregar detalhes do profissional. Tente novamente.\');\n      }\n    }\n    \n    // Carregar estatísticas do profissional\n    async function loadProfessionalStats(professionalId) {\n      try {\n        // Obter estatísticas de agendamentos\n        const appointmentsResponse = await fetch(`/api/professionals/${professionalId}/stats`, {\n          credentials: \'include\'\n        });\n        \n        if (appointmentsResponse.ok) {\n          const stats = await appointmentsResponse.json();\n          \n          // Estatísticas por tipo (mês atual)\n          document.getElementById(\'viewAppointmentsCount\').textContent = stats.totalAppointments || 0;\n          document.getElementById(\'viewTotalHours\').textContent = stats.totalHours \n            ? `${stats.totalHours}h` \n            : \'0h\';\n          \n          // Total de pacientes atendidos\n          document.getElementById(\'viewPatientCount\').textContent = stats.patientCount || 0;\n          \n          // Evoluções\n          document.getElementById(\'viewEvolutionsCount\').textContent = stats.evolutionCount || 0;\n        }\n      } catch (error) {\n        console.error(\'Erro ao carregar estatísticas do profissional:\', error);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n  </script>\n', PosixPath('client/public/professionals.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = df2f299420e3a6ebe470c7adf4e3e522fbdc70e98dc4f4ed0a0954fe0afa186c8f02aacfe54a005aa0e0564f045b3445892d412b78f038a68b72d216917dc3e5_0
2025-05-07 18:31:35,267 - semgrep.rule_match - DEBUG - match_key = ('\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', async () => {\n      await checkAuth();\n      setupEventListeners();\n      await Promise.all([\n        loadFacilities(),\n        loadProfessionals()\n      ]);\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const professionalGrid = document.getElementById(\'professionalGrid\');\n    const professionalsTableBody = document.getElementById(\'professionalsTableBody\');\n    const searchProfessional = document.getElementById(\'searchProfessional\');\n    const addProfessionalCard = document.getElementById(\'addProfessionalCard\');\n    const paginationElement = document.getElementById(\'pagination\');\n    \n    // Modal Professional\n    const professionalModal = document.getElementById(\'professionalModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const professionalForm = document.getElementById(\'professionalForm\');\n    const professionalIdInput = document.getElementById(\'professionalId\');\n    const userIdInput = document.getElementById(\'userId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    const passwordGroup = document.getElementById(\'passwordGroup\');\n    \n    // Elementos para a imagem de perfil\n    const profileImageUpload = document.getElementById(\'profileImageUpload\');\n    const profileImageInput = document.getElementById(\'profileImage\');\n    const profileImageUrlInput = document.getElementById(\'profileImageUrl\');\n    \n    // Modal View Professional\n    const viewProfessionalModal = document.getElementById(\'viewProfessionalModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const closeDetailButton = document.getElementById(\'closeDetailButton\');\n    const editProfessionalButton = document.getElementById(\'editProfessionalButton\');\n    \n    // Tabs\n    const infoTab = document.getElementById(\'infoTab\');\n    const internsTab = document.getElementById(\'internsTab\');\n    const scheduleTab = document.getElementById(\'scheduleTab\');\n    const infoTabContent = document.getElementById(\'infoTabContent\');\n    const internsTabContent = document.getElementById(\'internsTabContent\');\n    const scheduleTabContent = document.getElementById(\'scheduleTabContent\');\n    \n    // Filtros\n    const typeFilter = document.getElementById(\'typeFilter\');\n    const facilityFilter = document.getElementById(\'facilityFilter\');\n    const roleFilter = document.getElementById(\'roleFilter\');\n    const statusFilter = document.getElementById(\'statusFilter\');\n    const filterButton = document.getElementById(\'filterButton\');\n    \n    // Variáveis globais\n    let currentUser = null;\n    let professionals = [];\n    let facilities = [];\n    let currentProfessional = null;\n    let currentPage = 1;\n    const itemsPerPage = 10;\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        currentUser = await response.json();\n        displayUserData(currentUser);\n        \n        // Configurar permissões baseadas no papel do usuário\n        if (![\'admin\', \'coordinator\'].includes(currentUser.role)) {\n          addProfessionalCard.style.display = \'none\';\n        }\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir tipo de profissional\n    function translateProfessionalType(type) {\n      const translations = {\n        \'psychologist\': \'Psicologia\',\n        \'physiotherapist\': \'Fisioterapia\',\n        \'speech_therapist\': \'Fonoaudiologia\',\n        \'occupational_therapist\': \'Terapia Ocupacional\',\n        \'other\': \'Outro\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Traduzir tipo de contratação\n    function translateEmploymentType(type) {\n      const translations = {\n        \'employee\': \'CLT\',\n        \'contractor\': \'Terceirizado/PJ\',\n        \'freelancer\': \'Autônomo\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Pesquisar\n      searchProfessional.addEventListener(\'input\', filterProfessionals);\n      \n      // Adicionar profissional\n      addProfessionalCard.addEventListener(\'click\', openAddProfessionalModal);\n      \n      // Formulário de profissional\n      closeModal.addEventListener(\'click\', closeProfessionalModal);\n      cancelButton.addEventListener(\'click\', closeProfessionalModal);\n      saveButton.addEventListener(\'click\', saveProfessional);\n      \n      // Upload de imagem\n      profileImageUpload.addEventListener(\'click\', () => profileImageInput.click());\n      profileImageInput.addEventListener(\'change\', handleProfileImageUpload);\n      \n      // Modal de visualização\n      closeViewModal.addEventListener(\'click\', closeViewProfessionalModal);\n      closeDetailButton.addEventListener(\'click\', closeViewProfessionalModal);\n      editProfessionalButton.addEventListener(\'click\', editProfessionalFromView);\n      \n      // Tabs\n      infoTab.addEventListener(\'click\', () => switchTab(\'info\'));\n      internsTab.addEventListener(\'click\', () => switchTab(\'interns\'));\n      scheduleTab.addEventListener(\'click\', () => switchTab(\'schedule\'));\n      \n      // Filtros\n      filterButton.addEventListener(\'click\', applyFilters);\n      \n      // Fechar modais ao clicar fora\n      professionalModal.addEventListener(\'click\', e => {\n        if (e.target === professionalModal) closeProfessionalModal();\n      });\n      \n      viewProfessionalModal.addEventListener(\'click\', e => {\n        if (e.target === viewProfessionalModal) closeViewProfessionalModal();\n      });\n    }\n    \n    // Carregar unidades para filtros e formulário\n    async function loadFacilities() {\n      try {\n        const response = await fetch(\'/api/facilities\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar unidades\');\n        }\n        \n        facilities = await response.json();\n        \n        // Preencher select de unidade no formulário\n        const facilityIdSelect = document.getElementById(\'facilityId\');\n        facilityIdSelect.innerHTML = \'<option value="">Selecione</option>\';\n        \n        facilities.forEach(facility => {\n          const option = document.createElement(\'option\');\n          option.value = facility.id;\n          option.textContent = facility.name;\n          facilityIdSelect.appendChild(option);\n        });\n        \n        // Preencher select de unidade no filtro\n        facilityFilter.innerHTML = \'<option value="">Todas as unidades</option>\';\n        \n        facilities.forEach(facility => {\n          const option = document.createElement(\'option\');\n          option.value = facility.id;\n          option.textContent = facility.name;\n          facilityFilter.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar unidades:\', error);\n      }\n    }\n    \n    // Carregar profissionais\n    async function loadProfessionals() {\n      try {\n        const response = await fetch(\'/api/professionals\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar profissionais\');\n        }\n        \n        professionals = await response.json();\n        renderProfessionalsGrid();\n        renderProfessionalsTable();\n        \n        // Preencher supervisores no formulário\n        const supervisorIdSelect = document.getElementById(\'supervisorId\');\n        supervisorIdSelect.innerHTML = \'<option value="">Selecione (se aplicável)</option>\';\n        \n        professionals\n          .filter(p => [\'admin\', \'coordinator\', \'professional\'].includes(p.user.role))\n          .forEach(professional => {\n            const option = document.createElement(\'option\');\n            option.value = professional.id;\n            option.textContent = professional.user.fullName;\n            supervisorIdSelect.appendChild(option);\n          });\n      } catch (error) {\n        console.error(\'Erro ao carregar profissionais:\', error);\n        professionalsTableBody.innerHTML = `\n          <tr>\n            <td colspan="7">Erro ao carregar profissionais. Tente novamente mais tarde.</td>\n          </tr>\n        `;\n      }\n    }\n    \n    // Renderizar grid de profissionais\n    function renderProfessionalsGrid() {\n      // Limpar grid, mantendo o card de adicionar\n      const addCard = document.getElementById(\'addProfessionalCard\');\n      professionalGrid.innerHTML = \'\';\n      professionalGrid.appendChild(addCard);\n      \n      // Se não há profissionais\n      if (professionals.length === 0) {\n        const emptyCard = document.createElement(\'div\');\n        emptyCard.className = \'empty-state\';\n        emptyCard.innerHTML = `\n          <div class="empty-icon">👨\u200d⚕️</div>\n          <div class="empty-text">Nenhum profissional encontrado</div>\n        `;\n        professionalGrid.insertBefore(emptyCard, addCard);\n        return;\n      }\n      \n      // Mostrar no máximo 4 profissionais no grid\n      const displayProfessionals = professionals.slice(0, 4);\n      \n      // Adicionar cards de profissionais\n      displayProfessionals.forEach(professional => {\n        const card = document.createElement(\'div\');\n        card.className = \'professional-card\';\n        \n        const initials = professional.user.fullName\n          .split(\' \')\n          .map(name => name.charAt(0))\n          .join(\'\')\n          .substring(0, 2)\n          .toUpperCase();\n        \n        card.innerHTML = `\n          <div class="professional-header">\n            ${professional.user.profileImageUrl\n              ? `<img src="${professional.user.profileImageUrl}" alt="${professional.user.fullName}" class="professional-photo">`\n              : `<div class="professional-avatar">${initials}</div>`\n            }\n            <div class="professional-info">\n              <h3 class="professional-name">${professional.user.fullName}</h3>\n              <div class="professional-type">${translateProfessionalType(professional.professionalType)}</div>\n              <div class="professional-license">${professional.licenseNumber ? `${professional.licenseType || \'\'} ${professional.licenseNumber}` : \'\'}</div>\n            </div>\n          </div>\n          \n          <div class="professional-contact">\n            <span class="professional-icon">📧</span> ${professional.user.email}\n          </div>\n          \n          <div class="professional-contact">\n            <span class="professional-icon">📞</span> ${professional.user.phone || \'Não informado\'}\n          </div>\n          \n          <div class="professional-specialization">\n            <div class="specialization-title">Especialização</div>\n            <div class="specialization-text">${professional.specialization || \'Não informado\'}</div>\n          </div>\n          \n          <div class="professional-footer">\n            <div>\n              <span class="status ${professional.user.isActive ? \'status-active\' : \'status-inactive\'}">\n                ${professional.user.isActive ? \'Ativo\' : \'Inativo\'}\n              </span>\n            </div>\n            \n            <div class="professional-actions">\n              <button class="button button-outline view-professional" data-id="${professional.id}">Ver detalhes</button>\n            </div>\n          </div>\n        `;\n        \n        professionalGrid.insertBefore(card, addCard);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-professional\').forEach(button => {\n        button.addEventListener(\'click\', () => viewProfessional(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Renderizar tabela de profissionais\n    function renderProfessionalsTable() {\n      // Se não há profissionais\n      if (professionals.length === 0) {\n        professionalsTableBody.innerHTML = `\n          <tr>\n            <td colspan="7" class="text-center">Nenhum profissional encontrado</td>\n          </tr>\n        `;\n        paginationElement.innerHTML = \'\';\n        return;\n      }\n      \n      // Calcular paginação\n      const totalPages = Math.ceil(professionals.length / itemsPerPage);\n      const start = (currentPage - 1) * itemsPerPage;\n      const end = Math.min(start + itemsPerPage, professionals.length);\n      const paginatedProfessionals = professionals.slice(start, end);\n      \n      // Limpar tabela\n      professionalsTableBody.innerHTML = \'\';\n      \n      // Adicionar linhas\n      paginatedProfessionals.forEach(professional => {\n        const row = document.createElement(\'tr\');\n        \n        // Encontrar unidade\n        const facility = facilities.find(f => f.id === professional.user.facilityId);\n        \n        row.innerHTML = `\n          <td>${professional.user.fullName}</td>\n          <td>${translateProfessionalType(professional.professionalType)}</td>\n          <td>${professional.licenseNumber ? `${professional.licenseType || \'\'} ${professional.licenseNumber}` : \'-\'}</td>\n          <td>${professional.user.email}<br>${professional.user.phone || \'\'}</td>\n          <td>${facility ? facility.name : \'-\'}</td>\n          <td><span class="status ${professional.user.isActive ? \'status-active\' : \'status-inactive\'}">${professional.user.isActive ? \'Ativo\' : \'Inativo\'}</span></td>\n          <td>\n            <button class="action-button view-professional" data-id="${professional.id}">Visualizar</button>\n            <button class="action-button edit-professional" data-id="${professional.id}">Editar</button>\n          </td>\n        `;\n        \n        professionalsTableBody.appendChild(row);\n      });\n      \n      // Adicionar paginação\n      renderPagination(totalPages);\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-professional\').forEach(button => {\n        button.addEventListener(\'click\', () => viewProfessional(parseInt(button.dataset.id)));\n      });\n      \n      document.querySelectorAll(\'.edit-professional\').forEach(button => {\n        button.addEventListener(\'click\', () => editProfessional(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Renderizar paginação\n    function renderPagination(totalPages) {\n      if (totalPages <= 1) {\n        paginationElement.innerHTML = \'\';\n        return;\n      }\n      \n      let paginationHTML = \'\';\n      \n      // Botão anterior\n      paginationHTML += `\n        <li class="pagination-item">\n          <a href="#" class="pagination-link ${currentPage === 1 ? \'disabled\' : \'\'}" data-page="${currentPage - 1}">\n            &laquo;\n          </a>\n        </li>\n      `;\n      \n      // Páginas\n      for (let i = 1; i <= totalPages; i++) {\n        paginationHTML += `\n          <li class="pagination-item">\n            <a href="#" class="pagination-link ${i === currentPage ? \'active\' : \'\'}" data-page="${i}">\n              ${i}\n            </a>\n          </li>\n        `;\n      }\n      \n      // Botão próximo\n      paginationHTML += `\n        <li class="pagination-item">\n          <a href="#" class="pagination-link ${currentPage === totalPages ? \'disabled\' : \'\'}" data-page="${currentPage + 1}">\n            &raquo;\n          </a>\n        </li>\n      `;\n      \n      paginationElement.innerHTML = paginationHTML;\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.pagination-link:not(.disabled)\').forEach(link => {\n        link.addEventListener(\'click\', (e) => {\n          e.preventDefault();\n          currentPage = parseInt(link.dataset.page);\n          renderProfessionalsTable();\n        });\n      });\n    }\n    \n    // Filtrar profissionais\n    function filterProfessionals() {\n      const searchTerm = searchProfessional.value.toLowerCase();\n      \n      if (!searchTerm) {\n        renderProfessionalsTable();\n        return;\n      }\n      \n      const filteredProfessionals = professionals.filter(professional =>\n        professional.user.fullName.toLowerCase().includes(searchTerm) ||\n        professional.user.email.toLowerCase().includes(searchTerm) ||\n        (professional.licenseNumber && professional.licenseNumber.toLowerCase().includes(searchTerm))\n      );\n      \n      // Atualizar temporariamente a lista\n      const originalProfessionals = professionals;\n      professionals = filteredProfessionals;\n      currentPage = 1;\n      \n      renderProfessionalsTable();\n      \n      // Restaurar a lista original\n      professionals = originalProfessionals;\n    }\n    \n    // Aplicar filtros\n    function applyFilters() {\n      const professionalType = typeFilter.value;\n      const facilityId = facilityFilter.value;\n      const role = roleFilter.value;\n      const isActive = statusFilter.value;\n      \n      // Fazer uma nova requisição com os filtros\n      let url = \'/api/professionals?\';\n      const params = [];\n      \n      if (professionalType) params.push(`professionalType=${professionalType}`);\n      if (facilityId) params.push(`facilityId=${facilityId}`);\n      if (role) params.push(`role=${role}`);\n      if (isActive === \'active\') params.push(\'isActive=true\');\n      if (isActive === \'inactive\') params.push(\'isActive=false\');\n      \n      url += params.join(\'&\');\n      \n      fetch(url, { credentials: \'include\' })\n        .then(response => {\n          if (!response.ok) throw new Error(\'Erro ao filtrar profissionais\');\n          return response.json();\n        })\n        .then(data => {\n          professionals = data;\n          currentPage = 1;\n          renderProfessionalsGrid();\n          renderProfessionalsTable();\n        })\n        .catch(error => {\n          console.error(\'Erro ao aplicar filtros:\', error);\n          alert(\'Erro ao aplicar filtros. Tente novamente.\');\n        });\n    }\n    \n    // Abrir modal para adicionar profissional\n    function openAddProfessionalModal() {\n      modalTitle.textContent = \'Adicionar Profissional\';\n      professionalForm.reset();\n      professionalIdInput.value = \'\';\n      userIdInput.value = \'\';\n      passwordGroup.style.display = \'block\';\n      \n      // Resetar imagem de perfil\n      profileImageUpload.style.backgroundImage = \'\';\n      profileImageUpload.classList.remove(\'has-image\');\n      profileImageUrlInput.value = \'\';\n      \n      document.getElementById(\'isActive\').checked = true;\n      \n      professionalModal.classList.add(\'active\');\n    }\n    \n    // Abrir modal para editar profissional\n    async function editProfessional(professionalId) {\n      try {\n        const response = await fetch(`/api/professionals/${professionalId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar detalhes do profissional\');\n        }\n        \n        const professional = await response.json();\n        \n        modalTitle.textContent = \'Editar Profissional\';\n        \n        // Ocultar campo de senha para edição\n        passwordGroup.style.display = \'none\';\n        \n        // Preencher formulário\n        professionalIdInput.value = professional.id;\n        userIdInput.value = professional.user.id;\n        document.getElementById(\'fullName\').value = professional.user.fullName;\n        document.getElementById(\'username\').value = professional.user.username;\n        document.getElementById(\'email\').value = professional.user.email;\n        document.getElementById(\'phone\').value = professional.user.phone || \'\';\n        document.getElementById(\'role\').value = professional.user.role;\n        document.getElementById(\'facilityId\').value = professional.user.facilityId;\n        document.getElementById(\'professionalType\').value = professional.professionalType;\n        document.getElementById(\'licenseNumber\').value = professional.licenseNumber || \'\';\n        document.getElementById(\'licenseType\').value = professional.licenseType || \'\';\n        document.getElementById(\'specialization\').value = professional.specialization || \'\';\n        document.getElementById(\'employmentType\').value = professional.employmentType || \'\';\n        document.getElementById(\'hourlyRate\').value = professional.hourlyRate || \'\';\n        document.getElementById(\'supervisorId\').value = professional.supervisorId || \'\';\n        document.getElementById(\'bio\').value = professional.bio || \'\';\n        document.getElementById(\'isActive\').checked = professional.user.isActive;\n        \n        // Definir imagem de perfil\n        if (professional.user.profileImageUrl) {\n          profileImageUpload.style.backgroundImage = `url("${professional.user.profileImageUrl}")`;\n          profileImageUpload.classList.add(\'has-image\');\n          profileImageUrlInput.value = professional.user.profileImageUrl;\n        } else {\n          profileImageUpload.style.backgroundImage = \'\';\n          profileImageUpload.classList.remove(\'has-image\');\n          profileImageUrlInput.value = \'\';\n        }\n        \n        professionalModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar profissional:\', error);\n        alert(\'Erro ao carregar detalhes do profissional. Tente novamente.\');\n      }\n    }\n    \n    // Editar a partir da visualização\n    function editProfessionalFromView() {\n      closeViewProfessionalModal();\n      if (currentProfessional) {\n        editProfessional(currentProfessional.id);\n      }\n    }\n    \n    // Fechar modal de profissional\n    function closeProfessionalModal() {\n      professionalModal.classList.remove(\'active\');\n    }\n    \n    // Fechar modal de visualização\n    function closeViewProfessionalModal() {\n      viewProfessionalModal.classList.remove(\'active\');\n    }\n    \n    // Alternar entre as abas\n    function switchTab(tab) {\n      // Remover classe ativa de todas as abas\n      infoTab.classList.remove(\'active\');\n      internsTab.classList.remove(\'active\');\n      scheduleTab.classList.remove(\'active\');\n      \n      infoTabContent.classList.remove(\'active\');\n      internsTabContent.classList.remove(\'active\');\n      scheduleTabContent.classList.remove(\'active\');\n      \n      // Adicionar classe ativa à aba clicada\n      if (tab === \'info\') {\n        infoTab.classList.add(\'active\');\n        infoTabContent.classList.add(\'active\');\n      } else if (tab === \'interns\') {\n        internsTab.classList.add(\'active\');\n        internsTabContent.classList.add(\'active\');\n      } else if (tab === \'schedule\') {\n        scheduleTab.classList.add(\'active\');\n        scheduleTabContent.classList.add(\'active\');\n      }\n    }\n    \n    // Manipular upload de imagem\n    function handleProfileImageUpload(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n      \n      // Tipos de arquivo permitidos\n      const allowedTypes = [\'image/jpeg\', \'image/png\', \'image/gif\'];\n      if (!allowedTypes.includes(file.type)) {\n        alert(\'Tipo de arquivo não suportado. Por favor, utilize JPG, PNG ou GIF.\');\n        return;\n      }\n      \n      // Tamanho máximo: 2MB\n      const maxSize = 2 * 1024 * 1024;\n      if (file.size > maxSize) {\n        alert(\'Arquivo muito grande. O tamanho máximo é 2MB.\');\n        return;\n      }\n      \n      const reader = new FileReader();\n      reader.onload = function(e) {\n        profileImageUpload.style.backgroundImage = `url("${e.target.result}")`;\n        profileImageUpload.classList.add(\'has-image\');\n        \n        // Aqui você poderia fazer upload para um serviço de armazenamento\n        // Por ora, vamos usar a URL de dados diretamente\n        profileImageUrlInput.value = e.target.result;\n      };\n      reader.readAsDataURL(file);\n    }\n    \n    // Salvar profissional\n    async function saveProfessional() {\n      try {\n        // Validação básica\n        const fullNameInput = document.getElementById(\'fullName\');\n        const usernameInput = document.getElementById(\'username\');\n        const emailInput = document.getElementById(\'email\');\n        const phoneInput = document.getElementById(\'phone\');\n        const roleInput = document.getElementById(\'role\');\n        const facilityIdInput = document.getElementById(\'facilityId\');\n        const professionalTypeInput = document.getElementById(\'professionalType\');\n        const passwordInput = document.getElementById(\'password\');\n        \n        if (!fullNameInput.value) {\n          alert(\'Por favor, insira o nome completo\');\n          fullNameInput.focus();\n          return;\n        }\n        \n        if (!usernameInput.value) {\n          alert(\'Por favor, insira o nome de usuário\');\n          usernameInput.focus();\n          return;\n        }\n        \n        if (!professionalIdInput.value && !passwordInput.value) {\n          alert(\'Por favor, insira uma senha\');\n          passwordInput.focus();\n          return;\n        }\n        \n        if (!emailInput.value) {\n          alert(\'Por favor, insira o e-mail\');\n          emailInput.focus();\n          return;\n        }\n        \n        if (!phoneInput.value) {\n          alert(\'Por favor, insira o telefone\');\n          phoneInput.focus();\n          return;\n        }\n        \n        if (!roleInput.value) {\n          alert(\'Por favor, selecione a função\');\n          roleInput.focus();\n          return;\n        }\n        \n        if (!facilityIdInput.value) {\n          alert(\'Por favor, selecione a unidade\');\n          facilityIdInput.focus();\n          return;\n        }\n        \n        if (!professionalTypeInput.value) {\n          alert(\'Por favor, selecione a especialidade\');\n          professionalTypeInput.focus();\n          return;\n        }\n        \n        // Preparar dados do profissional\n        const professionalData = {\n          username: usernameInput.value,\n          fullName: fullNameInput.value,\n          email: emailInput.value,\n          phone: phoneInput.value,\n          role: roleInput.value,\n          facilityId: parseInt(facilityIdInput.value),\n          profileImageUrl: profileImageUrlInput.value,\n          isActive: document.getElementById(\'isActive\').checked,\n          professionalType: professionalTypeInput.value,\n          licenseNumber: document.getElementById(\'licenseNumber\').value,\n          licenseType: document.getElementById(\'licenseType\').value,\n          specialization: document.getElementById(\'specialization\').value,\n          employmentType: document.getElementById(\'employmentType\').value,\n          hourlyRate: document.getElementById(\'hourlyRate\').value \n            ? parseFloat(document.getElementById(\'hourlyRate\').value) \n            : null,\n          supervisorId: document.getElementById(\'supervisorId\').value\n            ? parseInt(document.getElementById(\'supervisorId\').value)\n            : null,\n          bio: document.getElementById(\'bio\').value\n        };\n        \n        // Adicionar senha apenas para novos profissionais\n        if (!professionalIdInput.value) {\n          professionalData.password = passwordInput.value;\n        }\n        \n        let response;\n        \n        if (professionalIdInput.value) {\n          // Editar profissional existente\n          response = await fetch(`/api/professionals/${professionalIdInput.value}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(professionalData)\n          });\n        } else {\n          // Adicionar novo profissional\n          response = await fetch(\'/api/professionals\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(professionalData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(errorText || \'Erro ao salvar profissional\');\n        }\n        \n        // Fechar modal e recarregar profissionais\n        closeProfessionalModal();\n        await loadProfessionals();\n        \n        alert(professionalIdInput.value ? \'Profissional atualizado com sucesso!\' : \'Profissional adicionado com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar profissional:\', error);\n        alert(`Erro ao salvar profissional: ${error.message}`);\n      }\n    }\n    \n    // Visualizar profissional\n    async function viewProfessional(professionalId) {\n      try {\n        const response = await fetch(`/api/professionals/${professionalId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar detalhes do profissional\');\n        }\n        \n        currentProfessional = await response.json();\n        \n        // Encontrar unidade\n        const facility = facilities.find(f => f.id === currentProfessional.user.facilityId);\n        \n        // Encontrar supervisor\n        let supervisor = null;\n        if (currentProfessional.supervisorId) {\n          supervisor = professionals.find(p => p.id === currentProfessional.supervisorId);\n        }\n        \n        // Iniciais do profissional para o avatar\n        const initials = currentProfessional.user.fullName\n          .split(\' \')\n          .map(name => name.charAt(0))\n          .join(\'\')\n          .substring(0, 2)\n          .toUpperCase();\n        \n        // Avatar\n        if (currentProfessional.user.profileImageUrl) {\n          document.getElementById(\'viewProfessionalAvatar\').style.display = \'none\';\n          \n          // Criar elemento de imagem ou atualizar existente\n          let photoElement = document.querySelector(\'.professional-view-photo\');\n          if (!photoElement) {\n            photoElement = document.createElement(\'img\');\n            photoElement.className = \'professional-view-photo\';\n            photoElement.alt = currentProfessional.user.fullName;\n            document.querySelector(\'.professional-view-header\').insertBefore(\n              photoElement,\n              document.querySelector(\'.professional-view-info\')\n            );\n          }\n          \n          photoElement.src = currentProfessional.user.profileImageUrl;\n        } else {\n          // Remover foto se existir\n          const photoElement = document.querySelector(\'.professional-view-photo\');\n          if (photoElement) photoElement.remove();\n          \n          document.getElementById(\'viewProfessionalAvatar\').style.display = \'flex\';\n          document.getElementById(\'viewProfessionalAvatar\').textContent = initials;\n        }\n        \n        // Informações básicas\n        document.getElementById(\'viewProfessionalName\').textContent = currentProfessional.user.fullName;\n        document.getElementById(\'viewProfessionalType\').textContent = translateProfessionalType(currentProfessional.professionalType);\n        document.getElementById(\'viewProfessionalLicense\').textContent = currentProfessional.licenseNumber\n          ? `${currentProfessional.licenseType || \'\'} ${currentProfessional.licenseNumber}`\n          : \'\';\n        \n        // Informações de contato\n        document.getElementById(\'viewEmail\').textContent = currentProfessional.user.email;\n        document.getElementById(\'viewPhone\').textContent = currentProfessional.user.phone || \'Não informado\';\n        document.getElementById(\'viewFacility\').textContent = facility ? facility.name : \'Não definida\';\n        document.getElementById(\'viewStatus\').innerHTML = `\n          <span class="status ${currentProfessional.user.isActive ? \'status-active\' : \'status-inactive\'}">\n            ${currentProfessional.user.isActive ? \'Ativo\' : \'Inativo\'}\n          </span>\n        `;\n        \n        // Informações profissionais\n        document.getElementById(\'viewRole\').textContent = translateRole(currentProfessional.user.role);\n        document.getElementById(\'viewProfessionalTypeDetail\').textContent = translateProfessionalType(currentProfessional.professionalType);\n        document.getElementById(\'viewEmploymentType\').textContent = currentProfessional.employmentType\n          ? translateEmploymentType(currentProfessional.employmentType)\n          : \'Não informado\';\n        document.getElementById(\'viewHourlyRate\').textContent = currentProfessional.hourlyRate\n          ? `R$ ${parseFloat(currentProfessional.hourlyRate).toFixed(2)}`\n          : \'Não informado\';\n        document.getElementById(\'viewSpecialization\').textContent = currentProfessional.specialization || \'Não informado\';\n        document.getElementById(\'viewSupervisor\').textContent = supervisor\n          ? supervisor.user.fullName\n          : \'Não possui\';\n        \n        // Biografia\n        document.getElementById(\'viewBio\').textContent = currentProfessional.bio || \'Nenhuma biografia adicionada.\';\n        \n        // Estagiários\n        if (currentProfessional.interns && currentProfessional.interns.length > 0) {\n          document.getElementById(\'internsList\').innerHTML = \'\';\n          document.getElementById(\'noInternsMessage\').style.display = \'none\';\n          document.getElementById(\'internsSection\').style.display = \'block\';\n          \n          currentProfessional.interns.forEach(intern => {\n            const internInitials = intern.user.fullName\n              .split(\' \')\n              .map(name => name.charAt(0))\n              .join(\'\')\n              .substring(0, 2)\n              .toUpperCase();\n            \n            const internElement = document.createElement(\'div\');\n            internElement.className = \'intern-item\';\n            internElement.innerHTML = `\n              <div class="intern-avatar">${internInitials}</div>\n              <div class="intern-info">\n                <div class="intern-name">${intern.user.fullName}</div>\n                <div class="intern-email">${intern.user.email}</div>\n              </div>\n            `;\n            \n            document.getElementById(\'internsList\').appendChild(internElement);\n          });\n        } else {\n          document.getElementById(\'internsSection\').style.display = \'none\';\n          document.getElementById(\'noInternsMessage\').style.display = \'block\';\n        }\n        \n        // Estatísticas\n        loadProfessionalStats(currentProfessional.id);\n        \n        // Mostrar primeira aba\n        switchTab(\'info\');\n        \n        // Exibir modal\n        viewProfessionalModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar profissional:\', error);\n        alert(\'Erro ao carregar detalhes do profissional. Tente novamente.\');\n      }\n    }\n    \n    // Carregar estatísticas do profissional\n    async function loadProfessionalStats(professionalId) {\n      try {\n        // Obter estatísticas de agendamentos\n        const appointmentsResponse = await fetch(`/api/professionals/${professionalId}/stats`, {\n          credentials: \'include\'\n        });\n        \n        if (appointmentsResponse.ok) {\n          const stats = await appointmentsResponse.json();\n          \n          // Estatísticas por tipo (mês atual)\n          document.getElementById(\'viewAppointmentsCount\').textContent = stats.totalAppointments || 0;\n          document.getElementById(\'viewTotalHours\').textContent = stats.totalHours \n            ? `${stats.totalHours}h` \n            : \'0h\';\n          \n          // Total de pacientes atendidos\n          document.getElementById(\'viewPatientCount\').textContent = stats.patientCount || 0;\n          \n          // Evoluções\n          document.getElementById(\'viewEvolutionsCount\').textContent = stats.evolutionCount || 0;\n        }\n      } catch (error) {\n        console.error(\'Erro ao carregar estatísticas do profissional:\', error);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n   $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', async () => {\n      await checkAuth();\n      setupEventListeners();\n      await Promise.all([\n        loadFacilities(),\n        loadProfessionals()\n      ]);\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const professionalGrid = document.getElementById(\'professionalGrid\');\n    const professionalsTableBody = document.getElementById(\'professionalsTableBody\');\n    const searchProfessional = document.getElementById(\'searchProfessional\');\n    const addProfessionalCard = document.getElementById(\'addProfessionalCard\');\n    const paginationElement = document.getElementById(\'pagination\');\n    \n    // Modal Professional\n    const professionalModal = document.getElementById(\'professionalModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const professionalForm = document.getElementById(\'professionalForm\');\n    const professionalIdInput = document.getElementById(\'professionalId\');\n    const userIdInput = document.getElementById(\'userId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    const passwordGroup = document.getElementById(\'passwordGroup\');\n    \n    // Elementos para a imagem de perfil\n    const profileImageUpload = document.getElementById(\'profileImageUpload\');\n    const profileImageInput = document.getElementById(\'profileImage\');\n    const profileImageUrlInput = document.getElementById(\'profileImageUrl\');\n    \n    // Modal View Professional\n    const viewProfessionalModal = document.getElementById(\'viewProfessionalModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const closeDetailButton = document.getElementById(\'closeDetailButton\');\n    const editProfessionalButton = document.getElementById(\'editProfessionalButton\');\n    \n    // Tabs\n    const infoTab = document.getElementById(\'infoTab\');\n    const internsTab = document.getElementById(\'internsTab\');\n    const scheduleTab = document.getElementById(\'scheduleTab\');\n    const infoTabContent = document.getElementById(\'infoTabContent\');\n    const internsTabContent = document.getElementById(\'internsTabContent\');\n    const scheduleTabContent = document.getElementById(\'scheduleTabContent\');\n    \n    // Filtros\n    const typeFilter = document.getElementById(\'typeFilter\');\n    const facilityFilter = document.getElementById(\'facilityFilter\');\n    const roleFilter = document.getElementById(\'roleFilter\');\n    const statusFilter = document.getElementById(\'statusFilter\');\n    const filterButton = document.getElementById(\'filterButton\');\n    \n    // Variáveis globais\n    let currentUser = null;\n    let professionals = [];\n    let facilities = [];\n    let currentProfessional = null;\n    let currentPage = 1;\n    const itemsPerPage = 10;\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        currentUser = await response.json();\n        displayUserData(currentUser);\n        \n        // Configurar permissões baseadas no papel do usuário\n        if (![\'admin\', \'coordinator\'].includes(currentUser.role)) {\n          addProfessionalCard.style.display = \'none\';\n        }\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir tipo de profissional\n    function translateProfessionalType(type) {\n      const translations = {\n        \'psychologist\': \'Psicologia\',\n        \'physiotherapist\': \'Fisioterapia\',\n        \'speech_therapist\': \'Fonoaudiologia\',\n        \'occupational_therapist\': \'Terapia Ocupacional\',\n        \'other\': \'Outro\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Traduzir tipo de contratação\n    function translateEmploymentType(type) {\n      const translations = {\n        \'employee\': \'CLT\',\n        \'contractor\': \'Terceirizado/PJ\',\n        \'freelancer\': \'Autônomo\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Pesquisar\n      searchProfessional.addEventListener(\'input\', filterProfessionals);\n      \n      // Adicionar profissional\n      addProfessionalCard.addEventListener(\'click\', openAddProfessionalModal);\n      \n      // Formulário de profissional\n      closeModal.addEventListener(\'click\', closeProfessionalModal);\n      cancelButton.addEventListener(\'click\', closeProfessionalModal);\n      saveButton.addEventListener(\'click\', saveProfessional);\n      \n      // Upload de imagem\n      profileImageUpload.addEventListener(\'click\', () => profileImageInput.click());\n      profileImageInput.addEventListener(\'change\', handleProfileImageUpload);\n      \n      // Modal de visualização\n      closeViewModal.addEventListener(\'click\', closeViewProfessionalModal);\n      closeDetailButton.addEventListener(\'click\', closeViewProfessionalModal);\n      editProfessionalButton.addEventListener(\'click\', editProfessionalFromView);\n      \n      // Tabs\n      infoTab.addEventListener(\'click\', () => switchTab(\'info\'));\n      internsTab.addEventListener(\'click\', () => switchTab(\'interns\'));\n      scheduleTab.addEventListener(\'click\', () => switchTab(\'schedule\'));\n      \n      // Filtros\n      filterButton.addEventListener(\'click\', applyFilters);\n      \n      // Fechar modais ao clicar fora\n      professionalModal.addEventListener(\'click\', e => {\n        if (e.target === professionalModal) closeProfessionalModal();\n      });\n      \n      viewProfessionalModal.addEventListener(\'click\', e => {\n        if (e.target === viewProfessionalModal) closeViewProfessionalModal();\n      });\n    }\n    \n    // Carregar unidades para filtros e formulário\n    async function loadFacilities() {\n      try {\n        const response = await fetch(\'/api/facilities\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar unidades\');\n        }\n        \n        facilities = await response.json();\n        \n        // Preencher select de unidade no formulário\n        const facilityIdSelect = document.getElementById(\'facilityId\');\n        facilityIdSelect.innerHTML = \'<option value="">Selecione</option>\';\n        \n        facilities.forEach(facility => {\n          const option = document.createElement(\'option\');\n          option.value = facility.id;\n          option.textContent = facility.name;\n          facilityIdSelect.appendChild(option);\n        });\n        \n        // Preencher select de unidade no filtro\n        facilityFilter.innerHTML = \'<option value="">Todas as unidades</option>\';\n        \n        facilities.forEach(facility => {\n          const option = document.createElement(\'option\');\n          option.value = facility.id;\n          option.textContent = facility.name;\n          facilityFilter.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar unidades:\', error);\n      }\n    }\n    \n    // Carregar profissionais\n    async function loadProfessionals() {\n      try {\n        const response = await fetch(\'/api/professionals\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar profissionais\');\n        }\n        \n        professionals = await response.json();\n        renderProfessionalsGrid();\n        renderProfessionalsTable();\n        \n        // Preencher supervisores no formulário\n        const supervisorIdSelect = document.getElementById(\'supervisorId\');\n        supervisorIdSelect.innerHTML = \'<option value="">Selecione (se aplicável)</option>\';\n        \n        professionals\n          .filter(p => [\'admin\', \'coordinator\', \'professional\'].includes(p.user.role))\n          .forEach(professional => {\n            const option = document.createElement(\'option\');\n            option.value = professional.id;\n            option.textContent = professional.user.fullName;\n            supervisorIdSelect.appendChild(option);\n          });\n      } catch (error) {\n        console.error(\'Erro ao carregar profissionais:\', error);\n        professionalsTableBody.innerHTML = `\n          <tr>\n            <td colspan="7">Erro ao carregar profissionais. Tente novamente mais tarde.</td>\n          </tr>\n        `;\n      }\n    }\n    \n    // Renderizar grid de profissionais\n    function renderProfessionalsGrid() {\n      // Limpar grid, mantendo o card de adicionar\n      const addCard = document.getElementById(\'addProfessionalCard\');\n      professionalGrid.innerHTML = \'\';\n      professionalGrid.appendChild(addCard);\n      \n      // Se não há profissionais\n      if (professionals.length === 0) {\n        const emptyCard = document.createElement(\'div\');\n        emptyCard.className = \'empty-state\';\n        emptyCard.innerHTML = `\n          <div class="empty-icon">👨\u200d⚕️</div>\n          <div class="empty-text">Nenhum profissional encontrado</div>\n        `;\n        professionalGrid.insertBefore(emptyCard, addCard);\n        return;\n      }\n      \n      // Mostrar no máximo 4 profissionais no grid\n      const displayProfessionals = professionals.slice(0, 4);\n      \n      // Adicionar cards de profissionais\n      displayProfessionals.forEach(professional => {\n        const card = document.createElement(\'div\');\n        card.className = \'professional-card\';\n        \n        const initials = professional.user.fullName\n          .split(\' \')\n          .map(name => name.charAt(0))\n          .join(\'\')\n          .substring(0, 2)\n          .toUpperCase();\n        \n        card.innerHTML = `\n          <div class="professional-header">\n            ${professional.user.profileImageUrl\n              ? `<img src="${professional.user.profileImageUrl}" alt="${professional.user.fullName}" class="professional-photo">`\n              : `<div class="professional-avatar">${initials}</div>`\n            }\n            <div class="professional-info">\n              <h3 class="professional-name">${professional.user.fullName}</h3>\n              <div class="professional-type">${translateProfessionalType(professional.professionalType)}</div>\n              <div class="professional-license">${professional.licenseNumber ? `${professional.licenseType || \'\'} ${professional.licenseNumber}` : \'\'}</div>\n            </div>\n          </div>\n          \n          <div class="professional-contact">\n            <span class="professional-icon">📧</span> ${professional.user.email}\n          </div>\n          \n          <div class="professional-contact">\n            <span class="professional-icon">📞</span> ${professional.user.phone || \'Não informado\'}\n          </div>\n          \n          <div class="professional-specialization">\n            <div class="specialization-title">Especialização</div>\n            <div class="specialization-text">${professional.specialization || \'Não informado\'}</div>\n          </div>\n          \n          <div class="professional-footer">\n            <div>\n              <span class="status ${professional.user.isActive ? \'status-active\' : \'status-inactive\'}">\n                ${professional.user.isActive ? \'Ativo\' : \'Inativo\'}\n              </span>\n            </div>\n            \n            <div class="professional-actions">\n              <button class="button button-outline view-professional" data-id="${professional.id}">Ver detalhes</button>\n            </div>\n          </div>\n        `;\n        \n        professionalGrid.insertBefore(card, addCard);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-professional\').forEach(button => {\n        button.addEventListener(\'click\', () => viewProfessional(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Renderizar tabela de profissionais\n    function renderProfessionalsTable() {\n      // Se não há profissionais\n      if (professionals.length === 0) {\n        professionalsTableBody.innerHTML = `\n          <tr>\n            <td colspan="7" class="text-center">Nenhum profissional encontrado</td>\n          </tr>\n        `;\n        paginationElement.innerHTML = \'\';\n        return;\n      }\n      \n      // Calcular paginação\n      const totalPages = Math.ceil(professionals.length / itemsPerPage);\n      const start = (currentPage - 1) * itemsPerPage;\n      const end = Math.min(start + itemsPerPage, professionals.length);\n      const paginatedProfessionals = professionals.slice(start, end);\n      \n      // Limpar tabela\n      professionalsTableBody.innerHTML = \'\';\n      \n      // Adicionar linhas\n      paginatedProfessionals.forEach(professional => {\n        const row = document.createElement(\'tr\');\n        \n        // Encontrar unidade\n        const facility = facilities.find(f => f.id === professional.user.facilityId);\n        \n        row.innerHTML = `\n          <td>${professional.user.fullName}</td>\n          <td>${translateProfessionalType(professional.professionalType)}</td>\n          <td>${professional.licenseNumber ? `${professional.licenseType || \'\'} ${professional.licenseNumber}` : \'-\'}</td>\n          <td>${professional.user.email}<br>${professional.user.phone || \'\'}</td>\n          <td>${facility ? facility.name : \'-\'}</td>\n          <td><span class="status ${professional.user.isActive ? \'status-active\' : \'status-inactive\'}">${professional.user.isActive ? \'Ativo\' : \'Inativo\'}</span></td>\n          <td>\n            <button class="action-button view-professional" data-id="${professional.id}">Visualizar</button>\n            <button class="action-button edit-professional" data-id="${professional.id}">Editar</button>\n          </td>\n        `;\n        \n        professionalsTableBody.appendChild(row);\n      });\n      \n      // Adicionar paginação\n      renderPagination(totalPages);\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-professional\').forEach(button => {\n        button.addEventListener(\'click\', () => viewProfessional(parseInt(button.dataset.id)));\n      });\n      \n      document.querySelectorAll(\'.edit-professional\').forEach(button => {\n        button.addEventListener(\'click\', () => editProfessional(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Renderizar paginação\n    function renderPagination(totalPages) {\n      if (totalPages <= 1) {\n        paginationElement.innerHTML = \'\';\n        return;\n      }\n      \n      let paginationHTML = \'\';\n      \n      // Botão anterior\n      paginationHTML += `\n        <li class="pagination-item">\n          <a href="#" class="pagination-link ${currentPage === 1 ? \'disabled\' : \'\'}" data-page="${currentPage - 1}">\n            &laquo;\n          </a>\n        </li>\n      `;\n      \n      // Páginas\n      for (let i = 1; i <= totalPages; i++) {\n        paginationHTML += `\n          <li class="pagination-item">\n            <a href="#" class="pagination-link ${i === currentPage ? \'active\' : \'\'}" data-page="${i}">\n              ${i}\n            </a>\n          </li>\n        `;\n      }\n      \n      // Botão próximo\n      paginationHTML += `\n        <li class="pagination-item">\n          <a href="#" class="pagination-link ${currentPage === totalPages ? \'disabled\' : \'\'}" data-page="${currentPage + 1}">\n            &raquo;\n          </a>\n        </li>\n      `;\n      \n      paginationElement.innerHTML = paginationHTML;\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.pagination-link:not(.disabled)\').forEach(link => {\n        link.addEventListener(\'click\', (e) => {\n          e.preventDefault();\n          currentPage = parseInt(link.dataset.page);\n          renderProfessionalsTable();\n        });\n      });\n    }\n    \n    // Filtrar profissionais\n    function filterProfessionals() {\n      const searchTerm = searchProfessional.value.toLowerCase();\n      \n      if (!searchTerm) {\n        renderProfessionalsTable();\n        return;\n      }\n      \n      const filteredProfessionals = professionals.filter(professional =>\n        professional.user.fullName.toLowerCase().includes(searchTerm) ||\n        professional.user.email.toLowerCase().includes(searchTerm) ||\n        (professional.licenseNumber && professional.licenseNumber.toLowerCase().includes(searchTerm))\n      );\n      \n      // Atualizar temporariamente a lista\n      const originalProfessionals = professionals;\n      professionals = filteredProfessionals;\n      currentPage = 1;\n      \n      renderProfessionalsTable();\n      \n      // Restaurar a lista original\n      professionals = originalProfessionals;\n    }\n    \n    // Aplicar filtros\n    function applyFilters() {\n      const professionalType = typeFilter.value;\n      const facilityId = facilityFilter.value;\n      const role = roleFilter.value;\n      const isActive = statusFilter.value;\n      \n      // Fazer uma nova requisição com os filtros\n      let url = \'/api/professionals?\';\n      const params = [];\n      \n      if (professionalType) params.push(`professionalType=${professionalType}`);\n      if (facilityId) params.push(`facilityId=${facilityId}`);\n      if (role) params.push(`role=${role}`);\n      if (isActive === \'active\') params.push(\'isActive=true\');\n      if (isActive === \'inactive\') params.push(\'isActive=false\');\n      \n      url += params.join(\'&\');\n      \n      fetch(url, { credentials: \'include\' })\n        .then(response => {\n          if (!response.ok) throw new Error(\'Erro ao filtrar profissionais\');\n          return response.json();\n        })\n        .then(data => {\n          professionals = data;\n          currentPage = 1;\n          renderProfessionalsGrid();\n          renderProfessionalsTable();\n        })\n        .catch(error => {\n          console.error(\'Erro ao aplicar filtros:\', error);\n          alert(\'Erro ao aplicar filtros. Tente novamente.\');\n        });\n    }\n    \n    // Abrir modal para adicionar profissional\n    function openAddProfessionalModal() {\n      modalTitle.textContent = \'Adicionar Profissional\';\n      professionalForm.reset();\n      professionalIdInput.value = \'\';\n      userIdInput.value = \'\';\n      passwordGroup.style.display = \'block\';\n      \n      // Resetar imagem de perfil\n      profileImageUpload.style.backgroundImage = \'\';\n      profileImageUpload.classList.remove(\'has-image\');\n      profileImageUrlInput.value = \'\';\n      \n      document.getElementById(\'isActive\').checked = true;\n      \n      professionalModal.classList.add(\'active\');\n    }\n    \n    // Abrir modal para editar profissional\n    async function editProfessional(professionalId) {\n      try {\n        const response = await fetch(`/api/professionals/${professionalId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar detalhes do profissional\');\n        }\n        \n        const professional = await response.json();\n        \n        modalTitle.textContent = \'Editar Profissional\';\n        \n        // Ocultar campo de senha para edição\n        passwordGroup.style.display = \'none\';\n        \n        // Preencher formulário\n        professionalIdInput.value = professional.id;\n        userIdInput.value = professional.user.id;\n        document.getElementById(\'fullName\').value = professional.user.fullName;\n        document.getElementById(\'username\').value = professional.user.username;\n        document.getElementById(\'email\').value = professional.user.email;\n        document.getElementById(\'phone\').value = professional.user.phone || \'\';\n        document.getElementById(\'role\').value = professional.user.role;\n        document.getElementById(\'facilityId\').value = professional.user.facilityId;\n        document.getElementById(\'professionalType\').value = professional.professionalType;\n        document.getElementById(\'licenseNumber\').value = professional.licenseNumber || \'\';\n        document.getElementById(\'licenseType\').value = professional.licenseType || \'\';\n        document.getElementById(\'specialization\').value = professional.specialization || \'\';\n        document.getElementById(\'employmentType\').value = professional.employmentType || \'\';\n        document.getElementById(\'hourlyRate\').value = professional.hourlyRate || \'\';\n        document.getElementById(\'supervisorId\').value = professional.supervisorId || \'\';\n        document.getElementById(\'bio\').value = professional.bio || \'\';\n        document.getElementById(\'isActive\').checked = professional.user.isActive;\n        \n        // Definir imagem de perfil\n        if (professional.user.profileImageUrl) {\n          profileImageUpload.style.backgroundImage = `url("${professional.user.profileImageUrl}")`;\n          profileImageUpload.classList.add(\'has-image\');\n          profileImageUrlInput.value = professional.user.profileImageUrl;\n        } else {\n          profileImageUpload.style.backgroundImage = \'\';\n          profileImageUpload.classList.remove(\'has-image\');\n          profileImageUrlInput.value = \'\';\n        }\n        \n        professionalModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar profissional:\', error);\n        alert(\'Erro ao carregar detalhes do profissional. Tente novamente.\');\n      }\n    }\n    \n    // Editar a partir da visualização\n    function editProfessionalFromView() {\n      closeViewProfessionalModal();\n      if (currentProfessional) {\n        editProfessional(currentProfessional.id);\n      }\n    }\n    \n    // Fechar modal de profissional\n    function closeProfessionalModal() {\n      professionalModal.classList.remove(\'active\');\n    }\n    \n    // Fechar modal de visualização\n    function closeViewProfessionalModal() {\n      viewProfessionalModal.classList.remove(\'active\');\n    }\n    \n    // Alternar entre as abas\n    function switchTab(tab) {\n      // Remover classe ativa de todas as abas\n      infoTab.classList.remove(\'active\');\n      internsTab.classList.remove(\'active\');\n      scheduleTab.classList.remove(\'active\');\n      \n      infoTabContent.classList.remove(\'active\');\n      internsTabContent.classList.remove(\'active\');\n      scheduleTabContent.classList.remove(\'active\');\n      \n      // Adicionar classe ativa à aba clicada\n      if (tab === \'info\') {\n        infoTab.classList.add(\'active\');\n        infoTabContent.classList.add(\'active\');\n      } else if (tab === \'interns\') {\n        internsTab.classList.add(\'active\');\n        internsTabContent.classList.add(\'active\');\n      } else if (tab === \'schedule\') {\n        scheduleTab.classList.add(\'active\');\n        scheduleTabContent.classList.add(\'active\');\n      }\n    }\n    \n    // Manipular upload de imagem\n    function handleProfileImageUpload(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n      \n      // Tipos de arquivo permitidos\n      const allowedTypes = [\'image/jpeg\', \'image/png\', \'image/gif\'];\n      if (!allowedTypes.includes(file.type)) {\n        alert(\'Tipo de arquivo não suportado. Por favor, utilize JPG, PNG ou GIF.\');\n        return;\n      }\n      \n      // Tamanho máximo: 2MB\n      const maxSize = 2 * 1024 * 1024;\n      if (file.size > maxSize) {\n        alert(\'Arquivo muito grande. O tamanho máximo é 2MB.\');\n        return;\n      }\n      \n      const reader = new FileReader();\n      reader.onload = function(e) {\n        profileImageUpload.style.backgroundImage = `url("${e.target.result}")`;\n        profileImageUpload.classList.add(\'has-image\');\n        \n        // Aqui você poderia fazer upload para um serviço de armazenamento\n        // Por ora, vamos usar a URL de dados diretamente\n        profileImageUrlInput.value = e.target.result;\n      };\n      reader.readAsDataURL(file);\n    }\n    \n    // Salvar profissional\n    async function saveProfessional() {\n      try {\n        // Validação básica\n        const fullNameInput = document.getElementById(\'fullName\');\n        const usernameInput = document.getElementById(\'username\');\n        const emailInput = document.getElementById(\'email\');\n        const phoneInput = document.getElementById(\'phone\');\n        const roleInput = document.getElementById(\'role\');\n        const facilityIdInput = document.getElementById(\'facilityId\');\n        const professionalTypeInput = document.getElementById(\'professionalType\');\n        const passwordInput = document.getElementById(\'password\');\n        \n        if (!fullNameInput.value) {\n          alert(\'Por favor, insira o nome completo\');\n          fullNameInput.focus();\n          return;\n        }\n        \n        if (!usernameInput.value) {\n          alert(\'Por favor, insira o nome de usuário\');\n          usernameInput.focus();\n          return;\n        }\n        \n        if (!professionalIdInput.value && !passwordInput.value) {\n          alert(\'Por favor, insira uma senha\');\n          passwordInput.focus();\n          return;\n        }\n        \n        if (!emailInput.value) {\n          alert(\'Por favor, insira o e-mail\');\n          emailInput.focus();\n          return;\n        }\n        \n        if (!phoneInput.value) {\n          alert(\'Por favor, insira o telefone\');\n          phoneInput.focus();\n          return;\n        }\n        \n        if (!roleInput.value) {\n          alert(\'Por favor, selecione a função\');\n          roleInput.focus();\n          return;\n        }\n        \n        if (!facilityIdInput.value) {\n          alert(\'Por favor, selecione a unidade\');\n          facilityIdInput.focus();\n          return;\n        }\n        \n        if (!professionalTypeInput.value) {\n          alert(\'Por favor, selecione a especialidade\');\n          professionalTypeInput.focus();\n          return;\n        }\n        \n        // Preparar dados do profissional\n        const professionalData = {\n          username: usernameInput.value,\n          fullName: fullNameInput.value,\n          email: emailInput.value,\n          phone: phoneInput.value,\n          role: roleInput.value,\n          facilityId: parseInt(facilityIdInput.value),\n          profileImageUrl: profileImageUrlInput.value,\n          isActive: document.getElementById(\'isActive\').checked,\n          professionalType: professionalTypeInput.value,\n          licenseNumber: document.getElementById(\'licenseNumber\').value,\n          licenseType: document.getElementById(\'licenseType\').value,\n          specialization: document.getElementById(\'specialization\').value,\n          employmentType: document.getElementById(\'employmentType\').value,\n          hourlyRate: document.getElementById(\'hourlyRate\').value \n            ? parseFloat(document.getElementById(\'hourlyRate\').value) \n            : null,\n          supervisorId: document.getElementById(\'supervisorId\').value\n            ? parseInt(document.getElementById(\'supervisorId\').value)\n            : null,\n          bio: document.getElementById(\'bio\').value\n        };\n        \n        // Adicionar senha apenas para novos profissionais\n        if (!professionalIdInput.value) {\n          professionalData.password = passwordInput.value;\n        }\n        \n        let response;\n        \n        if (professionalIdInput.value) {\n          // Editar profissional existente\n          response = await fetch(`/api/professionals/${professionalIdInput.value}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(professionalData)\n          });\n        } else {\n          // Adicionar novo profissional\n          response = await fetch(\'/api/professionals\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(professionalData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(errorText || \'Erro ao salvar profissional\');\n        }\n        \n        // Fechar modal e recarregar profissionais\n        closeProfessionalModal();\n        await loadProfessionals();\n        \n        alert(professionalIdInput.value ? \'Profissional atualizado com sucesso!\' : \'Profissional adicionado com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar profissional:\', error);\n        alert(`Erro ao salvar profissional: ${error.message}`);\n      }\n    }\n    \n    // Visualizar profissional\n    async function viewProfessional(professionalId) {\n      try {\n        const response = await fetch(`/api/professionals/${professionalId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar detalhes do profissional\');\n        }\n        \n        currentProfessional = await response.json();\n        \n        // Encontrar unidade\n        const facility = facilities.find(f => f.id === currentProfessional.user.facilityId);\n        \n        // Encontrar supervisor\n        let supervisor = null;\n        if (currentProfessional.supervisorId) {\n          supervisor = professionals.find(p => p.id === currentProfessional.supervisorId);\n        }\n        \n        // Iniciais do profissional para o avatar\n        const initials = currentProfessional.user.fullName\n          .split(\' \')\n          .map(name => name.charAt(0))\n          .join(\'\')\n          .substring(0, 2)\n          .toUpperCase();\n        \n        // Avatar\n        if (currentProfessional.user.profileImageUrl) {\n          document.getElementById(\'viewProfessionalAvatar\').style.display = \'none\';\n          \n          // Criar elemento de imagem ou atualizar existente\n          let photoElement = document.querySelector(\'.professional-view-photo\');\n          if (!photoElement) {\n            photoElement = document.createElement(\'img\');\n            photoElement.className = \'professional-view-photo\';\n            photoElement.alt = currentProfessional.user.fullName;\n            document.querySelector(\'.professional-view-header\').insertBefore(\n              photoElement,\n              document.querySelector(\'.professional-view-info\')\n            );\n          }\n          \n          photoElement.src = currentProfessional.user.profileImageUrl;\n        } else {\n          // Remover foto se existir\n          const photoElement = document.querySelector(\'.professional-view-photo\');\n          if (photoElement) photoElement.remove();\n          \n          document.getElementById(\'viewProfessionalAvatar\').style.display = \'flex\';\n          document.getElementById(\'viewProfessionalAvatar\').textContent = initials;\n        }\n        \n        // Informações básicas\n        document.getElementById(\'viewProfessionalName\').textContent = currentProfessional.user.fullName;\n        document.getElementById(\'viewProfessionalType\').textContent = translateProfessionalType(currentProfessional.professionalType);\n        document.getElementById(\'viewProfessionalLicense\').textContent = currentProfessional.licenseNumber\n          ? `${currentProfessional.licenseType || \'\'} ${currentProfessional.licenseNumber}`\n          : \'\';\n        \n        // Informações de contato\n        document.getElementById(\'viewEmail\').textContent = currentProfessional.user.email;\n        document.getElementById(\'viewPhone\').textContent = currentProfessional.user.phone || \'Não informado\';\n        document.getElementById(\'viewFacility\').textContent = facility ? facility.name : \'Não definida\';\n        document.getElementById(\'viewStatus\').innerHTML = `\n          <span class="status ${currentProfessional.user.isActive ? \'status-active\' : \'status-inactive\'}">\n            ${currentProfessional.user.isActive ? \'Ativo\' : \'Inativo\'}\n          </span>\n        `;\n        \n        // Informações profissionais\n        document.getElementById(\'viewRole\').textContent = translateRole(currentProfessional.user.role);\n        document.getElementById(\'viewProfessionalTypeDetail\').textContent = translateProfessionalType(currentProfessional.professionalType);\n        document.getElementById(\'viewEmploymentType\').textContent = currentProfessional.employmentType\n          ? translateEmploymentType(currentProfessional.employmentType)\n          : \'Não informado\';\n        document.getElementById(\'viewHourlyRate\').textContent = currentProfessional.hourlyRate\n          ? `R$ ${parseFloat(currentProfessional.hourlyRate).toFixed(2)}`\n          : \'Não informado\';\n        document.getElementById(\'viewSpecialization\').textContent = currentProfessional.specialization || \'Não informado\';\n        document.getElementById(\'viewSupervisor\').textContent = supervisor\n          ? supervisor.user.fullName\n          : \'Não possui\';\n        \n        // Biografia\n        document.getElementById(\'viewBio\').textContent = currentProfessional.bio || \'Nenhuma biografia adicionada.\';\n        \n        // Estagiários\n        if (currentProfessional.interns && currentProfessional.interns.length > 0) {\n          document.getElementById(\'internsList\').innerHTML = \'\';\n          document.getElementById(\'noInternsMessage\').style.display = \'none\';\n          document.getElementById(\'internsSection\').style.display = \'block\';\n          \n          currentProfessional.interns.forEach(intern => {\n            const internInitials = intern.user.fullName\n              .split(\' \')\n              .map(name => name.charAt(0))\n              .join(\'\')\n              .substring(0, 2)\n              .toUpperCase();\n            \n            const internElement = document.createElement(\'div\');\n            internElement.className = \'intern-item\';\n            internElement.innerHTML = `\n              <div class="intern-avatar">${internInitials}</div>\n              <div class="intern-info">\n                <div class="intern-name">${intern.user.fullName}</div>\n                <div class="intern-email">${intern.user.email}</div>\n              </div>\n            `;\n            \n            document.getElementById(\'internsList\').appendChild(internElement);\n          });\n        } else {\n          document.getElementById(\'internsSection\').style.display = \'none\';\n          document.getElementById(\'noInternsMessage\').style.display = \'block\';\n        }\n        \n        // Estatísticas\n        loadProfessionalStats(currentProfessional.id);\n        \n        // Mostrar primeira aba\n        switchTab(\'info\');\n        \n        // Exibir modal\n        viewProfessionalModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar profissional:\', error);\n        alert(\'Erro ao carregar detalhes do profissional. Tente novamente.\');\n      }\n    }\n    \n    // Carregar estatísticas do profissional\n    async function loadProfessionalStats(professionalId) {\n      try {\n        // Obter estatísticas de agendamentos\n        const appointmentsResponse = await fetch(`/api/professionals/${professionalId}/stats`, {\n          credentials: \'include\'\n        });\n        \n        if (appointmentsResponse.ok) {\n          const stats = await appointmentsResponse.json();\n          \n          // Estatísticas por tipo (mês atual)\n          document.getElementById(\'viewAppointmentsCount\').textContent = stats.totalAppointments || 0;\n          document.getElementById(\'viewTotalHours\').textContent = stats.totalHours \n            ? `${stats.totalHours}h` \n            : \'0h\';\n          \n          // Total de pacientes atendidos\n          document.getElementById(\'viewPatientCount\').textContent = stats.patientCount || 0;\n          \n          // Evoluções\n          document.getElementById(\'viewEvolutionsCount\').textContent = stats.evolutionCount || 0;\n        }\n      } catch (error) {\n        console.error(\'Erro ao carregar estatísticas do profissional:\', error);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n  </script>\n', PosixPath('client/public/professionals.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = df2f299420e3a6ebe470c7adf4e3e522fbdc70e98dc4f4ed0a0954fe0afa186c8f02aacfe54a005aa0e0564f045b3445892d412b78f038a68b72d216917dc3e5_0
2025-05-07 18:31:35,277 - semgrep.rule_match - DEBUG - match_key = ('\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', async () => {\n      await checkAuth();\n      setupEventListeners();\n      await Promise.all([\n        loadFacilities(),\n        loadProfessionals()\n      ]);\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const professionalGrid = document.getElementById(\'professionalGrid\');\n    const professionalsTableBody = document.getElementById(\'professionalsTableBody\');\n    const searchProfessional = document.getElementById(\'searchProfessional\');\n    const addProfessionalCard = document.getElementById(\'addProfessionalCard\');\n    const paginationElement = document.getElementById(\'pagination\');\n    \n    // Modal Professional\n    const professionalModal = document.getElementById(\'professionalModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const professionalForm = document.getElementById(\'professionalForm\');\n    const professionalIdInput = document.getElementById(\'professionalId\');\n    const userIdInput = document.getElementById(\'userId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    const passwordGroup = document.getElementById(\'passwordGroup\');\n    \n    // Elementos para a imagem de perfil\n    const profileImageUpload = document.getElementById(\'profileImageUpload\');\n    const profileImageInput = document.getElementById(\'profileImage\');\n    const profileImageUrlInput = document.getElementById(\'profileImageUrl\');\n    \n    // Modal View Professional\n    const viewProfessionalModal = document.getElementById(\'viewProfessionalModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const closeDetailButton = document.getElementById(\'closeDetailButton\');\n    const editProfessionalButton = document.getElementById(\'editProfessionalButton\');\n    \n    // Tabs\n    const infoTab = document.getElementById(\'infoTab\');\n    const internsTab = document.getElementById(\'internsTab\');\n    const scheduleTab = document.getElementById(\'scheduleTab\');\n    const infoTabContent = document.getElementById(\'infoTabContent\');\n    const internsTabContent = document.getElementById(\'internsTabContent\');\n    const scheduleTabContent = document.getElementById(\'scheduleTabContent\');\n    \n    // Filtros\n    const typeFilter = document.getElementById(\'typeFilter\');\n    const facilityFilter = document.getElementById(\'facilityFilter\');\n    const roleFilter = document.getElementById(\'roleFilter\');\n    const statusFilter = document.getElementById(\'statusFilter\');\n    const filterButton = document.getElementById(\'filterButton\');\n    \n    // Variáveis globais\n    let currentUser = null;\n    let professionals = [];\n    let facilities = [];\n    let currentProfessional = null;\n    let currentPage = 1;\n    const itemsPerPage = 10;\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        currentUser = await response.json();\n        displayUserData(currentUser);\n        \n        // Configurar permissões baseadas no papel do usuário\n        if (![\'admin\', \'coordinator\'].includes(currentUser.role)) {\n          addProfessionalCard.style.display = \'none\';\n        }\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir tipo de profissional\n    function translateProfessionalType(type) {\n      const translations = {\n        \'psychologist\': \'Psicologia\',\n        \'physiotherapist\': \'Fisioterapia\',\n        \'speech_therapist\': \'Fonoaudiologia\',\n        \'occupational_therapist\': \'Terapia Ocupacional\',\n        \'other\': \'Outro\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Traduzir tipo de contratação\n    function translateEmploymentType(type) {\n      const translations = {\n        \'employee\': \'CLT\',\n        \'contractor\': \'Terceirizado/PJ\',\n        \'freelancer\': \'Autônomo\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Pesquisar\n      searchProfessional.addEventListener(\'input\', filterProfessionals);\n      \n      // Adicionar profissional\n      addProfessionalCard.addEventListener(\'click\', openAddProfessionalModal);\n      \n      // Formulário de profissional\n      closeModal.addEventListener(\'click\', closeProfessionalModal);\n      cancelButton.addEventListener(\'click\', closeProfessionalModal);\n      saveButton.addEventListener(\'click\', saveProfessional);\n      \n      // Upload de imagem\n      profileImageUpload.addEventListener(\'click\', () => profileImageInput.click());\n      profileImageInput.addEventListener(\'change\', handleProfileImageUpload);\n      \n      // Modal de visualização\n      closeViewModal.addEventListener(\'click\', closeViewProfessionalModal);\n      closeDetailButton.addEventListener(\'click\', closeViewProfessionalModal);\n      editProfessionalButton.addEventListener(\'click\', editProfessionalFromView);\n      \n      // Tabs\n      infoTab.addEventListener(\'click\', () => switchTab(\'info\'));\n      internsTab.addEventListener(\'click\', () => switchTab(\'interns\'));\n      scheduleTab.addEventListener(\'click\', () => switchTab(\'schedule\'));\n      \n      // Filtros\n      filterButton.addEventListener(\'click\', applyFilters);\n      \n      // Fechar modais ao clicar fora\n      professionalModal.addEventListener(\'click\', e => {\n        if (e.target === professionalModal) closeProfessionalModal();\n      });\n      \n      viewProfessionalModal.addEventListener(\'click\', e => {\n        if (e.target === viewProfessionalModal) closeViewProfessionalModal();\n      });\n    }\n    \n    // Carregar unidades para filtros e formulário\n    async function loadFacilities() {\n      try {\n        const response = await fetch(\'/api/facilities\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar unidades\');\n        }\n        \n        facilities = await response.json();\n        \n        // Preencher select de unidade no formulário\n        const facilityIdSelect = document.getElementById(\'facilityId\');\n        facilityIdSelect.innerHTML = \'<option value="">Selecione</option>\';\n        \n        facilities.forEach(facility => {\n          const option = document.createElement(\'option\');\n          option.value = facility.id;\n          option.textContent = facility.name;\n          facilityIdSelect.appendChild(option);\n        });\n        \n        // Preencher select de unidade no filtro\n        facilityFilter.innerHTML = \'<option value="">Todas as unidades</option>\';\n        \n        facilities.forEach(facility => {\n          const option = document.createElement(\'option\');\n          option.value = facility.id;\n          option.textContent = facility.name;\n          facilityFilter.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar unidades:\', error);\n      }\n    }\n    \n    // Carregar profissionais\n    async function loadProfessionals() {\n      try {\n        const response = await fetch(\'/api/professionals\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar profissionais\');\n        }\n        \n        professionals = await response.json();\n        renderProfessionalsGrid();\n        renderProfessionalsTable();\n        \n        // Preencher supervisores no formulário\n        const supervisorIdSelect = document.getElementById(\'supervisorId\');\n        supervisorIdSelect.innerHTML = \'<option value="">Selecione (se aplicável)</option>\';\n        \n        professionals\n          .filter(p => [\'admin\', \'coordinator\', \'professional\'].includes(p.user.role))\n          .forEach(professional => {\n            const option = document.createElement(\'option\');\n            option.value = professional.id;\n            option.textContent = professional.user.fullName;\n            supervisorIdSelect.appendChild(option);\n          });\n      } catch (error) {\n        console.error(\'Erro ao carregar profissionais:\', error);\n        professionalsTableBody.innerHTML = `\n          <tr>\n            <td colspan="7">Erro ao carregar profissionais. Tente novamente mais tarde.</td>\n          </tr>\n        `;\n      }\n    }\n    \n    // Renderizar grid de profissionais\n    function renderProfessionalsGrid() {\n      // Limpar grid, mantendo o card de adicionar\n      const addCard = document.getElementById(\'addProfessionalCard\');\n      professionalGrid.innerHTML = \'\';\n      professionalGrid.appendChild(addCard);\n      \n      // Se não há profissionais\n      if (professionals.length === 0) {\n        const emptyCard = document.createElement(\'div\');\n        emptyCard.className = \'empty-state\';\n        emptyCard.innerHTML = `\n          <div class="empty-icon">👨\u200d⚕️</div>\n          <div class="empty-text">Nenhum profissional encontrado</div>\n        `;\n        professionalGrid.insertBefore(emptyCard, addCard);\n        return;\n      }\n      \n      // Mostrar no máximo 4 profissionais no grid\n      const displayProfessionals = professionals.slice(0, 4);\n      \n      // Adicionar cards de profissionais\n      displayProfessionals.forEach(professional => {\n        const card = document.createElement(\'div\');\n        card.className = \'professional-card\';\n        \n        const initials = professional.user.fullName\n          .split(\' \')\n          .map(name => name.charAt(0))\n          .join(\'\')\n          .substring(0, 2)\n          .toUpperCase();\n        \n        card.innerHTML = `\n          <div class="professional-header">\n            ${professional.user.profileImageUrl\n              ? `<img src="${professional.user.profileImageUrl}" alt="${professional.user.fullName}" class="professional-photo">`\n              : `<div class="professional-avatar">${initials}</div>`\n            }\n            <div class="professional-info">\n              <h3 class="professional-name">${professional.user.fullName}</h3>\n              <div class="professional-type">${translateProfessionalType(professional.professionalType)}</div>\n              <div class="professional-license">${professional.licenseNumber ? `${professional.licenseType || \'\'} ${professional.licenseNumber}` : \'\'}</div>\n            </div>\n          </div>\n          \n          <div class="professional-contact">\n            <span class="professional-icon">📧</span> ${professional.user.email}\n          </div>\n          \n          <div class="professional-contact">\n            <span class="professional-icon">📞</span> ${professional.user.phone || \'Não informado\'}\n          </div>\n          \n          <div class="professional-specialization">\n            <div class="specialization-title">Especialização</div>\n            <div class="specialization-text">${professional.specialization || \'Não informado\'}</div>\n          </div>\n          \n          <div class="professional-footer">\n            <div>\n              <span class="status ${professional.user.isActive ? \'status-active\' : \'status-inactive\'}">\n                ${professional.user.isActive ? \'Ativo\' : \'Inativo\'}\n              </span>\n            </div>\n            \n            <div class="professional-actions">\n              <button class="button button-outline view-professional" data-id="${professional.id}">Ver detalhes</button>\n            </div>\n          </div>\n        `;\n        \n        professionalGrid.insertBefore(card, addCard);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-professional\').forEach(button => {\n        button.addEventListener(\'click\', () => viewProfessional(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Renderizar tabela de profissionais\n    function renderProfessionalsTable() {\n      // Se não há profissionais\n      if (professionals.length === 0) {\n        professionalsTableBody.innerHTML = `\n          <tr>\n            <td colspan="7" class="text-center">Nenhum profissional encontrado</td>\n          </tr>\n        `;\n        paginationElement.innerHTML = \'\';\n        return;\n      }\n      \n      // Calcular paginação\n      const totalPages = Math.ceil(professionals.length / itemsPerPage);\n      const start = (currentPage - 1) * itemsPerPage;\n      const end = Math.min(start + itemsPerPage, professionals.length);\n      const paginatedProfessionals = professionals.slice(start, end);\n      \n      // Limpar tabela\n      professionalsTableBody.innerHTML = \'\';\n      \n      // Adicionar linhas\n      paginatedProfessionals.forEach(professional => {\n        const row = document.createElement(\'tr\');\n        \n        // Encontrar unidade\n        const facility = facilities.find(f => f.id === professional.user.facilityId);\n        \n        row.innerHTML = `\n          <td>${professional.user.fullName}</td>\n          <td>${translateProfessionalType(professional.professionalType)}</td>\n          <td>${professional.licenseNumber ? `${professional.licenseType || \'\'} ${professional.licenseNumber}` : \'-\'}</td>\n          <td>${professional.user.email}<br>${professional.user.phone || \'\'}</td>\n          <td>${facility ? facility.name : \'-\'}</td>\n          <td><span class="status ${professional.user.isActive ? \'status-active\' : \'status-inactive\'}">${professional.user.isActive ? \'Ativo\' : \'Inativo\'}</span></td>\n          <td>\n            <button class="action-button view-professional" data-id="${professional.id}">Visualizar</button>\n            <button class="action-button edit-professional" data-id="${professional.id}">Editar</button>\n          </td>\n        `;\n        \n        professionalsTableBody.appendChild(row);\n      });\n      \n      // Adicionar paginação\n      renderPagination(totalPages);\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-professional\').forEach(button => {\n        button.addEventListener(\'click\', () => viewProfessional(parseInt(button.dataset.id)));\n      });\n      \n      document.querySelectorAll(\'.edit-professional\').forEach(button => {\n        button.addEventListener(\'click\', () => editProfessional(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Renderizar paginação\n    function renderPagination(totalPages) {\n      if (totalPages <= 1) {\n        paginationElement.innerHTML = \'\';\n        return;\n      }\n      \n      let paginationHTML = \'\';\n      \n      // Botão anterior\n      paginationHTML += `\n        <li class="pagination-item">\n          <a href="#" class="pagination-link ${currentPage === 1 ? \'disabled\' : \'\'}" data-page="${currentPage - 1}">\n            &laquo;\n          </a>\n        </li>\n      `;\n      \n      // Páginas\n      for (let i = 1; i <= totalPages; i++) {\n        paginationHTML += `\n          <li class="pagination-item">\n            <a href="#" class="pagination-link ${i === currentPage ? \'active\' : \'\'}" data-page="${i}">\n              ${i}\n            </a>\n          </li>\n        `;\n      }\n      \n      // Botão próximo\n      paginationHTML += `\n        <li class="pagination-item">\n          <a href="#" class="pagination-link ${currentPage === totalPages ? \'disabled\' : \'\'}" data-page="${currentPage + 1}">\n            &raquo;\n          </a>\n        </li>\n      `;\n      \n      paginationElement.innerHTML = paginationHTML;\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.pagination-link:not(.disabled)\').forEach(link => {\n        link.addEventListener(\'click\', (e) => {\n          e.preventDefault();\n          currentPage = parseInt(link.dataset.page);\n          renderProfessionalsTable();\n        });\n      });\n    }\n    \n    // Filtrar profissionais\n    function filterProfessionals() {\n      const searchTerm = searchProfessional.value.toLowerCase();\n      \n      if (!searchTerm) {\n        renderProfessionalsTable();\n        return;\n      }\n      \n      const filteredProfessionals = professionals.filter(professional =>\n        professional.user.fullName.toLowerCase().includes(searchTerm) ||\n        professional.user.email.toLowerCase().includes(searchTerm) ||\n        (professional.licenseNumber && professional.licenseNumber.toLowerCase().includes(searchTerm))\n      );\n      \n      // Atualizar temporariamente a lista\n      const originalProfessionals = professionals;\n      professionals = filteredProfessionals;\n      currentPage = 1;\n      \n      renderProfessionalsTable();\n      \n      // Restaurar a lista original\n      professionals = originalProfessionals;\n    }\n    \n    // Aplicar filtros\n    function applyFilters() {\n      const professionalType = typeFilter.value;\n      const facilityId = facilityFilter.value;\n      const role = roleFilter.value;\n      const isActive = statusFilter.value;\n      \n      // Fazer uma nova requisição com os filtros\n      let url = \'/api/professionals?\';\n      const params = [];\n      \n      if (professionalType) params.push(`professionalType=${professionalType}`);\n      if (facilityId) params.push(`facilityId=${facilityId}`);\n      if (role) params.push(`role=${role}`);\n      if (isActive === \'active\') params.push(\'isActive=true\');\n      if (isActive === \'inactive\') params.push(\'isActive=false\');\n      \n      url += params.join(\'&\');\n      \n      fetch(url, { credentials: \'include\' })\n        .then(response => {\n          if (!response.ok) throw new Error(\'Erro ao filtrar profissionais\');\n          return response.json();\n        })\n        .then(data => {\n          professionals = data;\n          currentPage = 1;\n          renderProfessionalsGrid();\n          renderProfessionalsTable();\n        })\n        .catch(error => {\n          console.error(\'Erro ao aplicar filtros:\', error);\n          alert(\'Erro ao aplicar filtros. Tente novamente.\');\n        });\n    }\n    \n    // Abrir modal para adicionar profissional\n    function openAddProfessionalModal() {\n      modalTitle.textContent = \'Adicionar Profissional\';\n      professionalForm.reset();\n      professionalIdInput.value = \'\';\n      userIdInput.value = \'\';\n      passwordGroup.style.display = \'block\';\n      \n      // Resetar imagem de perfil\n      profileImageUpload.style.backgroundImage = \'\';\n      profileImageUpload.classList.remove(\'has-image\');\n      profileImageUrlInput.value = \'\';\n      \n      document.getElementById(\'isActive\').checked = true;\n      \n      professionalModal.classList.add(\'active\');\n    }\n    \n    // Abrir modal para editar profissional\n    async function editProfessional(professionalId) {\n      try {\n        const response = await fetch(`/api/professionals/${professionalId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar detalhes do profissional\');\n        }\n        \n        const professional = await response.json();\n        \n        modalTitle.textContent = \'Editar Profissional\';\n        \n        // Ocultar campo de senha para edição\n        passwordGroup.style.display = \'none\';\n        \n        // Preencher formulário\n        professionalIdInput.value = professional.id;\n        userIdInput.value = professional.user.id;\n        document.getElementById(\'fullName\').value = professional.user.fullName;\n        document.getElementById(\'username\').value = professional.user.username;\n        document.getElementById(\'email\').value = professional.user.email;\n        document.getElementById(\'phone\').value = professional.user.phone || \'\';\n        document.getElementById(\'role\').value = professional.user.role;\n        document.getElementById(\'facilityId\').value = professional.user.facilityId;\n        document.getElementById(\'professionalType\').value = professional.professionalType;\n        document.getElementById(\'licenseNumber\').value = professional.licenseNumber || \'\';\n        document.getElementById(\'licenseType\').value = professional.licenseType || \'\';\n        document.getElementById(\'specialization\').value = professional.specialization || \'\';\n        document.getElementById(\'employmentType\').value = professional.employmentType || \'\';\n        document.getElementById(\'hourlyRate\').value = professional.hourlyRate || \'\';\n        document.getElementById(\'supervisorId\').value = professional.supervisorId || \'\';\n        document.getElementById(\'bio\').value = professional.bio || \'\';\n        document.getElementById(\'isActive\').checked = professional.user.isActive;\n        \n        // Definir imagem de perfil\n        if (professional.user.profileImageUrl) {\n          profileImageUpload.style.backgroundImage = `url("${professional.user.profileImageUrl}")`;\n          profileImageUpload.classList.add(\'has-image\');\n          profileImageUrlInput.value = professional.user.profileImageUrl;\n        } else {\n          profileImageUpload.style.backgroundImage = \'\';\n          profileImageUpload.classList.remove(\'has-image\');\n          profileImageUrlInput.value = \'\';\n        }\n        \n        professionalModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar profissional:\', error);\n        alert(\'Erro ao carregar detalhes do profissional. Tente novamente.\');\n      }\n    }\n    \n    // Editar a partir da visualização\n    function editProfessionalFromView() {\n      closeViewProfessionalModal();\n      if (currentProfessional) {\n        editProfessional(currentProfessional.id);\n      }\n    }\n    \n    // Fechar modal de profissional\n    function closeProfessionalModal() {\n      professionalModal.classList.remove(\'active\');\n    }\n    \n    // Fechar modal de visualização\n    function closeViewProfessionalModal() {\n      viewProfessionalModal.classList.remove(\'active\');\n    }\n    \n    // Alternar entre as abas\n    function switchTab(tab) {\n      // Remover classe ativa de todas as abas\n      infoTab.classList.remove(\'active\');\n      internsTab.classList.remove(\'active\');\n      scheduleTab.classList.remove(\'active\');\n      \n      infoTabContent.classList.remove(\'active\');\n      internsTabContent.classList.remove(\'active\');\n      scheduleTabContent.classList.remove(\'active\');\n      \n      // Adicionar classe ativa à aba clicada\n      if (tab === \'info\') {\n        infoTab.classList.add(\'active\');\n        infoTabContent.classList.add(\'active\');\n      } else if (tab === \'interns\') {\n        internsTab.classList.add(\'active\');\n        internsTabContent.classList.add(\'active\');\n      } else if (tab === \'schedule\') {\n        scheduleTab.classList.add(\'active\');\n        scheduleTabContent.classList.add(\'active\');\n      }\n    }\n    \n    // Manipular upload de imagem\n    function handleProfileImageUpload(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n      \n      // Tipos de arquivo permitidos\n      const allowedTypes = [\'image/jpeg\', \'image/png\', \'image/gif\'];\n      if (!allowedTypes.includes(file.type)) {\n        alert(\'Tipo de arquivo não suportado. Por favor, utilize JPG, PNG ou GIF.\');\n        return;\n      }\n      \n      // Tamanho máximo: 2MB\n      const maxSize = 2 * 1024 * 1024;\n      if (file.size > maxSize) {\n        alert(\'Arquivo muito grande. O tamanho máximo é 2MB.\');\n        return;\n      }\n      \n      const reader = new FileReader();\n      reader.onload = function(e) {\n        profileImageUpload.style.backgroundImage = `url("${e.target.result}")`;\n        profileImageUpload.classList.add(\'has-image\');\n        \n        // Aqui você poderia fazer upload para um serviço de armazenamento\n        // Por ora, vamos usar a URL de dados diretamente\n        profileImageUrlInput.value = e.target.result;\n      };\n      reader.readAsDataURL(file);\n    }\n    \n    // Salvar profissional\n    async function saveProfessional() {\n      try {\n        // Validação básica\n        const fullNameInput = document.getElementById(\'fullName\');\n        const usernameInput = document.getElementById(\'username\');\n        const emailInput = document.getElementById(\'email\');\n        const phoneInput = document.getElementById(\'phone\');\n        const roleInput = document.getElementById(\'role\');\n        const facilityIdInput = document.getElementById(\'facilityId\');\n        const professionalTypeInput = document.getElementById(\'professionalType\');\n        const passwordInput = document.getElementById(\'password\');\n        \n        if (!fullNameInput.value) {\n          alert(\'Por favor, insira o nome completo\');\n          fullNameInput.focus();\n          return;\n        }\n        \n        if (!usernameInput.value) {\n          alert(\'Por favor, insira o nome de usuário\');\n          usernameInput.focus();\n          return;\n        }\n        \n        if (!professionalIdInput.value && !passwordInput.value) {\n          alert(\'Por favor, insira uma senha\');\n          passwordInput.focus();\n          return;\n        }\n        \n        if (!emailInput.value) {\n          alert(\'Por favor, insira o e-mail\');\n          emailInput.focus();\n          return;\n        }\n        \n        if (!phoneInput.value) {\n          alert(\'Por favor, insira o telefone\');\n          phoneInput.focus();\n          return;\n        }\n        \n        if (!roleInput.value) {\n          alert(\'Por favor, selecione a função\');\n          roleInput.focus();\n          return;\n        }\n        \n        if (!facilityIdInput.value) {\n          alert(\'Por favor, selecione a unidade\');\n          facilityIdInput.focus();\n          return;\n        }\n        \n        if (!professionalTypeInput.value) {\n          alert(\'Por favor, selecione a especialidade\');\n          professionalTypeInput.focus();\n          return;\n        }\n        \n        // Preparar dados do profissional\n        const professionalData = {\n          username: usernameInput.value,\n          fullName: fullNameInput.value,\n          email: emailInput.value,\n          phone: phoneInput.value,\n          role: roleInput.value,\n          facilityId: parseInt(facilityIdInput.value),\n          profileImageUrl: profileImageUrlInput.value,\n          isActive: document.getElementById(\'isActive\').checked,\n          professionalType: professionalTypeInput.value,\n          licenseNumber: document.getElementById(\'licenseNumber\').value,\n          licenseType: document.getElementById(\'licenseType\').value,\n          specialization: document.getElementById(\'specialization\').value,\n          employmentType: document.getElementById(\'employmentType\').value,\n          hourlyRate: document.getElementById(\'hourlyRate\').value \n            ? parseFloat(document.getElementById(\'hourlyRate\').value) \n            : null,\n          supervisorId: document.getElementById(\'supervisorId\').value\n            ? parseInt(document.getElementById(\'supervisorId\').value)\n            : null,\n          bio: document.getElementById(\'bio\').value\n        };\n        \n        // Adicionar senha apenas para novos profissionais\n        if (!professionalIdInput.value) {\n          professionalData.password = passwordInput.value;\n        }\n        \n        let response;\n        \n        if (professionalIdInput.value) {\n          // Editar profissional existente\n          response = await fetch(`/api/professionals/${professionalIdInput.value}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(professionalData)\n          });\n        } else {\n          // Adicionar novo profissional\n          response = await fetch(\'/api/professionals\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(professionalData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(errorText || \'Erro ao salvar profissional\');\n        }\n        \n        // Fechar modal e recarregar profissionais\n        closeProfessionalModal();\n        await loadProfessionals();\n        \n        alert(professionalIdInput.value ? \'Profissional atualizado com sucesso!\' : \'Profissional adicionado com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar profissional:\', error);\n        alert(`Erro ao salvar profissional: ${error.message}`);\n      }\n    }\n    \n    // Visualizar profissional\n    async function viewProfessional(professionalId) {\n      try {\n        const response = await fetch(`/api/professionals/${professionalId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar detalhes do profissional\');\n        }\n        \n        currentProfessional = await response.json();\n        \n        // Encontrar unidade\n        const facility = facilities.find(f => f.id === currentProfessional.user.facilityId);\n        \n        // Encontrar supervisor\n        let supervisor = null;\n        if (currentProfessional.supervisorId) {\n          supervisor = professionals.find(p => p.id === currentProfessional.supervisorId);\n        }\n        \n        // Iniciais do profissional para o avatar\n        const initials = currentProfessional.user.fullName\n          .split(\' \')\n          .map(name => name.charAt(0))\n          .join(\'\')\n          .substring(0, 2)\n          .toUpperCase();\n        \n        // Avatar\n        if (currentProfessional.user.profileImageUrl) {\n          document.getElementById(\'viewProfessionalAvatar\').style.display = \'none\';\n          \n          // Criar elemento de imagem ou atualizar existente\n          let photoElement = document.querySelector(\'.professional-view-photo\');\n          if (!photoElement) {\n            photoElement = document.createElement(\'img\');\n            photoElement.className = \'professional-view-photo\';\n            photoElement.alt = currentProfessional.user.fullName;\n            document.querySelector(\'.professional-view-header\').insertBefore(\n              photoElement,\n              document.querySelector(\'.professional-view-info\')\n            );\n          }\n          \n          photoElement.src = currentProfessional.user.profileImageUrl;\n        } else {\n          // Remover foto se existir\n          const photoElement = document.querySelector(\'.professional-view-photo\');\n          if (photoElement) photoElement.remove();\n          \n          document.getElementById(\'viewProfessionalAvatar\').style.display = \'flex\';\n          document.getElementById(\'viewProfessionalAvatar\').textContent = initials;\n        }\n        \n        // Informações básicas\n        document.getElementById(\'viewProfessionalName\').textContent = currentProfessional.user.fullName;\n        document.getElementById(\'viewProfessionalType\').textContent = translateProfessionalType(currentProfessional.professionalType);\n        document.getElementById(\'viewProfessionalLicense\').textContent = currentProfessional.licenseNumber\n          ? `${currentProfessional.licenseType || \'\'} ${currentProfessional.licenseNumber}`\n          : \'\';\n        \n        // Informações de contato\n        document.getElementById(\'viewEmail\').textContent = currentProfessional.user.email;\n        document.getElementById(\'viewPhone\').textContent = currentProfessional.user.phone || \'Não informado\';\n        document.getElementById(\'viewFacility\').textContent = facility ? facility.name : \'Não definida\';\n        document.getElementById(\'viewStatus\').innerHTML = `\n          <span class="status ${currentProfessional.user.isActive ? \'status-active\' : \'status-inactive\'}">\n            ${currentProfessional.user.isActive ? \'Ativo\' : \'Inativo\'}\n          </span>\n        `;\n        \n        // Informações profissionais\n        document.getElementById(\'viewRole\').textContent = translateRole(currentProfessional.user.role);\n        document.getElementById(\'viewProfessionalTypeDetail\').textContent = translateProfessionalType(currentProfessional.professionalType);\n        document.getElementById(\'viewEmploymentType\').textContent = currentProfessional.employmentType\n          ? translateEmploymentType(currentProfessional.employmentType)\n          : \'Não informado\';\n        document.getElementById(\'viewHourlyRate\').textContent = currentProfessional.hourlyRate\n          ? `R$ ${parseFloat(currentProfessional.hourlyRate).toFixed(2)}`\n          : \'Não informado\';\n        document.getElementById(\'viewSpecialization\').textContent = currentProfessional.specialization || \'Não informado\';\n        document.getElementById(\'viewSupervisor\').textContent = supervisor\n          ? supervisor.user.fullName\n          : \'Não possui\';\n        \n        // Biografia\n        document.getElementById(\'viewBio\').textContent = currentProfessional.bio || \'Nenhuma biografia adicionada.\';\n        \n        // Estagiários\n        if (currentProfessional.interns && currentProfessional.interns.length > 0) {\n          document.getElementById(\'internsList\').innerHTML = \'\';\n          document.getElementById(\'noInternsMessage\').style.display = \'none\';\n          document.getElementById(\'internsSection\').style.display = \'block\';\n          \n          currentProfessional.interns.forEach(intern => {\n            const internInitials = intern.user.fullName\n              .split(\' \')\n              .map(name => name.charAt(0))\n              .join(\'\')\n              .substring(0, 2)\n              .toUpperCase();\n            \n            const internElement = document.createElement(\'div\');\n            internElement.className = \'intern-item\';\n            internElement.innerHTML = `\n              <div class="intern-avatar">${internInitials}</div>\n              <div class="intern-info">\n                <div class="intern-name">${intern.user.fullName}</div>\n                <div class="intern-email">${intern.user.email}</div>\n              </div>\n            `;\n            \n            document.getElementById(\'internsList\').appendChild(internElement);\n          });\n        } else {\n          document.getElementById(\'internsSection\').style.display = \'none\';\n          document.getElementById(\'noInternsMessage\').style.display = \'block\';\n        }\n        \n        // Estatísticas\n        loadProfessionalStats(currentProfessional.id);\n        \n        // Mostrar primeira aba\n        switchTab(\'info\');\n        \n        // Exibir modal\n        viewProfessionalModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar profissional:\', error);\n        alert(\'Erro ao carregar detalhes do profissional. Tente novamente.\');\n      }\n    }\n    \n    // Carregar estatísticas do profissional\n    async function loadProfessionalStats(professionalId) {\n      try {\n        // Obter estatísticas de agendamentos\n        const appointmentsResponse = await fetch(`/api/professionals/${professionalId}/stats`, {\n          credentials: \'include\'\n        });\n        \n        if (appointmentsResponse.ok) {\n          const stats = await appointmentsResponse.json();\n          \n          // Estatísticas por tipo (mês atual)\n          document.getElementById(\'viewAppointmentsCount\').textContent = stats.totalAppointments || 0;\n          document.getElementById(\'viewTotalHours\').textContent = stats.totalHours \n            ? `${stats.totalHours}h` \n            : \'0h\';\n          \n          // Total de pacientes atendidos\n          document.getElementById(\'viewPatientCount\').textContent = stats.patientCount || 0;\n          \n          // Evoluções\n          document.getElementById(\'viewEvolutionsCount\').textContent = stats.evolutionCount || 0;\n        }\n      } catch (error) {\n        console.error(\'Erro ao carregar estatísticas do profissional:\', error);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n   $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    // Verificar autenticação e carregar dados do usuário\n    document.addEventListener(\'DOMContentLoaded\', async () => {\n      await checkAuth();\n      setupEventListeners();\n      await Promise.all([\n        loadFacilities(),\n        loadProfessionals()\n      ]);\n    });\n    \n    // Elementos DOM\n    const userNameElement = document.getElementById(\'userName\');\n    const userRoleElement = document.getElementById(\'userRole\');\n    const userAvatarElement = document.getElementById(\'userAvatar\');\n    const logoutButton = document.getElementById(\'logoutButton\');\n    const professionalGrid = document.getElementById(\'professionalGrid\');\n    const professionalsTableBody = document.getElementById(\'professionalsTableBody\');\n    const searchProfessional = document.getElementById(\'searchProfessional\');\n    const addProfessionalCard = document.getElementById(\'addProfessionalCard\');\n    const paginationElement = document.getElementById(\'pagination\');\n    \n    // Modal Professional\n    const professionalModal = document.getElementById(\'professionalModal\');\n    const modalTitle = document.getElementById(\'modalTitle\');\n    const professionalForm = document.getElementById(\'professionalForm\');\n    const professionalIdInput = document.getElementById(\'professionalId\');\n    const userIdInput = document.getElementById(\'userId\');\n    const closeModal = document.getElementById(\'closeModal\');\n    const cancelButton = document.getElementById(\'cancelButton\');\n    const saveButton = document.getElementById(\'saveButton\');\n    const passwordGroup = document.getElementById(\'passwordGroup\');\n    \n    // Elementos para a imagem de perfil\n    const profileImageUpload = document.getElementById(\'profileImageUpload\');\n    const profileImageInput = document.getElementById(\'profileImage\');\n    const profileImageUrlInput = document.getElementById(\'profileImageUrl\');\n    \n    // Modal View Professional\n    const viewProfessionalModal = document.getElementById(\'viewProfessionalModal\');\n    const closeViewModal = document.getElementById(\'closeViewModal\');\n    const closeDetailButton = document.getElementById(\'closeDetailButton\');\n    const editProfessionalButton = document.getElementById(\'editProfessionalButton\');\n    \n    // Tabs\n    const infoTab = document.getElementById(\'infoTab\');\n    const internsTab = document.getElementById(\'internsTab\');\n    const scheduleTab = document.getElementById(\'scheduleTab\');\n    const infoTabContent = document.getElementById(\'infoTabContent\');\n    const internsTabContent = document.getElementById(\'internsTabContent\');\n    const scheduleTabContent = document.getElementById(\'scheduleTabContent\');\n    \n    // Filtros\n    const typeFilter = document.getElementById(\'typeFilter\');\n    const facilityFilter = document.getElementById(\'facilityFilter\');\n    const roleFilter = document.getElementById(\'roleFilter\');\n    const statusFilter = document.getElementById(\'statusFilter\');\n    const filterButton = document.getElementById(\'filterButton\');\n    \n    // Variáveis globais\n    let currentUser = null;\n    let professionals = [];\n    let facilities = [];\n    let currentProfessional = null;\n    let currentPage = 1;\n    const itemsPerPage = 10;\n    \n    // Verificar autenticação\n    async function checkAuth() {\n      try {\n        const response = await fetch(\'/api/user\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          // Não autenticado, redirecionar para login\n          window.location.href = \'/login.html\';\n          return;\n        }\n        \n        currentUser = await response.json();\n        displayUserData(currentUser);\n        \n        // Configurar permissões baseadas no papel do usuário\n        if (![\'admin\', \'coordinator\'].includes(currentUser.role)) {\n          addProfessionalCard.style.display = \'none\';\n        }\n      } catch (error) {\n        console.error(\'Erro ao verificar autenticação:\', error);\n        window.location.href = \'/login.html\';\n      }\n    }\n    \n    // Exibir dados do usuário\n    function displayUserData(user) {\n      userNameElement.textContent = user.fullName;\n      userRoleElement.textContent = translateRole(user.role);\n      \n      // Iniciais do usuário para o avatar\n      const initials = user.fullName\n        .split(\' \')\n        .map(name => name.charAt(0))\n        .join(\'\')\n        .substring(0, 2)\n        .toUpperCase();\n      userAvatarElement.textContent = initials;\n    }\n    \n    // Traduzir função do inglês para português\n    function translateRole(role) {\n      const translations = {\n        \'admin\': \'Administrador\',\n        \'coordinator\': \'Coordenador\',\n        \'professional\': \'Profissional\',\n        \'intern\': \'Estagiário\',\n        \'secretary\': \'Secretário(a)\'\n      };\n      \n      return translations[role] || role;\n    }\n    \n    // Traduzir tipo de profissional\n    function translateProfessionalType(type) {\n      const translations = {\n        \'psychologist\': \'Psicologia\',\n        \'physiotherapist\': \'Fisioterapia\',\n        \'speech_therapist\': \'Fonoaudiologia\',\n        \'occupational_therapist\': \'Terapia Ocupacional\',\n        \'other\': \'Outro\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Traduzir tipo de contratação\n    function translateEmploymentType(type) {\n      const translations = {\n        \'employee\': \'CLT\',\n        \'contractor\': \'Terceirizado/PJ\',\n        \'freelancer\': \'Autônomo\'\n      };\n      \n      return translations[type] || type;\n    }\n    \n    // Configurar event listeners\n    function setupEventListeners() {\n      // Logout\n      logoutButton.addEventListener(\'click\', logout);\n      \n      // Pesquisar\n      searchProfessional.addEventListener(\'input\', filterProfessionals);\n      \n      // Adicionar profissional\n      addProfessionalCard.addEventListener(\'click\', openAddProfessionalModal);\n      \n      // Formulário de profissional\n      closeModal.addEventListener(\'click\', closeProfessionalModal);\n      cancelButton.addEventListener(\'click\', closeProfessionalModal);\n      saveButton.addEventListener(\'click\', saveProfessional);\n      \n      // Upload de imagem\n      profileImageUpload.addEventListener(\'click\', () => profileImageInput.click());\n      profileImageInput.addEventListener(\'change\', handleProfileImageUpload);\n      \n      // Modal de visualização\n      closeViewModal.addEventListener(\'click\', closeViewProfessionalModal);\n      closeDetailButton.addEventListener(\'click\', closeViewProfessionalModal);\n      editProfessionalButton.addEventListener(\'click\', editProfessionalFromView);\n      \n      // Tabs\n      infoTab.addEventListener(\'click\', () => switchTab(\'info\'));\n      internsTab.addEventListener(\'click\', () => switchTab(\'interns\'));\n      scheduleTab.addEventListener(\'click\', () => switchTab(\'schedule\'));\n      \n      // Filtros\n      filterButton.addEventListener(\'click\', applyFilters);\n      \n      // Fechar modais ao clicar fora\n      professionalModal.addEventListener(\'click\', e => {\n        if (e.target === professionalModal) closeProfessionalModal();\n      });\n      \n      viewProfessionalModal.addEventListener(\'click\', e => {\n        if (e.target === viewProfessionalModal) closeViewProfessionalModal();\n      });\n    }\n    \n    // Carregar unidades para filtros e formulário\n    async function loadFacilities() {\n      try {\n        const response = await fetch(\'/api/facilities\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar unidades\');\n        }\n        \n        facilities = await response.json();\n        \n        // Preencher select de unidade no formulário\n        const facilityIdSelect = document.getElementById(\'facilityId\');\n        facilityIdSelect.innerHTML = \'<option value="">Selecione</option>\';\n        \n        facilities.forEach(facility => {\n          const option = document.createElement(\'option\');\n          option.value = facility.id;\n          option.textContent = facility.name;\n          facilityIdSelect.appendChild(option);\n        });\n        \n        // Preencher select de unidade no filtro\n        facilityFilter.innerHTML = \'<option value="">Todas as unidades</option>\';\n        \n        facilities.forEach(facility => {\n          const option = document.createElement(\'option\');\n          option.value = facility.id;\n          option.textContent = facility.name;\n          facilityFilter.appendChild(option);\n        });\n      } catch (error) {\n        console.error(\'Erro ao carregar unidades:\', error);\n      }\n    }\n    \n    // Carregar profissionais\n    async function loadProfessionals() {\n      try {\n        const response = await fetch(\'/api/professionals\', {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar profissionais\');\n        }\n        \n        professionals = await response.json();\n        renderProfessionalsGrid();\n        renderProfessionalsTable();\n        \n        // Preencher supervisores no formulário\n        const supervisorIdSelect = document.getElementById(\'supervisorId\');\n        supervisorIdSelect.innerHTML = \'<option value="">Selecione (se aplicável)</option>\';\n        \n        professionals\n          .filter(p => [\'admin\', \'coordinator\', \'professional\'].includes(p.user.role))\n          .forEach(professional => {\n            const option = document.createElement(\'option\');\n            option.value = professional.id;\n            option.textContent = professional.user.fullName;\n            supervisorIdSelect.appendChild(option);\n          });\n      } catch (error) {\n        console.error(\'Erro ao carregar profissionais:\', error);\n        professionalsTableBody.innerHTML = `\n          <tr>\n            <td colspan="7">Erro ao carregar profissionais. Tente novamente mais tarde.</td>\n          </tr>\n        `;\n      }\n    }\n    \n    // Renderizar grid de profissionais\n    function renderProfessionalsGrid() {\n      // Limpar grid, mantendo o card de adicionar\n      const addCard = document.getElementById(\'addProfessionalCard\');\n      professionalGrid.innerHTML = \'\';\n      professionalGrid.appendChild(addCard);\n      \n      // Se não há profissionais\n      if (professionals.length === 0) {\n        const emptyCard = document.createElement(\'div\');\n        emptyCard.className = \'empty-state\';\n        emptyCard.innerHTML = `\n          <div class="empty-icon">👨\u200d⚕️</div>\n          <div class="empty-text">Nenhum profissional encontrado</div>\n        `;\n        professionalGrid.insertBefore(emptyCard, addCard);\n        return;\n      }\n      \n      // Mostrar no máximo 4 profissionais no grid\n      const displayProfessionals = professionals.slice(0, 4);\n      \n      // Adicionar cards de profissionais\n      displayProfessionals.forEach(professional => {\n        const card = document.createElement(\'div\');\n        card.className = \'professional-card\';\n        \n        const initials = professional.user.fullName\n          .split(\' \')\n          .map(name => name.charAt(0))\n          .join(\'\')\n          .substring(0, 2)\n          .toUpperCase();\n        \n        card.innerHTML = `\n          <div class="professional-header">\n            ${professional.user.profileImageUrl\n              ? `<img src="${professional.user.profileImageUrl}" alt="${professional.user.fullName}" class="professional-photo">`\n              : `<div class="professional-avatar">${initials}</div>`\n            }\n            <div class="professional-info">\n              <h3 class="professional-name">${professional.user.fullName}</h3>\n              <div class="professional-type">${translateProfessionalType(professional.professionalType)}</div>\n              <div class="professional-license">${professional.licenseNumber ? `${professional.licenseType || \'\'} ${professional.licenseNumber}` : \'\'}</div>\n            </div>\n          </div>\n          \n          <div class="professional-contact">\n            <span class="professional-icon">📧</span> ${professional.user.email}\n          </div>\n          \n          <div class="professional-contact">\n            <span class="professional-icon">📞</span> ${professional.user.phone || \'Não informado\'}\n          </div>\n          \n          <div class="professional-specialization">\n            <div class="specialization-title">Especialização</div>\n            <div class="specialization-text">${professional.specialization || \'Não informado\'}</div>\n          </div>\n          \n          <div class="professional-footer">\n            <div>\n              <span class="status ${professional.user.isActive ? \'status-active\' : \'status-inactive\'}">\n                ${professional.user.isActive ? \'Ativo\' : \'Inativo\'}\n              </span>\n            </div>\n            \n            <div class="professional-actions">\n              <button class="button button-outline view-professional" data-id="${professional.id}">Ver detalhes</button>\n            </div>\n          </div>\n        `;\n        \n        professionalGrid.insertBefore(card, addCard);\n      });\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-professional\').forEach(button => {\n        button.addEventListener(\'click\', () => viewProfessional(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Renderizar tabela de profissionais\n    function renderProfessionalsTable() {\n      // Se não há profissionais\n      if (professionals.length === 0) {\n        professionalsTableBody.innerHTML = `\n          <tr>\n            <td colspan="7" class="text-center">Nenhum profissional encontrado</td>\n          </tr>\n        `;\n        paginationElement.innerHTML = \'\';\n        return;\n      }\n      \n      // Calcular paginação\n      const totalPages = Math.ceil(professionals.length / itemsPerPage);\n      const start = (currentPage - 1) * itemsPerPage;\n      const end = Math.min(start + itemsPerPage, professionals.length);\n      const paginatedProfessionals = professionals.slice(start, end);\n      \n      // Limpar tabela\n      professionalsTableBody.innerHTML = \'\';\n      \n      // Adicionar linhas\n      paginatedProfessionals.forEach(professional => {\n        const row = document.createElement(\'tr\');\n        \n        // Encontrar unidade\n        const facility = facilities.find(f => f.id === professional.user.facilityId);\n        \n        row.innerHTML = `\n          <td>${professional.user.fullName}</td>\n          <td>${translateProfessionalType(professional.professionalType)}</td>\n          <td>${professional.licenseNumber ? `${professional.licenseType || \'\'} ${professional.licenseNumber}` : \'-\'}</td>\n          <td>${professional.user.email}<br>${professional.user.phone || \'\'}</td>\n          <td>${facility ? facility.name : \'-\'}</td>\n          <td><span class="status ${professional.user.isActive ? \'status-active\' : \'status-inactive\'}">${professional.user.isActive ? \'Ativo\' : \'Inativo\'}</span></td>\n          <td>\n            <button class="action-button view-professional" data-id="${professional.id}">Visualizar</button>\n            <button class="action-button edit-professional" data-id="${professional.id}">Editar</button>\n          </td>\n        `;\n        \n        professionalsTableBody.appendChild(row);\n      });\n      \n      // Adicionar paginação\n      renderPagination(totalPages);\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.view-professional\').forEach(button => {\n        button.addEventListener(\'click\', () => viewProfessional(parseInt(button.dataset.id)));\n      });\n      \n      document.querySelectorAll(\'.edit-professional\').forEach(button => {\n        button.addEventListener(\'click\', () => editProfessional(parseInt(button.dataset.id)));\n      });\n    }\n    \n    // Renderizar paginação\n    function renderPagination(totalPages) {\n      if (totalPages <= 1) {\n        paginationElement.innerHTML = \'\';\n        return;\n      }\n      \n      let paginationHTML = \'\';\n      \n      // Botão anterior\n      paginationHTML += `\n        <li class="pagination-item">\n          <a href="#" class="pagination-link ${currentPage === 1 ? \'disabled\' : \'\'}" data-page="${currentPage - 1}">\n            &laquo;\n          </a>\n        </li>\n      `;\n      \n      // Páginas\n      for (let i = 1; i <= totalPages; i++) {\n        paginationHTML += `\n          <li class="pagination-item">\n            <a href="#" class="pagination-link ${i === currentPage ? \'active\' : \'\'}" data-page="${i}">\n              ${i}\n            </a>\n          </li>\n        `;\n      }\n      \n      // Botão próximo\n      paginationHTML += `\n        <li class="pagination-item">\n          <a href="#" class="pagination-link ${currentPage === totalPages ? \'disabled\' : \'\'}" data-page="${currentPage + 1}">\n            &raquo;\n          </a>\n        </li>\n      `;\n      \n      paginationElement.innerHTML = paginationHTML;\n      \n      // Adicionar event listeners\n      document.querySelectorAll(\'.pagination-link:not(.disabled)\').forEach(link => {\n        link.addEventListener(\'click\', (e) => {\n          e.preventDefault();\n          currentPage = parseInt(link.dataset.page);\n          renderProfessionalsTable();\n        });\n      });\n    }\n    \n    // Filtrar profissionais\n    function filterProfessionals() {\n      const searchTerm = searchProfessional.value.toLowerCase();\n      \n      if (!searchTerm) {\n        renderProfessionalsTable();\n        return;\n      }\n      \n      const filteredProfessionals = professionals.filter(professional =>\n        professional.user.fullName.toLowerCase().includes(searchTerm) ||\n        professional.user.email.toLowerCase().includes(searchTerm) ||\n        (professional.licenseNumber && professional.licenseNumber.toLowerCase().includes(searchTerm))\n      );\n      \n      // Atualizar temporariamente a lista\n      const originalProfessionals = professionals;\n      professionals = filteredProfessionals;\n      currentPage = 1;\n      \n      renderProfessionalsTable();\n      \n      // Restaurar a lista original\n      professionals = originalProfessionals;\n    }\n    \n    // Aplicar filtros\n    function applyFilters() {\n      const professionalType = typeFilter.value;\n      const facilityId = facilityFilter.value;\n      const role = roleFilter.value;\n      const isActive = statusFilter.value;\n      \n      // Fazer uma nova requisição com os filtros\n      let url = \'/api/professionals?\';\n      const params = [];\n      \n      if (professionalType) params.push(`professionalType=${professionalType}`);\n      if (facilityId) params.push(`facilityId=${facilityId}`);\n      if (role) params.push(`role=${role}`);\n      if (isActive === \'active\') params.push(\'isActive=true\');\n      if (isActive === \'inactive\') params.push(\'isActive=false\');\n      \n      url += params.join(\'&\');\n      \n      fetch(url, { credentials: \'include\' })\n        .then(response => {\n          if (!response.ok) throw new Error(\'Erro ao filtrar profissionais\');\n          return response.json();\n        })\n        .then(data => {\n          professionals = data;\n          currentPage = 1;\n          renderProfessionalsGrid();\n          renderProfessionalsTable();\n        })\n        .catch(error => {\n          console.error(\'Erro ao aplicar filtros:\', error);\n          alert(\'Erro ao aplicar filtros. Tente novamente.\');\n        });\n    }\n    \n    // Abrir modal para adicionar profissional\n    function openAddProfessionalModal() {\n      modalTitle.textContent = \'Adicionar Profissional\';\n      professionalForm.reset();\n      professionalIdInput.value = \'\';\n      userIdInput.value = \'\';\n      passwordGroup.style.display = \'block\';\n      \n      // Resetar imagem de perfil\n      profileImageUpload.style.backgroundImage = \'\';\n      profileImageUpload.classList.remove(\'has-image\');\n      profileImageUrlInput.value = \'\';\n      \n      document.getElementById(\'isActive\').checked = true;\n      \n      professionalModal.classList.add(\'active\');\n    }\n    \n    // Abrir modal para editar profissional\n    async function editProfessional(professionalId) {\n      try {\n        const response = await fetch(`/api/professionals/${professionalId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar detalhes do profissional\');\n        }\n        \n        const professional = await response.json();\n        \n        modalTitle.textContent = \'Editar Profissional\';\n        \n        // Ocultar campo de senha para edição\n        passwordGroup.style.display = \'none\';\n        \n        // Preencher formulário\n        professionalIdInput.value = professional.id;\n        userIdInput.value = professional.user.id;\n        document.getElementById(\'fullName\').value = professional.user.fullName;\n        document.getElementById(\'username\').value = professional.user.username;\n        document.getElementById(\'email\').value = professional.user.email;\n        document.getElementById(\'phone\').value = professional.user.phone || \'\';\n        document.getElementById(\'role\').value = professional.user.role;\n        document.getElementById(\'facilityId\').value = professional.user.facilityId;\n        document.getElementById(\'professionalType\').value = professional.professionalType;\n        document.getElementById(\'licenseNumber\').value = professional.licenseNumber || \'\';\n        document.getElementById(\'licenseType\').value = professional.licenseType || \'\';\n        document.getElementById(\'specialization\').value = professional.specialization || \'\';\n        document.getElementById(\'employmentType\').value = professional.employmentType || \'\';\n        document.getElementById(\'hourlyRate\').value = professional.hourlyRate || \'\';\n        document.getElementById(\'supervisorId\').value = professional.supervisorId || \'\';\n        document.getElementById(\'bio\').value = professional.bio || \'\';\n        document.getElementById(\'isActive\').checked = professional.user.isActive;\n        \n        // Definir imagem de perfil\n        if (professional.user.profileImageUrl) {\n          profileImageUpload.style.backgroundImage = `url("${professional.user.profileImageUrl}")`;\n          profileImageUpload.classList.add(\'has-image\');\n          profileImageUrlInput.value = professional.user.profileImageUrl;\n        } else {\n          profileImageUpload.style.backgroundImage = \'\';\n          profileImageUpload.classList.remove(\'has-image\');\n          profileImageUrlInput.value = \'\';\n        }\n        \n        professionalModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao editar profissional:\', error);\n        alert(\'Erro ao carregar detalhes do profissional. Tente novamente.\');\n      }\n    }\n    \n    // Editar a partir da visualização\n    function editProfessionalFromView() {\n      closeViewProfessionalModal();\n      if (currentProfessional) {\n        editProfessional(currentProfessional.id);\n      }\n    }\n    \n    // Fechar modal de profissional\n    function closeProfessionalModal() {\n      professionalModal.classList.remove(\'active\');\n    }\n    \n    // Fechar modal de visualização\n    function closeViewProfessionalModal() {\n      viewProfessionalModal.classList.remove(\'active\');\n    }\n    \n    // Alternar entre as abas\n    function switchTab(tab) {\n      // Remover classe ativa de todas as abas\n      infoTab.classList.remove(\'active\');\n      internsTab.classList.remove(\'active\');\n      scheduleTab.classList.remove(\'active\');\n      \n      infoTabContent.classList.remove(\'active\');\n      internsTabContent.classList.remove(\'active\');\n      scheduleTabContent.classList.remove(\'active\');\n      \n      // Adicionar classe ativa à aba clicada\n      if (tab === \'info\') {\n        infoTab.classList.add(\'active\');\n        infoTabContent.classList.add(\'active\');\n      } else if (tab === \'interns\') {\n        internsTab.classList.add(\'active\');\n        internsTabContent.classList.add(\'active\');\n      } else if (tab === \'schedule\') {\n        scheduleTab.classList.add(\'active\');\n        scheduleTabContent.classList.add(\'active\');\n      }\n    }\n    \n    // Manipular upload de imagem\n    function handleProfileImageUpload(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n      \n      // Tipos de arquivo permitidos\n      const allowedTypes = [\'image/jpeg\', \'image/png\', \'image/gif\'];\n      if (!allowedTypes.includes(file.type)) {\n        alert(\'Tipo de arquivo não suportado. Por favor, utilize JPG, PNG ou GIF.\');\n        return;\n      }\n      \n      // Tamanho máximo: 2MB\n      const maxSize = 2 * 1024 * 1024;\n      if (file.size > maxSize) {\n        alert(\'Arquivo muito grande. O tamanho máximo é 2MB.\');\n        return;\n      }\n      \n      const reader = new FileReader();\n      reader.onload = function(e) {\n        profileImageUpload.style.backgroundImage = `url("${e.target.result}")`;\n        profileImageUpload.classList.add(\'has-image\');\n        \n        // Aqui você poderia fazer upload para um serviço de armazenamento\n        // Por ora, vamos usar a URL de dados diretamente\n        profileImageUrlInput.value = e.target.result;\n      };\n      reader.readAsDataURL(file);\n    }\n    \n    // Salvar profissional\n    async function saveProfessional() {\n      try {\n        // Validação básica\n        const fullNameInput = document.getElementById(\'fullName\');\n        const usernameInput = document.getElementById(\'username\');\n        const emailInput = document.getElementById(\'email\');\n        const phoneInput = document.getElementById(\'phone\');\n        const roleInput = document.getElementById(\'role\');\n        const facilityIdInput = document.getElementById(\'facilityId\');\n        const professionalTypeInput = document.getElementById(\'professionalType\');\n        const passwordInput = document.getElementById(\'password\');\n        \n        if (!fullNameInput.value) {\n          alert(\'Por favor, insira o nome completo\');\n          fullNameInput.focus();\n          return;\n        }\n        \n        if (!usernameInput.value) {\n          alert(\'Por favor, insira o nome de usuário\');\n          usernameInput.focus();\n          return;\n        }\n        \n        if (!professionalIdInput.value && !passwordInput.value) {\n          alert(\'Por favor, insira uma senha\');\n          passwordInput.focus();\n          return;\n        }\n        \n        if (!emailInput.value) {\n          alert(\'Por favor, insira o e-mail\');\n          emailInput.focus();\n          return;\n        }\n        \n        if (!phoneInput.value) {\n          alert(\'Por favor, insira o telefone\');\n          phoneInput.focus();\n          return;\n        }\n        \n        if (!roleInput.value) {\n          alert(\'Por favor, selecione a função\');\n          roleInput.focus();\n          return;\n        }\n        \n        if (!facilityIdInput.value) {\n          alert(\'Por favor, selecione a unidade\');\n          facilityIdInput.focus();\n          return;\n        }\n        \n        if (!professionalTypeInput.value) {\n          alert(\'Por favor, selecione a especialidade\');\n          professionalTypeInput.focus();\n          return;\n        }\n        \n        // Preparar dados do profissional\n        const professionalData = {\n          username: usernameInput.value,\n          fullName: fullNameInput.value,\n          email: emailInput.value,\n          phone: phoneInput.value,\n          role: roleInput.value,\n          facilityId: parseInt(facilityIdInput.value),\n          profileImageUrl: profileImageUrlInput.value,\n          isActive: document.getElementById(\'isActive\').checked,\n          professionalType: professionalTypeInput.value,\n          licenseNumber: document.getElementById(\'licenseNumber\').value,\n          licenseType: document.getElementById(\'licenseType\').value,\n          specialization: document.getElementById(\'specialization\').value,\n          employmentType: document.getElementById(\'employmentType\').value,\n          hourlyRate: document.getElementById(\'hourlyRate\').value \n            ? parseFloat(document.getElementById(\'hourlyRate\').value) \n            : null,\n          supervisorId: document.getElementById(\'supervisorId\').value\n            ? parseInt(document.getElementById(\'supervisorId\').value)\n            : null,\n          bio: document.getElementById(\'bio\').value\n        };\n        \n        // Adicionar senha apenas para novos profissionais\n        if (!professionalIdInput.value) {\n          professionalData.password = passwordInput.value;\n        }\n        \n        let response;\n        \n        if (professionalIdInput.value) {\n          // Editar profissional existente\n          response = await fetch(`/api/professionals/${professionalIdInput.value}`, {\n            method: \'PUT\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(professionalData)\n          });\n        } else {\n          // Adicionar novo profissional\n          response = await fetch(\'/api/professionals\', {\n            method: \'POST\',\n            headers: {\n              \'Content-Type\': \'application/json\'\n            },\n            credentials: \'include\',\n            body: JSON.stringify(professionalData)\n          });\n        }\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(errorText || \'Erro ao salvar profissional\');\n        }\n        \n        // Fechar modal e recarregar profissionais\n        closeProfessionalModal();\n        await loadProfessionals();\n        \n        alert(professionalIdInput.value ? \'Profissional atualizado com sucesso!\' : \'Profissional adicionado com sucesso!\');\n      } catch (error) {\n        console.error(\'Erro ao salvar profissional:\', error);\n        alert(`Erro ao salvar profissional: ${error.message}`);\n      }\n    }\n    \n    // Visualizar profissional\n    async function viewProfessional(professionalId) {\n      try {\n        const response = await fetch(`/api/professionals/${professionalId}`, {\n          credentials: \'include\'\n        });\n        \n        if (!response.ok) {\n          throw new Error(\'Erro ao carregar detalhes do profissional\');\n        }\n        \n        currentProfessional = await response.json();\n        \n        // Encontrar unidade\n        const facility = facilities.find(f => f.id === currentProfessional.user.facilityId);\n        \n        // Encontrar supervisor\n        let supervisor = null;\n        if (currentProfessional.supervisorId) {\n          supervisor = professionals.find(p => p.id === currentProfessional.supervisorId);\n        }\n        \n        // Iniciais do profissional para o avatar\n        const initials = currentProfessional.user.fullName\n          .split(\' \')\n          .map(name => name.charAt(0))\n          .join(\'\')\n          .substring(0, 2)\n          .toUpperCase();\n        \n        // Avatar\n        if (currentProfessional.user.profileImageUrl) {\n          document.getElementById(\'viewProfessionalAvatar\').style.display = \'none\';\n          \n          // Criar elemento de imagem ou atualizar existente\n          let photoElement = document.querySelector(\'.professional-view-photo\');\n          if (!photoElement) {\n            photoElement = document.createElement(\'img\');\n            photoElement.className = \'professional-view-photo\';\n            photoElement.alt = currentProfessional.user.fullName;\n            document.querySelector(\'.professional-view-header\').insertBefore(\n              photoElement,\n              document.querySelector(\'.professional-view-info\')\n            );\n          }\n          \n          photoElement.src = currentProfessional.user.profileImageUrl;\n        } else {\n          // Remover foto se existir\n          const photoElement = document.querySelector(\'.professional-view-photo\');\n          if (photoElement) photoElement.remove();\n          \n          document.getElementById(\'viewProfessionalAvatar\').style.display = \'flex\';\n          document.getElementById(\'viewProfessionalAvatar\').textContent = initials;\n        }\n        \n        // Informações básicas\n        document.getElementById(\'viewProfessionalName\').textContent = currentProfessional.user.fullName;\n        document.getElementById(\'viewProfessionalType\').textContent = translateProfessionalType(currentProfessional.professionalType);\n        document.getElementById(\'viewProfessionalLicense\').textContent = currentProfessional.licenseNumber\n          ? `${currentProfessional.licenseType || \'\'} ${currentProfessional.licenseNumber}`\n          : \'\';\n        \n        // Informações de contato\n        document.getElementById(\'viewEmail\').textContent = currentProfessional.user.email;\n        document.getElementById(\'viewPhone\').textContent = currentProfessional.user.phone || \'Não informado\';\n        document.getElementById(\'viewFacility\').textContent = facility ? facility.name : \'Não definida\';\n        document.getElementById(\'viewStatus\').innerHTML = `\n          <span class="status ${currentProfessional.user.isActive ? \'status-active\' : \'status-inactive\'}">\n            ${currentProfessional.user.isActive ? \'Ativo\' : \'Inativo\'}\n          </span>\n        `;\n        \n        // Informações profissionais\n        document.getElementById(\'viewRole\').textContent = translateRole(currentProfessional.user.role);\n        document.getElementById(\'viewProfessionalTypeDetail\').textContent = translateProfessionalType(currentProfessional.professionalType);\n        document.getElementById(\'viewEmploymentType\').textContent = currentProfessional.employmentType\n          ? translateEmploymentType(currentProfessional.employmentType)\n          : \'Não informado\';\n        document.getElementById(\'viewHourlyRate\').textContent = currentProfessional.hourlyRate\n          ? `R$ ${parseFloat(currentProfessional.hourlyRate).toFixed(2)}`\n          : \'Não informado\';\n        document.getElementById(\'viewSpecialization\').textContent = currentProfessional.specialization || \'Não informado\';\n        document.getElementById(\'viewSupervisor\').textContent = supervisor\n          ? supervisor.user.fullName\n          : \'Não possui\';\n        \n        // Biografia\n        document.getElementById(\'viewBio\').textContent = currentProfessional.bio || \'Nenhuma biografia adicionada.\';\n        \n        // Estagiários\n        if (currentProfessional.interns && currentProfessional.interns.length > 0) {\n          document.getElementById(\'internsList\').innerHTML = \'\';\n          document.getElementById(\'noInternsMessage\').style.display = \'none\';\n          document.getElementById(\'internsSection\').style.display = \'block\';\n          \n          currentProfessional.interns.forEach(intern => {\n            const internInitials = intern.user.fullName\n              .split(\' \')\n              .map(name => name.charAt(0))\n              .join(\'\')\n              .substring(0, 2)\n              .toUpperCase();\n            \n            const internElement = document.createElement(\'div\');\n            internElement.className = \'intern-item\';\n            internElement.innerHTML = `\n              <div class="intern-avatar">${internInitials}</div>\n              <div class="intern-info">\n                <div class="intern-name">${intern.user.fullName}</div>\n                <div class="intern-email">${intern.user.email}</div>\n              </div>\n            `;\n            \n            document.getElementById(\'internsList\').appendChild(internElement);\n          });\n        } else {\n          document.getElementById(\'internsSection\').style.display = \'none\';\n          document.getElementById(\'noInternsMessage\').style.display = \'block\';\n        }\n        \n        // Estatísticas\n        loadProfessionalStats(currentProfessional.id);\n        \n        // Mostrar primeira aba\n        switchTab(\'info\');\n        \n        // Exibir modal\n        viewProfessionalModal.classList.add(\'active\');\n      } catch (error) {\n        console.error(\'Erro ao visualizar profissional:\', error);\n        alert(\'Erro ao carregar detalhes do profissional. Tente novamente.\');\n      }\n    }\n    \n    // Carregar estatísticas do profissional\n    async function loadProfessionalStats(professionalId) {\n      try {\n        // Obter estatísticas de agendamentos\n        const appointmentsResponse = await fetch(`/api/professionals/${professionalId}/stats`, {\n          credentials: \'include\'\n        });\n        \n        if (appointmentsResponse.ok) {\n          const stats = await appointmentsResponse.json();\n          \n          // Estatísticas por tipo (mês atual)\n          document.getElementById(\'viewAppointmentsCount\').textContent = stats.totalAppointments || 0;\n          document.getElementById(\'viewTotalHours\').textContent = stats.totalHours \n            ? `${stats.totalHours}h` \n            : \'0h\';\n          \n          // Total de pacientes atendidos\n          document.getElementById(\'viewPatientCount\').textContent = stats.patientCount || 0;\n          \n          // Evoluções\n          document.getElementById(\'viewEvolutionsCount\').textContent = stats.evolutionCount || 0;\n        }\n      } catch (error) {\n        console.error(\'Erro ao carregar estatísticas do profissional:\', error);\n      }\n    }\n    \n    // Logout\n    async function logout() {\n      try {\n        await fetch(\'/api/logout\', {\n          method: \'POST\',\n          credentials: \'include\'\n        });\n        \n        window.location.href = \'/login.html\';\n      } catch (error) {\n        console.error(\'Erro ao fazer logout:\', error);\n        alert(\'Erro ao fazer logout. Tente novamente.\');\n      }\n    }\n  </script>\n', PosixPath('client/public/professionals.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = df2f299420e3a6ebe470c7adf4e3e522fbdc70e98dc4f4ed0a0954fe0afa186c8f02aacfe54a005aa0e0564f045b3445892d412b78f038a68b72d216917dc3e5_0
2025-05-07 18:31:35,278 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('client/src/hooks/use-offline-mutation.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = d1c4749e9f33ff7c8348f8e5e2b8b485fd61bb85af0dbc713fa1a0fd961baeaa313ff8b66a6d1e48279e6b092fbd2bcf7d229ee8d6c1c5d25d835fb5f977097c_0
2025-05-07 18:31:35,279 - semgrep.rule_match - DEBUG - match_key = ('"..." + "..."\n $X + $Y $X.concat($Y) `...${...}...`\n $X.concat("...")\n `Erro ao sincronizar requisição request.id: $UTIL = require(\'util\')\n...\n $UTIL.format(`Erro ao sincronizar requisição request.id:,error,...)\n console.error(`Erro ao sincronizar requisição request.id:,error,...)\n', PosixPath('client/src/hooks/use-offline-mutation.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = 6be25f8609bd136e16e6cdb874df60820716dfce68a044b19771a8276641954475404b6bd67f3c14fee84ac78ce1759a51f666d2dac2bb140610308f650ba16e_0
2025-05-07 18:31:35,279 - semgrep.rule_match - DEBUG - match_key = ('"..." + "..."\n $X + $Y $X.concat($Y) `...${...}...`\n $X.concat("...")\n `Erro ao sincronizar requisição request.id: $UTIL = require(\'util\')\n...\n $UTIL.format(`Erro ao sincronizar requisição request.id:,error,...)\n console.error(`Erro ao sincronizar requisição request.id:,error,...)\n', PosixPath('client/src/hooks/use-offline-mutation.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = 6be25f8609bd136e16e6cdb874df60820716dfce68a044b19771a8276641954475404b6bd67f3c14fee84ac78ce1759a51f666d2dac2bb140610308f650ba16e_0
2025-05-07 18:31:35,280 - semgrep.rule_match - DEBUG - match_key = ('"..." + "..."\n $X + $Y $X.concat($Y) `...${...}...`\n $X.concat("...")\n `Erro ao sincronizar requisição request.id: $UTIL = require(\'util\')\n...\n $UTIL.format(`Erro ao sincronizar requisição request.id:,error,...)\n console.error(`Erro ao sincronizar requisição request.id:,error,...)\n', PosixPath('client/src/hooks/use-offline-mutation.tsx'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = 6be25f8609bd136e16e6cdb874df60820716dfce68a044b19771a8276641954475404b6bd67f3c14fee84ac78ce1759a51f666d2dac2bb140610308f650ba16e_0
2025-05-07 18:31:35,280 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('client/src/lib/websocket-manager.ts'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = 7c87879c7289c642fda9c3efb7d87e343c8bec1a7e21bb832532e5f095413fbeced8417ede774e1a00fdcfefa0dd81104c52fa070295ab7bdfcf87aa6311f7b7_0
2025-05-07 18:31:35,281 - semgrep.rule_match - DEBUG - match_key = ('"..." + "..."\n $X + $Y $X.concat($Y) `...${...}...`\n $X.concat("...")\n `Erro no manipulador para mensagem type: $UTIL = require(\'util\')\n...\n $UTIL.format(`Erro no manipulador para mensagem type:,error,...)\n console.error(`Erro no manipulador para mensagem type:,error,...)\n', PosixPath('client/src/lib/websocket-manager.ts'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = 0330bf611912317b1c066f3d2b2595810637a7a05fae2fec501437a938c79f0f5ddaca80b8013a34c1a20b5394995a92c556bf0408dc0255ecdb4b3152035ac3_0
2025-05-07 18:31:35,281 - semgrep.rule_match - DEBUG - match_key = ('"..." + "..."\n $X + $Y $X.concat($Y) `...${...}...`\n $X.concat("...")\n `Erro no manipulador para mensagem type: $UTIL = require(\'util\')\n...\n $UTIL.format(`Erro no manipulador para mensagem type:,error,...)\n console.error(`Erro no manipulador para mensagem type:,error,...)\n', PosixPath('client/src/lib/websocket-manager.ts'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = 0330bf611912317b1c066f3d2b2595810637a7a05fae2fec501437a938c79f0f5ddaca80b8013a34c1a20b5394995a92c556bf0408dc0255ecdb4b3152035ac3_0
2025-05-07 18:31:35,282 - semgrep.rule_match - DEBUG - match_key = ('"..." + "..."\n $X + $Y $X.concat($Y) `...${...}...`\n $X.concat("...")\n `Erro no manipulador para mensagem type: $UTIL = require(\'util\')\n...\n $UTIL.format(`Erro no manipulador para mensagem type:,error,...)\n console.error(`Erro no manipulador para mensagem type:,error,...)\n', PosixPath('client/src/lib/websocket-manager.ts'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = 0330bf611912317b1c066f3d2b2595810637a7a05fae2fec501437a938c79f0f5ddaca80b8013a34c1a20b5394995a92c556bf0408dc0255ecdb4b3152035ac3_0
2025-05-07 18:31:35,282 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.possible-nginx-h2c-smuggling') match_id = 0bfbef5faa5cd393ea1ed631a0707d6b275b0ace68d8cf9f5ae046857d09ae3c6e2562fac91413350763c1d7c92239e0e637ecc1ec3d679e2528752927160157_0
2025-05-07 18:31:35,282 - semgrep.rule_match - DEBUG - match_key = ('location ... {\n  ...\n}\n proxy_http_version 1.1 ...;\n...\nproxy_set_header Upgrade ...;\n...\nproxy_set_header Connection ...;\n proxy_set_header Upgrade ...;\n...\nproxy_http_version 1.1 ...;\n...\nproxy_set_header Connection ...;\n proxy_set_header Upgrade ...;\n...\nproxy_set_header Connection ...;\n...\nproxy_http_version 1.1 ...;\n', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.possible-nginx-h2c-smuggling') match_id = 9c9a68904cd5f1bcc600d614fcf82a583f18cfaec0d5eb140839ca703b9c623c7cfc573fca0bf9d5ad80cc884a5b3c647b2bca360d9de5aae16166de48cac282_0
2025-05-07 18:31:35,283 - semgrep.rule_match - DEBUG - match_key = ('location ... {\n  ...\n}\n proxy_http_version 1.1 ...;\n...\nproxy_set_header Upgrade ...;\n...\nproxy_set_header Connection ...;\n proxy_set_header Upgrade ...;\n...\nproxy_http_version 1.1 ...;\n...\nproxy_set_header Connection ...;\n proxy_set_header Upgrade ...;\n...\nproxy_set_header Connection ...;\n...\nproxy_http_version 1.1 ...;\n', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.possible-nginx-h2c-smuggling') match_id = 9c9a68904cd5f1bcc600d614fcf82a583f18cfaec0d5eb140839ca703b9c623c7cfc573fca0bf9d5ad80cc884a5b3c647b2bca360d9de5aae16166de48cac282_0
2025-05-07 18:31:35,283 - semgrep.rule_match - DEBUG - match_key = ('location ... {\n  ...\n}\n proxy_http_version 1.1 ...;\n...\nproxy_set_header Upgrade ...;\n...\nproxy_set_header Connection ...;\n proxy_set_header Upgrade ...;\n...\nproxy_http_version 1.1 ...;\n...\nproxy_set_header Connection ...;\n proxy_set_header Upgrade ...;\n...\nproxy_set_header Connection ...;\n...\nproxy_http_version 1.1 ...;\n', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.possible-nginx-h2c-smuggling') match_id = 9c9a68904cd5f1bcc600d614fcf82a583f18cfaec0d5eb140839ca703b9c623c7cfc573fca0bf9d5ad80cc884a5b3c647b2bca360d9de5aae16166de48cac282_0
2025-05-07 18:31:35,284 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.request-host-used') match_id = 2d15b7f5a4abb20573726aa118371745c91337cf7052724b0fe83031bb17c7c1b68aac943fb6cc69147b47b2e61ded3b170fec174e9ed7cae7cb195c93a9b0ad_0
2025-05-07 18:31:35,284 - semgrep.rule_match - DEBUG - match_key = ('$host $http_host', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.request-host-used') match_id = ae4ba3bb028725171940b5431a573f2783522a35d0ff095992ae2a3c86d26008968f89b5ccd1eb2575ba41d0f2a6dfbaf56236afd8e208f7b9cd6b6d65b357be_0
2025-05-07 18:31:35,284 - semgrep.rule_match - DEBUG - match_key = ('$host $http_host', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.request-host-used') match_id = ae4ba3bb028725171940b5431a573f2783522a35d0ff095992ae2a3c86d26008968f89b5ccd1eb2575ba41d0f2a6dfbaf56236afd8e208f7b9cd6b6d65b357be_0
2025-05-07 18:31:35,285 - semgrep.rule_match - DEBUG - match_key = ('$host $http_host', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.request-host-used') match_id = ae4ba3bb028725171940b5431a573f2783522a35d0ff095992ae2a3c86d26008968f89b5ccd1eb2575ba41d0f2a6dfbaf56236afd8e208f7b9cd6b6d65b357be_0
2025-05-07 18:31:35,285 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.possible-nginx-h2c-smuggling') match_id = 0bfbef5faa5cd393ea1ed631a0707d6b275b0ace68d8cf9f5ae046857d09ae3c6e2562fac91413350763c1d7c92239e0e637ecc1ec3d679e2528752927160157_0
2025-05-07 18:31:35,286 - semgrep.rule_match - DEBUG - match_key = ('location ... {\n  ...\n}\n proxy_http_version 1.1 ...;\n...\nproxy_set_header Upgrade ...;\n...\nproxy_set_header Connection ...;\n proxy_set_header Upgrade ...;\n...\nproxy_http_version 1.1 ...;\n...\nproxy_set_header Connection ...;\n proxy_set_header Upgrade ...;\n...\nproxy_set_header Connection ...;\n...\nproxy_http_version 1.1 ...;\n', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.possible-nginx-h2c-smuggling') match_id = 9c9a68904cd5f1bcc600d614fcf82a583f18cfaec0d5eb140839ca703b9c623c7cfc573fca0bf9d5ad80cc884a5b3c647b2bca360d9de5aae16166de48cac282_0
2025-05-07 18:31:35,286 - semgrep.rule_match - DEBUG - match_key = ('location ... {\n  ...\n}\n proxy_http_version 1.1 ...;\n...\nproxy_set_header Upgrade ...;\n...\nproxy_set_header Connection ...;\n proxy_set_header Upgrade ...;\n...\nproxy_http_version 1.1 ...;\n...\nproxy_set_header Connection ...;\n proxy_set_header Upgrade ...;\n...\nproxy_set_header Connection ...;\n...\nproxy_http_version 1.1 ...;\n', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.possible-nginx-h2c-smuggling') match_id = 9c9a68904cd5f1bcc600d614fcf82a583f18cfaec0d5eb140839ca703b9c623c7cfc573fca0bf9d5ad80cc884a5b3c647b2bca360d9de5aae16166de48cac282_0
2025-05-07 18:31:35,286 - semgrep.rule_match - DEBUG - match_key = ('location ... {\n  ...\n}\n proxy_http_version 1.1 ...;\n...\nproxy_set_header Upgrade ...;\n...\nproxy_set_header Connection ...;\n proxy_set_header Upgrade ...;\n...\nproxy_http_version 1.1 ...;\n...\nproxy_set_header Connection ...;\n proxy_set_header Upgrade ...;\n...\nproxy_set_header Connection ...;\n...\nproxy_http_version 1.1 ...;\n', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.possible-nginx-h2c-smuggling') match_id = 9c9a68904cd5f1bcc600d614fcf82a583f18cfaec0d5eb140839ca703b9c623c7cfc573fca0bf9d5ad80cc884a5b3c647b2bca360d9de5aae16166de48cac282_1
2025-05-07 18:31:35,287 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.request-host-used') match_id = 2d15b7f5a4abb20573726aa118371745c91337cf7052724b0fe83031bb17c7c1b68aac943fb6cc69147b47b2e61ded3b170fec174e9ed7cae7cb195c93a9b0ad_0
2025-05-07 18:31:35,287 - semgrep.rule_match - DEBUG - match_key = ('$host $http_host', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.request-host-used') match_id = ae4ba3bb028725171940b5431a573f2783522a35d0ff095992ae2a3c86d26008968f89b5ccd1eb2575ba41d0f2a6dfbaf56236afd8e208f7b9cd6b6d65b357be_0
2025-05-07 18:31:35,288 - semgrep.rule_match - DEBUG - match_key = ('$host $http_host', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.request-host-used') match_id = ae4ba3bb028725171940b5431a573f2783522a35d0ff095992ae2a3c86d26008968f89b5ccd1eb2575ba41d0f2a6dfbaf56236afd8e208f7b9cd6b6d65b357be_0
2025-05-07 18:31:35,288 - semgrep.rule_match - DEBUG - match_key = ('$host $http_host', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.request-host-used') match_id = ae4ba3bb028725171940b5431a573f2783522a35d0ff095992ae2a3c86d26008968f89b5ccd1eb2575ba41d0f2a6dfbaf56236afd8e208f7b9cd6b6d65b357be_1
2025-05-07 18:31:35,288 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.possible-nginx-h2c-smuggling') match_id = 0bfbef5faa5cd393ea1ed631a0707d6b275b0ace68d8cf9f5ae046857d09ae3c6e2562fac91413350763c1d7c92239e0e637ecc1ec3d679e2528752927160157_0
2025-05-07 18:31:35,289 - semgrep.rule_match - DEBUG - match_key = ('location ... {\n  ...\n}\n proxy_http_version 1.1 ...;\n...\nproxy_set_header Upgrade ...;\n...\nproxy_set_header Connection ...;\n proxy_set_header Upgrade ...;\n...\nproxy_http_version 1.1 ...;\n...\nproxy_set_header Connection ...;\n proxy_set_header Upgrade ...;\n...\nproxy_set_header Connection ...;\n...\nproxy_http_version 1.1 ...;\n', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.possible-nginx-h2c-smuggling') match_id = 9c9a68904cd5f1bcc600d614fcf82a583f18cfaec0d5eb140839ca703b9c623c7cfc573fca0bf9d5ad80cc884a5b3c647b2bca360d9de5aae16166de48cac282_0
2025-05-07 18:31:35,289 - semgrep.rule_match - DEBUG - match_key = ('location ... {\n  ...\n}\n proxy_http_version 1.1 ...;\n...\nproxy_set_header Upgrade ...;\n...\nproxy_set_header Connection ...;\n proxy_set_header Upgrade ...;\n...\nproxy_http_version 1.1 ...;\n...\nproxy_set_header Connection ...;\n proxy_set_header Upgrade ...;\n...\nproxy_set_header Connection ...;\n...\nproxy_http_version 1.1 ...;\n', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.possible-nginx-h2c-smuggling') match_id = 9c9a68904cd5f1bcc600d614fcf82a583f18cfaec0d5eb140839ca703b9c623c7cfc573fca0bf9d5ad80cc884a5b3c647b2bca360d9de5aae16166de48cac282_0
2025-05-07 18:31:35,290 - semgrep.rule_match - DEBUG - match_key = ('location ... {\n  ...\n}\n proxy_http_version 1.1 ...;\n...\nproxy_set_header Upgrade ...;\n...\nproxy_set_header Connection ...;\n proxy_set_header Upgrade ...;\n...\nproxy_http_version 1.1 ...;\n...\nproxy_set_header Connection ...;\n proxy_set_header Upgrade ...;\n...\nproxy_set_header Connection ...;\n...\nproxy_http_version 1.1 ...;\n', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.possible-nginx-h2c-smuggling') match_id = 9c9a68904cd5f1bcc600d614fcf82a583f18cfaec0d5eb140839ca703b9c623c7cfc573fca0bf9d5ad80cc884a5b3c647b2bca360d9de5aae16166de48cac282_2
2025-05-07 18:31:35,290 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.request-host-used') match_id = 2d15b7f5a4abb20573726aa118371745c91337cf7052724b0fe83031bb17c7c1b68aac943fb6cc69147b47b2e61ded3b170fec174e9ed7cae7cb195c93a9b0ad_0
2025-05-07 18:31:35,291 - semgrep.rule_match - DEBUG - match_key = ('$host $http_host', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.request-host-used') match_id = ae4ba3bb028725171940b5431a573f2783522a35d0ff095992ae2a3c86d26008968f89b5ccd1eb2575ba41d0f2a6dfbaf56236afd8e208f7b9cd6b6d65b357be_0
2025-05-07 18:31:35,291 - semgrep.rule_match - DEBUG - match_key = ('$host $http_host', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.request-host-used') match_id = ae4ba3bb028725171940b5431a573f2783522a35d0ff095992ae2a3c86d26008968f89b5ccd1eb2575ba41d0f2a6dfbaf56236afd8e208f7b9cd6b6d65b357be_0
2025-05-07 18:31:35,291 - semgrep.rule_match - DEBUG - match_key = ('$host $http_host', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.request-host-used') match_id = ae4ba3bb028725171940b5431a573f2783522a35d0ff095992ae2a3c86d26008968f89b5ccd1eb2575ba41d0f2a6dfbaf56236afd8e208f7b9cd6b6d65b357be_2
2025-05-07 18:31:35,292 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.header-redefinition') match_id = ed4308388d9717632c3413e0042c71c8ca19722693da0579bd414e26a926270197f3b7957e9679783f67c714656d7abd949994a2873bd88e6078b8560142484b_0
2025-05-07 18:31:35,292 - semgrep.rule_match - DEBUG - match_key = ('add_header ...; location ... {\n  ...\n  ...\n}\n server {\n  ...\n  add_header ...;\n  ...\n  ...\n}\n', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.header-redefinition') match_id = a1a3a936ce9a8cb6805c9c4ba21a8a3c744f421fa783b999dd6575c3d91d24e710883b8ec64d23f7f607e4fecbe0acc872a7b76dde4bc0ba9435eabea58fb0b0_0
2025-05-07 18:31:35,293 - semgrep.rule_match - DEBUG - match_key = ('add_header ...; location ... {\n  ...\n  ...\n}\n server {\n  ...\n  add_header ...;\n  ...\n  ...\n}\n', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.header-redefinition') match_id = a1a3a936ce9a8cb6805c9c4ba21a8a3c744f421fa783b999dd6575c3d91d24e710883b8ec64d23f7f607e4fecbe0acc872a7b76dde4bc0ba9435eabea58fb0b0_0
2025-05-07 18:31:35,293 - semgrep.rule_match - DEBUG - match_key = ('add_header ...; location ... {\n  ...\n  ...\n}\n server {\n  ...\n  add_header ...;\n  ...\n  ...\n}\n', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.header-redefinition') match_id = a1a3a936ce9a8cb6805c9c4ba21a8a3c744f421fa783b999dd6575c3d91d24e710883b8ec64d23f7f607e4fecbe0acc872a7b76dde4bc0ba9435eabea58fb0b0_0
2025-05-07 18:31:35,293 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.header-redefinition') match_id = ed4308388d9717632c3413e0042c71c8ca19722693da0579bd414e26a926270197f3b7957e9679783f67c714656d7abd949994a2873bd88e6078b8560142484b_0
2025-05-07 18:31:35,294 - semgrep.rule_match - DEBUG - match_key = ('add_header ...; location ... {\n  ...\n  ...\n}\n server {\n  ...\n  add_header ...;\n  ...\n  ...\n}\n', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.header-redefinition') match_id = a1a3a936ce9a8cb6805c9c4ba21a8a3c744f421fa783b999dd6575c3d91d24e710883b8ec64d23f7f607e4fecbe0acc872a7b76dde4bc0ba9435eabea58fb0b0_0
2025-05-07 18:31:35,294 - semgrep.rule_match - DEBUG - match_key = ('add_header ...; location ... {\n  ...\n  ...\n}\n server {\n  ...\n  add_header ...;\n  ...\n  ...\n}\n', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.header-redefinition') match_id = a1a3a936ce9a8cb6805c9c4ba21a8a3c744f421fa783b999dd6575c3d91d24e710883b8ec64d23f7f607e4fecbe0acc872a7b76dde4bc0ba9435eabea58fb0b0_0
2025-05-07 18:31:35,295 - semgrep.rule_match - DEBUG - match_key = ('add_header ...; location ... {\n  ...\n  ...\n}\n server {\n  ...\n  add_header ...;\n  ...\n  ...\n}\n', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.header-redefinition') match_id = a1a3a936ce9a8cb6805c9c4ba21a8a3c744f421fa783b999dd6575c3d91d24e710883b8ec64d23f7f607e4fecbe0acc872a7b76dde4bc0ba9435eabea58fb0b0_1
2025-05-07 18:31:35,295 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.header-redefinition') match_id = ed4308388d9717632c3413e0042c71c8ca19722693da0579bd414e26a926270197f3b7957e9679783f67c714656d7abd949994a2873bd88e6078b8560142484b_0
2025-05-07 18:31:35,295 - semgrep.rule_match - DEBUG - match_key = ('add_header ...; location ... {\n  ...\n  ...\n}\n server {\n  ...\n  add_header ...;\n  ...\n  ...\n}\n', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.header-redefinition') match_id = a1a3a936ce9a8cb6805c9c4ba21a8a3c744f421fa783b999dd6575c3d91d24e710883b8ec64d23f7f607e4fecbe0acc872a7b76dde4bc0ba9435eabea58fb0b0_0
2025-05-07 18:31:35,296 - semgrep.rule_match - DEBUG - match_key = ('add_header ...; location ... {\n  ...\n  ...\n}\n server {\n  ...\n  add_header ...;\n  ...\n  ...\n}\n', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.header-redefinition') match_id = a1a3a936ce9a8cb6805c9c4ba21a8a3c744f421fa783b999dd6575c3d91d24e710883b8ec64d23f7f607e4fecbe0acc872a7b76dde4bc0ba9435eabea58fb0b0_0
2025-05-07 18:31:35,296 - semgrep.rule_match - DEBUG - match_key = ('add_header ...; location ... {\n  ...\n  ...\n}\n server {\n  ...\n  add_header ...;\n  ...\n  ...\n}\n', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.header-redefinition') match_id = a1a3a936ce9a8cb6805c9c4ba21a8a3c744f421fa783b999dd6575c3d91d24e710883b8ec64d23f7f607e4fecbe0acc872a7b76dde4bc0ba9435eabea58fb0b0_2
2025-05-07 18:31:35,297 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.header-redefinition') match_id = ed4308388d9717632c3413e0042c71c8ca19722693da0579bd414e26a926270197f3b7957e9679783f67c714656d7abd949994a2873bd88e6078b8560142484b_0
2025-05-07 18:31:35,297 - semgrep.rule_match - DEBUG - match_key = ('add_header ...; location ... {\n  ...\n  ...\n}\n server {\n  ...\n  add_header ...;\n  ...\n  ...\n}\n', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.header-redefinition') match_id = a1a3a936ce9a8cb6805c9c4ba21a8a3c744f421fa783b999dd6575c3d91d24e710883b8ec64d23f7f607e4fecbe0acc872a7b76dde4bc0ba9435eabea58fb0b0_0
2025-05-07 18:31:35,297 - semgrep.rule_match - DEBUG - match_key = ('add_header ...; location ... {\n  ...\n  ...\n}\n server {\n  ...\n  add_header ...;\n  ...\n  ...\n}\n', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.header-redefinition') match_id = a1a3a936ce9a8cb6805c9c4ba21a8a3c744f421fa783b999dd6575c3d91d24e710883b8ec64d23f7f607e4fecbe0acc872a7b76dde4bc0ba9435eabea58fb0b0_0
2025-05-07 18:31:35,298 - semgrep.rule_match - DEBUG - match_key = ('add_header ...; location ... {\n  ...\n  ...\n}\n server {\n  ...\n  add_header ...;\n  ...\n  ...\n}\n', PosixPath('nginx.conf'), 'config..semgrep.vendored-rules.generic.nginx.security.header-redefinition') match_id = a1a3a936ce9a8cb6805c9c4ba21a8a3c744f421fa783b999dd6575c3d91d24e710883b8ec64d23f7f607e4fecbe0acc872a7b76dde4bc0ba9435eabea58fb0b0_3
2025-05-07 18:31:35,298 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('scripts/post-build.js'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unknown-value-with-script-tag') match_id = fc41886827c8d2eb2eee3ca37927f0fc23d975e9b64a8894f75758a18e4867ac4e46cc12deafca9418e47657638c41295f4b4780bbc11b5d489203c9a7886a3d_0
2025-05-07 18:31:35,299 - semgrep.rule_match - DEBUG - match_key = ('fs.writeFileSync(..., <... "=~/.*<script.*/" ...>, ...) publicDir publicDir = path.join(...);\n...\nfs.writeFileSync(..., <... publicDir ...>, ...);\n', PosixPath('scripts/post-build.js'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unknown-value-with-script-tag') match_id = 21d78b25b88f4f8531f0ee50a6a18bb0a9364b81a545353b81e597fd46c45ba48c6406b0c66b03073b4b081b1b9fc2413bf38507273448f68c60c4ecc5ef04d4_0
2025-05-07 18:31:35,299 - semgrep.rule_match - DEBUG - match_key = ('fs.writeFileSync(..., <... "=~/.*<script.*/" ...>, ...) publicDir publicDir = path.join(...);\n...\nfs.writeFileSync(..., <... publicDir ...>, ...);\n', PosixPath('scripts/post-build.js'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unknown-value-with-script-tag') match_id = 21d78b25b88f4f8531f0ee50a6a18bb0a9364b81a545353b81e597fd46c45ba48c6406b0c66b03073b4b081b1b9fc2413bf38507273448f68c60c4ecc5ef04d4_0
2025-05-07 18:31:35,299 - semgrep.rule_match - DEBUG - match_key = ('fs.writeFileSync(..., <... "=~/.*<script.*/" ...>, ...) publicDir publicDir = path.join(...);\n...\nfs.writeFileSync(..., <... publicDir ...>, ...);\n', PosixPath('scripts/post-build.js'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unknown-value-with-script-tag') match_id = 21d78b25b88f4f8531f0ee50a6a18bb0a9364b81a545353b81e597fd46c45ba48c6406b0c66b03073b4b081b1b9fc2413bf38507273448f68c60c4ecc5ef04d4_0
2025-05-07 18:31:35,300 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('scripts/reset-db.js'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = 4faf8c6bdc6745abaf2fad776a97dc32e8c696483ebf39e03cfe4dbca4dccbdbe95e9c57f37717e76b3b56a738eee791d93ce96d9109cf34e384c1e67edcc58d_0
2025-05-07 18:31:35,300 - semgrep.rule_match - DEBUG - match_key = ('"..." + "..."\n $X + $Y $X.concat($Y) `...${...}...`\n $X.concat("...")\n `Aviso ao dropar tabela tableName: $UTIL = require(\'util\')\n...\n $UTIL.format(`Aviso ao dropar tabela tableName:,err.message,...)\n console.warn(`Aviso ao dropar tabela tableName:,err.message,...)\n', PosixPath('scripts/reset-db.js'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = cb94665dc861f6ffc71748c6597f2f01ac19e3816e01b7ead58bb4465952a7cd88c01ff24c75b304295608d52e33c822ef9d1147209d65387c56bf5893ec9f39_0
2025-05-07 18:31:35,301 - semgrep.rule_match - DEBUG - match_key = ('"..." + "..."\n $X + $Y $X.concat($Y) `...${...}...`\n $X.concat("...")\n `Aviso ao dropar tabela tableName: $UTIL = require(\'util\')\n...\n $UTIL.format(`Aviso ao dropar tabela tableName:,err.message,...)\n console.warn(`Aviso ao dropar tabela tableName:,err.message,...)\n', PosixPath('scripts/reset-db.js'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = cb94665dc861f6ffc71748c6597f2f01ac19e3816e01b7ead58bb4465952a7cd88c01ff24c75b304295608d52e33c822ef9d1147209d65387c56bf5893ec9f39_0
2025-05-07 18:31:35,301 - semgrep.rule_match - DEBUG - match_key = ('"..." + "..."\n $X + $Y $X.concat($Y) `...${...}...`\n $X.concat("...")\n `Aviso ao dropar tabela tableName: $UTIL = require(\'util\')\n...\n $UTIL.format(`Aviso ao dropar tabela tableName:,err.message,...)\n console.warn(`Aviso ao dropar tabela tableName:,err.message,...)\n', PosixPath('scripts/reset-db.js'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = cb94665dc861f6ffc71748c6597f2f01ac19e3816e01b7ead58bb4465952a7cd88c01ff24c75b304295608d52e33c822ef9d1147209d65387c56bf5893ec9f39_0
2025-05-07 18:31:35,302 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('server/permissions.ts'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = 26504fbe060c2b00ad6f95ddc82cccb40623418c9dc983ef9f4c3ce696499002eb28529492b9f5f02e5ee7834420fb822e2965289ba6ee75a610e379db903694_0
2025-05-07 18:31:35,302 - semgrep.rule_match - DEBUG - match_key = ('"..." + "..."\n $X + $Y $X.concat($Y) `...${...}...`\n $X.concat("...")\n `Erro ao verificar propriedade do recurso resourceTable: $UTIL = require(\'util\')\n...\n $UTIL.format(`Erro ao verificar propriedade do recurso resourceTable:,error,...)\n console.error(`Erro ao verificar propriedade do recurso resourceTable:,error,...)\n', PosixPath('server/permissions.ts'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = 096e6486715ef4675a68abe278ab5a129a5e46e15944af0c403fd820bd372315d0345178f2183e217fd8ee720b24fa4258dcf0c61a7365cb152ecfb1ae11bf72_0
2025-05-07 18:31:35,303 - semgrep.rule_match - DEBUG - match_key = ('"..." + "..."\n $X + $Y $X.concat($Y) `...${...}...`\n $X.concat("...")\n `Erro ao verificar propriedade do recurso resourceTable: $UTIL = require(\'util\')\n...\n $UTIL.format(`Erro ao verificar propriedade do recurso resourceTable:,error,...)\n console.error(`Erro ao verificar propriedade do recurso resourceTable:,error,...)\n', PosixPath('server/permissions.ts'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = 096e6486715ef4675a68abe278ab5a129a5e46e15944af0c403fd820bd372315d0345178f2183e217fd8ee720b24fa4258dcf0c61a7365cb152ecfb1ae11bf72_0
2025-05-07 18:31:35,303 - semgrep.rule_match - DEBUG - match_key = ('"..." + "..."\n $X + $Y $X.concat($Y) `...${...}...`\n $X.concat("...")\n `Erro ao verificar propriedade do recurso resourceTable: $UTIL = require(\'util\')\n...\n $UTIL.format(`Erro ao verificar propriedade do recurso resourceTable:,error,...)\n console.error(`Erro ao verificar propriedade do recurso resourceTable:,error,...)\n', PosixPath('server/permissions.ts'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = 096e6486715ef4675a68abe278ab5a129a5e46e15944af0c403fd820bd372315d0345178f2183e217fd8ee720b24fa4258dcf0c61a7365cb152ecfb1ae11bf72_0
2025-05-07 18:31:35,304 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('server/routes.ts'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = e24e3288a32c9ad4921da20b227a0587a0596856ea79e7c29c73137fde834094f382cf9604ac765ec32471f83cf1196712bec140c3a2b18c933a6c2a040a826f_0
2025-05-07 18:31:35,304 - semgrep.rule_match - DEBUG - match_key = ('"..." + "..."\n $X + $Y $X.concat($Y) `...${...}...`\n $X.concat("...")\n `Erro ao registrar auditoria (action resource): $UTIL = require(\'util\')\n...\n $UTIL.format(`Erro ao registrar auditoria (action resource):,error,...)\n console.error(`Erro ao registrar auditoria (action resource):,error,...)\n', PosixPath('server/routes.ts'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = d2b148f8a036d41985577e2402c3630cf31da0eb05592c00d804f75a0ff21e7ec6409a4e5f6ef6614f70f737191302429a01a709eb31c532545f2d7356ac6ecf_0
2025-05-07 18:31:35,305 - semgrep.rule_match - DEBUG - match_key = ('"..." + "..."\n $X + $Y $X.concat($Y) `...${...}...`\n $X.concat("...")\n `Erro ao registrar auditoria (action resource): $UTIL = require(\'util\')\n...\n $UTIL.format(`Erro ao registrar auditoria (action resource):,error,...)\n console.error(`Erro ao registrar auditoria (action resource):,error,...)\n', PosixPath('server/routes.ts'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = d2b148f8a036d41985577e2402c3630cf31da0eb05592c00d804f75a0ff21e7ec6409a4e5f6ef6614f70f737191302429a01a709eb31c532545f2d7356ac6ecf_0
2025-05-07 18:31:35,305 - semgrep.rule_match - DEBUG - match_key = ('"..." + "..."\n $X + $Y $X.concat($Y) `...${...}...`\n $X.concat("...")\n `Erro ao registrar auditoria (action resource): $UTIL = require(\'util\')\n...\n $UTIL.format(`Erro ao registrar auditoria (action resource):,error,...)\n console.error(`Erro ao registrar auditoria (action resource):,error,...)\n', PosixPath('server/routes.ts'), 'config..semgrep.vendored-rules.javascript.lang.security.audit.unsafe-formatstring') match_id = d2b148f8a036d41985577e2402c3630cf31da0eb05592c00d804f75a0ff21e7ec6409a4e5f6ef6614f70f737191302429a01a709eb31c532545f2d7356ac6ecf_0
2025-05-07 18:31:35,308 - semgrep.core_runner - DEBUG - semgrep ran in 0:00:29.874281 on 211 files
2025-05-07 18:31:35,310 - semgrep.core_runner - DEBUG - findings summary: 18 warning, 0 error, 8 info
2025-05-07 18:31:35,314 - semgrep.app.auth - DEBUG - Getting API token from settings file
2025-05-07 18:31:35,314 - semgrep.app.auth - DEBUG - No API token found in settings file
2025-05-07 18:31:35,315 - semgrep.semgrep_core - DEBUG - Failed to open resource semgrep-core-proprietary: [Errno 2] No such file or directory: '/tmp/_MEIuw5CjE/semgrep/bin/semgrep-core-proprietary'.
2025-05-07 18:31:35,449 - semgrep.output - VERBOSE - 
========================================
Files skipped:
========================================

  Always skipped by Opengrep:

   • <none>

  Skipped by .gitignore:
  (Disable by passing --no-git-ignore)

   • <all files not listed by `git ls-files` were skipped>

  Skipped by .semgrepignore:
  - https://semgrep.dev/docs/ignoring-files-folders-code/#understand-semgrep-defaults

   • <none>

  Skipped by --include patterns:

   • <none>

  Skipped by --exclude patterns:

   • <none>

  Files skipped due to insufficient read permissions:

   • <none>

  Skipped by limiting to files smaller than 1000000 bytes:
  (Adjust with the --max-target-bytes flag)

   • uploads/file-1746560426218-100858734.pdf

  Partially analyzed due to parsing or internal Opengrep errors

   • drizzle.production.config.ts (1 lines skipped)
   • tailwind.config.ts (1 lines skipped)

2025-05-07 18:31:35,450 - semgrep.output - INFO - Some files were skipped or only partially analyzed.
  Scan was limited to files tracked by git.
  Partially scanned: 2 files only partially analyzed due to parsing or internal Opengrep errors
  Scan skipped: 1 files larger than 1.0 MB
  For a full list of skipped files, run opengrep with the --verbose flag.

Ran 461 rules on 211 files: 26 findings.
2025-05-07 18:31:35,450 - semgrep.app.version - DEBUG - Version cache does not exist
2025-05-07 18:31:35,451 - semgrep.app.version - DEBUG - Version cache does not exist
2025-05-07 18:31:35,475 - semgrep.metrics - VERBOSE - Not sending pseudonymous metrics since metrics are configured to OFF and registry usage is False
